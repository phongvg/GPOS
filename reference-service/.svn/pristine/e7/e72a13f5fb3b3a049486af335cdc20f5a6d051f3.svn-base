package com.gg.gpos.reference.manager;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.gg.gpos.reference.dto.SystemParameterDto;
import com.gg.gpos.reference.entity.SystemParameter;
import com.gg.gpos.reference.mapper.SystemParameterMapper;
import com.gg.gpos.reference.repository.SystemParameterRepository;
import com.gg.gpos.reference.specification.SystemParameterSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class SystemParameterManager {
	@Autowired
	private SystemParameterRepository systemParameterRepository;
	@Autowired
	private SystemParameterMapper systemParameterMapper;
	@Autowired
	private SystemParameterSpecification parameterSpecification;
	
	public Page<SystemParameterDto> gets(SystemParameterDto criteria){
		log.debug("PROCESS: GETS SYSTEM_PARAM, CRITERIA: {}", criteria);
		Specification<SystemParameter> spec = Specification.where(parameterSpecification.search(criteria));
		Page<SystemParameter> page = systemParameterRepository.findAll(spec, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(systemParameterMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public SystemParameterDto get(Long id) {
		log.debug("PROCESS: GET SYSTEM_PARAM BY ID, ID: {}", id);
		return systemParameterRepository.findById(id).map(systemParameterMapper::entityToDto).orElse(null);
	}
	
	public SystemParameterDto get(String paramName) {
		log.debug("PROCESS: GET SYSTEM_PARAM BY PARAM_NAME, PARAM_NAME: {}", paramName);
		return systemParameterRepository.findByParamName(paramName).map(systemParameterMapper::entityToDto).orElse(null);
	}
	
	public List<SystemParameterDto> gets() {
		log.debug("PROCESS: GETS SYSTEM_PARAM");
		return systemParameterRepository.findAll().stream().map(systemParameterMapper::entityToDto).collect(Collectors.toList());
	}

	public Map<String, String> gets(String prefix) {
		log.debug("PROCESS: GETS SYSTEM_PARAM BY PARAM_NAME_PREFIX, PARAM_NAME_PREFIX: {}", prefix);
		Map<String, String> map = new HashMap<>();
		systemParameterRepository.findByParamNameStartingWith(prefix).forEach(s -> {
			map.put(s.getParamName(), s.getParamValue());
		});
		return map;
	}
	
	public SystemParameterDto save(SystemParameterDto systemParameterDto) {
		log.debug("PROCESS: SAVE SYSTEM_PARAM, SYSTEM_PARAM: {}", systemParameterDto);
		SystemParameter systemParameter = Optional.ofNullable(systemParameterDto).map(systemParameterMapper::dtoToEntity).orElse(null);
		if (systemParameter != null) {
			return Optional.ofNullable(systemParameterRepository.save(systemParameter)).map(systemParameterMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
}