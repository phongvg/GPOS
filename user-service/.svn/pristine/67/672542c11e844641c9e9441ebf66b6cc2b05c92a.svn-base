package com.gg.gpos.user.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import com.gg.gpos.user.dto.AppGroupDto;
import com.gg.gpos.user.entity.AppGroup;
import com.gg.gpos.user.entity.Role;
import com.gg.gpos.user.mapper.AppGroupMapper;
import com.gg.gpos.user.repository.AppGroupRepository;
import com.gg.gpos.user.repository.RoleRepository;
import com.gg.gpos.user.specification.GroupSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class AppGroupManager {
	@Autowired
	private AppGroupRepository appGroupRepository;
	@Autowired
	private RoleRepository roleRepository;
	@Autowired
	private AppGroupMapper appGroupMapper;
	@Autowired
	private GroupSpecification groupSpecification;
	
	public AppGroupDto get(Long id) {
		log.debug("PROCESS: GET APP_GROUP BY ID, ID: {}", id);
		return appGroupRepository.findById(id).map(appGroupMapper::entityToDto).orElse(null);
	}
	
	public List<AppGroupDto> gets() {
		log.debug("PROCESS: GETS APP_GROUP");
		return appGroupRepository.findAll().stream().map(appGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public AppGroupDto save(AppGroupDto appGroupDto) {
		log.debug("PROCESS: SAVE APP_GROUP, APP_GROUP: {}", appGroupDto);
		List<Role> roles = null;
		List<Long> roleIds = appGroupDto.getRoleIds();
		if (roleIds != null && !roleIds.isEmpty()) {
			roles = roleIds.stream().map(id -> roleRepository.getOne(id)).collect(Collectors.toList());
		}
		AppGroup appGroup = Optional.ofNullable(appGroupDto).map(appGroupMapper::dtoToEntity).orElse(null);
		if (appGroup != null) {
			appGroup.setRoles(roles);
			return Optional.ofNullable(appGroupRepository.save(appGroup)).map(appGroupMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public List<AppGroupDto> gets(AppGroupDto criteria) {
		log.debug("PROCESS: GETS APP_GROUP, CRITERIA: {}", criteria);
		Specification<AppGroup> specs = Specification.not(null);
		if (!StringUtils.isEmpty(criteria.getName())) {
			specs = Specification.where(groupSpecification.nameLike(criteria.getName()));
		}
		return appGroupRepository.findAll(specs).stream().map(appGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public void delete(AppGroupDto appGroupDto) {
		log.debug("PROCESS: DELETE APP_GROUP, APP_GROUP: {}", appGroupDto);
		AppGroup appGroup = Optional.ofNullable(appGroupDto).map(appGroupMapper::dtoToEntity).orElse(null);
		if (appGroup != null) {
			appGroupRepository.delete(appGroup);
		}
	}
}