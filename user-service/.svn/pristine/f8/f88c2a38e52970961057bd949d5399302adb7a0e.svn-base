package com.gg.gpos.user.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.gg.gpos.user.dto.PositionDto;
import com.gg.gpos.user.entity.Position;
import com.gg.gpos.user.mapper.PositionMapper;
import com.gg.gpos.user.repository.PositionRepository;
import com.gg.gpos.user.specification.PositionSpecification;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Service
@Transactional
public class PositionManager {
	private PositionRepository positionRepository;
	@Autowired
	public void setPositionRepository(PositionRepository positionRepository) {
		this.positionRepository = positionRepository;
	}
	
	private PositionMapper positionMapper;
	@Autowired
	public void setPositionMapper(PositionMapper positionMapper) {
		this.positionMapper = positionMapper;
	}
	
	private PositionSpecification positionSpecification;
	@Autowired
	public void setPositionSpecification(PositionSpecification positionSpecification) {
		this.positionSpecification= positionSpecification;
	}
	
	public PositionDto get(Long id) {
		return positionRepository.findById(id).map(positionMapper::entityToDto).orElse(null);
	}
	
	public List<PositionDto> gets() {
		return positionRepository.findAll().stream().map(positionMapper::entityToDto).collect(Collectors.toList());
	}
	
	public Page<PositionDto> gets(PositionDto criteria){
		Specification<Position> specs = Specification.not(null);
		if(!StringUtils.isEmpty(criteria.getName())) {
			specs = Specification.where(positionSpecification.nameLike(criteria.getName()));
		}
		
		Page<Position> page = positionRepository.findAll(specs,PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(positionMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(),criteria.getSize()),page.getTotalElements());
	}
	
	public PositionDto save(PositionDto positionDto) {
		Position position = Optional.ofNullable(positionDto).map(positionMapper::dtoToEntity).orElse(null);
		if (position != null) {
			return Optional.ofNullable(positionRepository.save(position)).map(positionMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public void delete(PositionDto positionDto) {
		Position position = Optional.ofNullable(positionDto).map(positionMapper::dtoToEntity).orElse(null);
		if(position != null) {
			positionRepository.delete(position);
		}
	}
}