package com.gg.gpos.user.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.gg.gpos.user.dto.RoleDto;
import com.gg.gpos.user.entity.AppGroup;
import com.gg.gpos.user.entity.Role;
import com.gg.gpos.user.mapper.RoleMapper;
import com.gg.gpos.user.repository.AppGroupRepository;
import com.gg.gpos.user.repository.RoleRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class RoleManager {
	private RoleRepository roleRepository;
	@Autowired
	public void setRoleRepository(RoleRepository roleRepository) {
		this.roleRepository = roleRepository;
	}
	private RoleMapper roleMapper;
	@Autowired
	public void setRoleMapper(RoleMapper roleMapper) {
		this.roleMapper = roleMapper;
	}
	@Autowired
	private AppGroupRepository appGroupRepository;
	
	public RoleDto get(Long id) {
		return roleRepository.findById(id).map(roleMapper::entityToDto).orElse(null);
	}
	
	public List<RoleDto> gets() {
		log.debug("PROCESS: GETS ROLE");
		return roleRepository.findAll().stream().map(roleMapper::entityToDto).collect(Collectors.toList());
	}
	
	public RoleDto save(RoleDto roleDto) {
		Role role = Optional.ofNullable(roleDto).map(roleMapper::dtoToEntity).orElse(null);
		if (role != null) {
			return Optional.ofNullable(roleRepository.save(role)).map(roleMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public List<RoleDto> getRolesByAppGroupId(Long appGroupId){
		log.debug("PROCESS: GETS ROLE BY APP_GROUP_ID, APP_GROUP_ID: {}", appGroupId);
		AppGroup appGroup = appGroupRepository.loadGroupById(appGroupId);
		List<Role> roles = appGroup.getRoles();
		return roles.stream().map(roleMapper::entityToDto).collect(Collectors.toList());
	}
}