package com.gg.gpos.menu.manager;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.gg.gpos.common.constant.CountAbsolutePathEnum;
import com.gg.gpos.common.constant.ErrorImportEnum;
import com.gg.gpos.common.constant.FoodGroupLevelEnum;
import com.gg.gpos.common.constant.FoodGroupLevelNameEnum;
import com.gg.gpos.common.constant.FunctionTypeEnum;
import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.ResultEnum;
import com.gg.gpos.common.constant.StatusEnum;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.common.constant.SyncStatusEnum;
import com.gg.gpos.common.constant.TypeDataEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.common.constant.TypeSyncEnum;
import com.gg.gpos.common.helper.ImageHelper;
import com.gg.gpos.common.json.ConfigMenuEngineering;
import com.gg.gpos.common.json.JsonDeleteCoCategory;
import com.gg.gpos.common.json.JsonOrderCategory;
import com.gg.gpos.common.json.MenuFoodGroup;
import com.gg.gpos.common.util.FancyTree;
import com.gg.gpos.integration.dto.SyncDto;
import com.gg.gpos.io.dto.IOSoDto;
import com.gg.gpos.menu.dto.CoCategoryDto;
import com.gg.gpos.menu.dto.FoodGroupDto;
import com.gg.gpos.menu.dto.FoodGroupItemDto;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.dto.MenuTypeDto;
import com.gg.gpos.menu.dto.OrderCategoryDto;
import com.gg.gpos.menu.dto.SoCategoryDto;
import com.gg.gpos.menu.dto.SoCategoryFoodGroupDto;
import com.gg.gpos.menu.dto.SoDto;
import com.gg.gpos.menu.entity.CatalogApplyToRestaurant;
import com.gg.gpos.menu.entity.CatalogDataEdit;
import com.gg.gpos.menu.entity.Co;
import com.gg.gpos.menu.entity.CoCategory;
import com.gg.gpos.menu.entity.CoFoodGroupDisplay;
import com.gg.gpos.menu.entity.CoFoodItem;
import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.FoodGroupItem;
import com.gg.gpos.menu.entity.FoodItem;
import com.gg.gpos.menu.entity.MenuType;
import com.gg.gpos.menu.entity.OrderCategory;
import com.gg.gpos.menu.entity.RestaurantDataEdit;
import com.gg.gpos.menu.entity.SoCategory;
import com.gg.gpos.menu.entity.SoCategoryFoodGroup;
import com.gg.gpos.menu.mapper.CoCategoryMapper;
import com.gg.gpos.menu.mapper.FoodGroupItemMapper;
import com.gg.gpos.menu.mapper.FoodGroupMapper;
import com.gg.gpos.menu.mapper.FoodItemMapper;
import com.gg.gpos.menu.mapper.MenuTypeMapper;
import com.gg.gpos.menu.mapper.OrderCategoryMapper;
import com.gg.gpos.menu.mapper.SoCategoryMapper;
import com.gg.gpos.menu.mapper.SoMapper;
import com.gg.gpos.menu.repository.CatalogApplyToRestaurantRepository;
import com.gg.gpos.menu.repository.CatalogDataEditRepository;
import com.gg.gpos.menu.repository.CoCategoryRepository;
import com.gg.gpos.menu.repository.CoFoodGroupDisplayRepository;
import com.gg.gpos.menu.repository.CoFoodItemModifierRepository;
import com.gg.gpos.menu.repository.CoFoodItemRepository;
import com.gg.gpos.menu.repository.CoRepository;
import com.gg.gpos.menu.repository.FoodGroupItemRepository;
import com.gg.gpos.menu.repository.FoodGroupRepository;
import com.gg.gpos.menu.repository.FoodItemRepository;
import com.gg.gpos.menu.repository.MenuTypeRepository;
import com.gg.gpos.menu.repository.OrderCategoryRepository;
import com.gg.gpos.menu.repository.RelatedFoodItemRepository;
import com.gg.gpos.menu.repository.RestaurantDataEditRepository;
import com.gg.gpos.menu.repository.SoCategoryFoodGroupRepository;
import com.gg.gpos.menu.repository.SoCategoryRepository;
import com.gg.gpos.menu.repository.SoRepository;
import com.gg.gpos.menu.repository.ToppingFoodItemRepository;
import com.gg.gpos.menu.specification.SoCategorySpecification;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.entity.Attachment;
import com.gg.gpos.reference.mapper.AttachmentMapper;
import com.gg.gpos.reference.repository.AttachmentRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class SoCategoryManager {
	@Autowired
	private SoCategoryRepository soCategoryRepository;
	@Autowired
	private SoCategoryMapper soCategoryMapper;
	@Autowired
	private FoodGroupRepository foodGroupRepository;
	@Autowired
	private FoodGroupMapper foodGroupMapper;
	@Autowired
	private FoodGroupItemRepository foodGroupItemRepository;
	@Autowired
	private SoCategoryFoodGroupRepository soCategoryFoodGroupRepository;
	@Autowired
	private CoFoodItemRepository coFoodItemRepository;
	@Autowired
	private RelatedFoodItemRepository relatedFoodItemRepository;
	@Autowired
	private SoCategorySpecification soCategorySpecification;
	@Autowired 
	private MenuTypeRepository menuTypeRepository;
	@Autowired
	private OrderCategoryMapper orderCategoryMapper;
	@Autowired
	private CatalogDataEditRepository catalogDataEditRepository;
	@Autowired
	private CatalogApplyToRestaurantRepository catalogApplyToRestaurantRepository;
	@Autowired
	private CoCategoryRepository coCategoryRepository;
	@Autowired
	private CoFoodGroupDisplayRepository coFoodGroupDisplayRepository;
	@Autowired
	private RestaurantDataEditRepository restaurantDataEditRepository;
	@Autowired
	private CoRepository coRepository;
	@Autowired
	private AttachmentRepository attachmentRepository;
	@Autowired
	private FoodItemRepository foodItemRepository;
	@Autowired
	private ToppingFoodItemRepository toppingFoodItemRepository;
	@Autowired
	private CoFoodItemModifierRepository coFoodItemModifierRepository;
	@Autowired
	private FoodGroupItemMapper foodGroupItemMapper;
	@Autowired
	private OrderCategoryRepository orderCategoryRepository;
	@Autowired
	private SoRepository soRepository;
	@Autowired
	private SoMapper soMapper;
	@Autowired
	private MenuTypeMapper menuTypeMapper;
	@Autowired
	private ImageHelper imageHelper;
	@Autowired
	private AttachmentMapper attachmentMapper;
	@Autowired
	private FoodItemMapper foodItemMapper;
	@Autowired
	private CoCategoryMapper coCategoryMapper;
	
	public SoCategoryDto get(Long id) {
		log.info("Entering 'get(id)' method... ");
		return soCategoryRepository.findSoCategory(id).map(soCategoryMapper::entityToDto).orElse(null);
	}
	
	public SoCategoryDto getById(Long id) {
		return soCategoryRepository.findById(id).map(soCategoryMapper::entityToDto).orElse(null);
	}
	
	public SoCategoryDto getBySoIdAndOrderCategoryCode(Long soId, String orderCategoryCode) {
		return Optional.ofNullable(soCategoryRepository.findBySoIdAndOrderCategoryCode(soId,orderCategoryCode)).map(soCategoryMapper::entityToDto).orElse(null);
	}
	
	public SoCategoryDto saveSoCategory(SoCategoryDto soCategoryDto) {
		OrderCategory orderCategory = Optional.ofNullable(soCategoryDto.getOrderCategory()).map(orderCategoryMapper::dtoToEntity).orElse(null);
		SoCategory soCategory = Optional.ofNullable(soCategoryDto).map(soCategoryMapper::dtoToEntity).orElse(null);
		if (soCategory != null) {
			soCategory.setOrderCategory(orderCategory);
			return Optional.ofNullable(soCategoryRepository.save(soCategory)).map(soCategoryMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public List<SoCategoryDto> gets() {
		return soCategoryRepository.findAll().stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<SoCategoryDto> gets(Long soId,Long cId) {
		return soCategoryRepository.findBySoIdAndCId(soId,cId).stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<SoCategoryDto> getByRCode(Integer resCode) {
		return soCategoryRepository.findByRCode(resCode).stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList());
	}
	
	public SoCategoryDto save(SoCategoryDto soCategoryDto) {
		SoCategory soCategory = Optional.ofNullable(soCategoryDto).map(soCategoryMapper::dtoToEntity).orElse(null);
		if (soCategory != null) {
			return Optional.ofNullable(soCategoryRepository.save(soCategory)).map(soCategoryMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<SoCategoryDto> getsBySoId(SoCategoryDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Page<SoCategory> page = soCategoryRepository.findBySoId(criteria.getSoId(), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public Page<SoCategoryDto> getsBySoIdAndResCode(SoCategoryDto criteria){
		log.debug("Entering 'getsBySoIdAndResCode(criteria)' method...");
		Page<SoCategory> page = soCategoryRepository.findBySoIdAndRestaurantCode(criteria.getSoId(),criteria.getRestaurantCode(), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}

	public SoCategoryDto save(String username, SoCategoryDto soCategoryDto,String attachmentPath,String attachmentContextPath) {
		Integer resCode = soCategoryDto.getRestaurantCode();
		if (resCode != null) {
			return saveByRestaurant(username, resCode, soCategoryDto,attachmentPath,attachmentContextPath);
		} else {
			return saveBySO(username, soCategoryDto,attachmentPath,attachmentContextPath);
		}
	}
	
	// save SoCategory by Restaurant
	private SoCategoryDto saveByRestaurant(final String username, final Integer resCode, final SoCategoryDto soCategoryDto,String attachmentPath,String attachmentContextPath) {
		log.info("Entering saveByRestaurant(username,resCode,soCategoryDto,attachmentPath,attachmentContextPath) method... ");
		
		SoCategory soCategory = Optional.ofNullable(soCategoryDto).map(soCategoryMapper::dtoToEntity).orElse(null);
		// if so-category is new then set so to null because this so-category belongs to restaurant
		// else check if this so-category has any food-group changed, if has then set so to null
		if (soCategory.getSo() != null && soCategory.getSo().getId() == null) {
			soCategory.setSo(null);
		} else {
			String updatedFoodGroups = soCategoryDto.getUpdatedFoodGroups();
			if (!StringUtils.isEmpty(updatedFoodGroups)) {
				soCategory.setSo(null);	
			}
		}
		
		// save so-category
		SoCategory savedSoCategory = soCategoryRepository.save(soCategory);
		if(soCategoryDto.isStatus()) {
			saveCoCategoryAfterSo(savedSoCategory.getId(), savedSoCategory.getType(), true);
		} else {
			offSoCategory(savedSoCategory, true);
		}
		
		// get list of food groups for processing
		List<FoodGroupDto> reqFoodGroups = soCategoryDto.getFoodGroups();
		List<FoodGroupDto> processingFoodGroups = new ArrayList<>();
		List<FoodGroupDto> deletedGroupFoods = new ArrayList<>();
		List<String> delFoodGroupCodes = new ArrayList<>();
		List<AttachmentDto> attachments = new ArrayList<>();
		
		// filter deleted food-group, updated food-group and new food-group for processing
		final Set<String> deletedFoodGroupIds = org.springframework.util.StringUtils.commaDelimitedListToSet(soCategoryDto.getDeletedFoodGroups());
		final Set<String> updatedFoodGroupIds = org.springframework.util.StringUtils.commaDelimitedListToSet(soCategoryDto.getUpdatedFoodGroups());
		
		if(reqFoodGroups != null && !reqFoodGroups.isEmpty()) {
			reqFoodGroups.forEach(fg -> {
				if (deletedFoodGroupIds.contains(String.valueOf(fg.getId()))) {
					deletedGroupFoods.add(fg);
				} else if (updatedFoodGroupIds.contains(String.valueOf(fg.getId())) || (fg.getId() == null && fg.isChecked())) {
					processingFoodGroups.add(fg);
				} else {
					// don't process with food-group that not be changed
				}
			});
		}
		
		// if there are some deleted food-group then delete them
		if (!deletedGroupFoods.isEmpty()) {
			deletedGroupFoods.stream().forEach(fg -> {
				FoodGroup deletedFoodGroup = foodGroupRepository.getOne(fg.getId());
				// delete so-category-food-groups and food-group-items that belong to deleted food-group
				foodGroupItemRepository.deleteByFoodGroupAndRestaurantCode(deletedFoodGroup, resCode);
				delAttachment(fg.getId(), ModuleTypeEnum.FOOD_GROUP.val);
				delFoodGroupCodes.add(fg.getCode());
				deletedFoodGroup.setChanged(StatusEnum.DELETE.status);
				foodGroupRepository.save(deletedFoodGroup);
			});
		}
		
		// delete co_foodGroup_display 
		if(delFoodGroupCodes != null && !delFoodGroupCodes.isEmpty()) {
			deleteDFGByCoCategory(savedSoCategory, resCode, delFoodGroupCodes);
		}
		
		// process food-group
		for (FoodGroupDto fg : processingFoodGroups) {
			FoodGroup foodGroup = Optional.ofNullable(fg).map(foodGroupMapper::dtoToEntity).orElse(null);
			if (fg.getId() != null) {
				foodGroup.setModifiedBy(username);
				FoodGroup existingFoodGroup = foodGroupRepository.getOne(fg.getId());
				if (existingFoodGroup != null) {
					foodGroup.setCreatedBy(existingFoodGroup.getCreatedBy());
					foodGroup.setCreatedDate(existingFoodGroup.getCreatedDate());
				}
			} else {
				foodGroup.setCreatedBy(username);
				foodGroup.setModifiedBy(username);
			}

			// save food-group
			if (foodGroup.getParent() != null && foodGroup.getParent().getId() == null) {
				foodGroup.setParent(null);
			}
			if(foodGroup.getNameVn() != null && !foodGroup.getNameVn().isEmpty()) {
				foodGroup.setUnsignedName(org.apache.commons.lang3.StringUtils.stripAccents(foodGroup.getNameVn()).toLowerCase());
			}
			foodGroup.setRestaurantCode(resCode);
			FoodGroup savedFoodGroup = foodGroupRepository.save(foodGroup);
			
			if(savedFoodGroup != null && savedFoodGroup.getSrcImage() != null && !savedFoodGroup.getSrcImage().isEmpty()) {
				AttachmentDto attachment = new AttachmentDto();
				attachment.setModuleId(savedFoodGroup.getId());
				attachment.setAbsolutePath(savedFoodGroup.getSrcImage());
				attachment.setRestaurantCode(savedFoodGroup.getRestaurantCode());
				attachment.setModuleCode(savedFoodGroup.getCode());
				attachments.add(attachment);
				
			}
			
			// process food-item
			String selectedFoodItems = fg.getSelectedFoodItems();
			if (!StringUtils.isEmpty(selectedFoodItems)) {
				List<Long> selectedfoodItemIds = org.springframework.util.StringUtils.commaDelimitedListToSet(selectedFoodItems).stream().map(Long::valueOf).collect(Collectors.toList());
				if (fg.getId() != null) {
					// save food group item
					List<FoodGroupItem> existingFoodGroupItems = foodGroupItemRepository.findByFoodGroupIdAndResCodeAndChanged(savedFoodGroup.getId(), resCode,StatusEnum.DELETE.status);
					if (existingFoodGroupItems != null && !existingFoodGroupItems.isEmpty()) {
						List<Long> existingFoodItemIds = existingFoodGroupItems.stream().map(efgi -> efgi.getFoodItem().getId()).collect(Collectors.toList());
						
						/*List<Long> newFoodItemIds = new ArrayList<>();*/
						Set<Long> deletedFoodItemIds = new HashSet<>();
						existingFoodItemIds.stream().forEach(fiId -> {
							if (!selectedfoodItemIds.contains(fiId)) {
								deletedFoodItemIds.add(fiId);
							}
						});
						/*selectedfoodItemIds.stream().forEach(fiId -> {
							if (!existingFoodItemIds.contains(fiId)) {
								newFoodItemIds.add(fiId);
							}
						});*/
						if (!deletedFoodItemIds.isEmpty()) {
							deletedFoodItemIds.stream().forEach(fiId -> {
								FoodItem foodItem = new FoodItem();
								foodItem.setId(fiId);
								foodGroupItemRepository.deleteByFoodGroupAndFoodItemAndRestaurantCode(foodGroup, foodItem, resCode);
							});
						}
						/*if (!newFoodItemIds.isEmpty()) {
							saveFoodGroupItems(newFoodItemIds,fGroupItemOrders, savedFoodGroup, resCode);
						}*/
						saveFoodGroupItems(selectedfoodItemIds, savedFoodGroup, resCode,deletedFoodItemIds);
					} else {
						saveFoodGroupItems(selectedfoodItemIds, savedFoodGroup, resCode,null);
					}
				} else {
					saveFoodGroupItems(selectedfoodItemIds, savedFoodGroup, resCode,null);
				}
			}else {
				foodGroupItemRepository.deleteByFoodGroupAndRestaurantCode(savedFoodGroup, resCode);
			}
			
			//save so category food group
			if (fg.getId() == null) {
				SoCategoryFoodGroup savedSoCategoryFoodGroup = new SoCategoryFoodGroup();
				savedSoCategoryFoodGroup.setSoCategory(savedSoCategory);
				savedSoCategoryFoodGroup.setFoodGroup(savedFoodGroup);
				savedSoCategoryFoodGroup.setGroupOrder(fg.getGroupOrder());
				savedSoCategoryFoodGroup.setRestaurantCode(resCode);
				if (foodGroup.getParent() != null && foodGroup.getParent().getId() != null) {
					savedSoCategoryFoodGroup.setFoodGroupParentId(foodGroup.getParent().getId());
				}
				soCategoryFoodGroupRepository.save(savedSoCategoryFoodGroup);
			
			} else {
				SoCategoryFoodGroup savedSoCategoryFoodGroup = soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupAndRestaurantCode(savedSoCategory, savedFoodGroup, resCode);
				savedSoCategoryFoodGroup.setGroupOrder(fg.getGroupOrder());
				soCategoryFoodGroupRepository.save(savedSoCategoryFoodGroup);
			}
		}
		// save attachment
		saveAttachment(attachments, attachmentPath, attachmentContextPath, ModuleTypeEnum.FOOD_GROUP.val, FunctionTypeEnum.AVATAR.val);
		return Optional.ofNullable(savedSoCategory).map(soCategoryMapper::entityToDto).orElse(null);
	}
	
	// save CoCategory type after save SoCategory
	private void offSoCategory(SoCategory soCategory, Boolean checkRes) {
		Integer type = soCategory.getType();
		Boolean status = soCategory.isStatus();
		List<CoCategory> coCategories = coCategoryRepository.findBySoCategory_Id(soCategory.getId());
		if(!CollectionUtils.isEmpty(coCategories)) {
			coCategories.stream().forEach(coCategory ->{
				// Set lại trạng thái ON nếu trạng thái SO_CATEGORY ON
				coCategory.setType(type);
				coCategory.setStatus(status);
				
				CoCategory category = coCategoryRepository.save(coCategory);
				Long coCategoryId = category.getId();
				List<Integer> resCodes = new ArrayList<>();
				if(checkRes) {
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(coCategoryId.toString(), category.getRestaurantCode(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
					RestaurantDataEdit restaurantDataEdit = restaurantDataEditRepository.findByValueAndRestaurantCodeAndType(coCategoryId.toString(), category.getRestaurantCode(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
					if(restaurantDataEdit == null) {
						restaurantDataEdit = new RestaurantDataEdit();
					} 
					restaurantDataEdit.setValue(coCategoryId.toString());
					restaurantDataEdit.setRestaurantCode(category.getRestaurantCode());
					restaurantDataEdit.setType(TypeRestaurantDataEditEnum.CO_CATEGORY.val);
					restaurantDataEditRepository.save(restaurantDataEdit);
				} else {
					Long coId = category.getCoId();
					List<CatalogApplyToRestaurant> catalogApplyToRestaurants = catalogApplyToRestaurantRepository.findByCoId(coId);
			    	resCodes = catalogApplyToRestaurants.stream().map(cc -> cc.getRestaurantCode()).collect(Collectors.toList());
			    	if(resCodes != null && !resCodes.isEmpty()) {
			    		resCodes.stream().forEach(rs -> {
			    			catalogDataEditRepository.deleteByCatalogIdAndTypeAndValue(coId, TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategoryId.toString());
							CatalogDataEdit catalogDataEdit = catalogDataEditRepository.findByCatalogIdAndTypeAndValue(coId, TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategoryId.toString());
							if(catalogDataEdit == null) {
								catalogDataEdit = new CatalogDataEdit();
							}
							catalogDataEdit.setValue(coCategoryId.toString());
							catalogDataEdit.setCatalogId(coId);
							catalogDataEdit.setType(TypeRestaurantDataEditEnum.CO_CATEGORY.val);
							catalogDataEditRepository.save(catalogDataEdit);
						});
			    	}
				}
			});
		}
	}
	
	// save CoCategory type after save SoCategory
	private void saveCoCategoryAfterSo(Long soCategoryId,Integer type, boolean checkRes) {
		List<CoCategory> categories = coCategoryRepository.findBySoCategory_Id(soCategoryId);
		if(categories != null && !categories.isEmpty()) {
			categories.stream().forEach(item ->{
				
				// Set lại trạng thái ON nếu trạng thái SO_CATEGORY ON
				item.setStatus(true);
				coCategoryRepository.save(item);
				
				if(item.getType() == null || !item.getType().equals(type)) {
					item.setType(type);
					item.setStatus(true);
					CoCategory category = coCategoryRepository.save(item);
					Long coCategoryId = category.getId();
					List<Integer> resCodes = new ArrayList<>();
					if(!checkRes) {
						Long coId = category.getCoId();
						List<CatalogApplyToRestaurant> catalogApplyToRestaurants = catalogApplyToRestaurantRepository.findByCoId(coId);
				    	resCodes = catalogApplyToRestaurants.stream().map(cc -> cc.getRestaurantCode()).collect(Collectors.toList());
				    	if(resCodes != null && !resCodes.isEmpty()) {
				    		resCodes.stream().forEach(rs -> {
				    			catalogDataEditRepository.deleteByCatalogIdAndTypeAndValue(coId, TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategoryId.toString());
								CatalogDataEdit catalogDataEdit = catalogDataEditRepository.findByCatalogIdAndTypeAndValue(coId, TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategoryId.toString());
								if(catalogDataEdit == null) {
									catalogDataEdit = new CatalogDataEdit();
								}
								catalogDataEdit.setValue(coCategoryId.toString());
								catalogDataEdit.setCatalogId(coId);
								catalogDataEdit.setType(TypeRestaurantDataEditEnum.CO_CATEGORY.val);
								catalogDataEditRepository.save(catalogDataEdit);
							});
				    	}
					} else {
						restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(coCategoryId.toString(), category.getRestaurantCode(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
						RestaurantDataEdit restaurantDataEdit = restaurantDataEditRepository.findByValueAndRestaurantCodeAndType(coCategoryId.toString(), category.getRestaurantCode(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
						if(restaurantDataEdit == null) {
							restaurantDataEdit = new RestaurantDataEdit();
						} 
    					restaurantDataEdit.setValue(coCategoryId.toString());
    					restaurantDataEdit.setRestaurantCode(category.getRestaurantCode());
    					restaurantDataEdit.setType(TypeRestaurantDataEditEnum.CO_CATEGORY.val);
    					restaurantDataEditRepository.save(restaurantDataEdit);
					}
				}
			});
		}
	}
	
	// save SoCategory by Catalog
	private SoCategoryDto saveBySO(final String username, final SoCategoryDto soCategoryDto,String attachmentPath,String attachmentContextPath) {
		log.info("Entering 'saveBySO(username, soCategoryDto)' method... ");
		
		List<AttachmentDto> attachments = new ArrayList<>();
		final Long soId = soCategoryDto.getSo().getId();
		SoCategory soCategory = Optional.ofNullable(soCategoryDto).map(soCategoryMapper::dtoToEntity).orElse(null);
		
		// save so-category
		SoCategory savedSoCategory = soCategoryRepository.save(soCategory);
		
    	List<CatalogApplyToRestaurant> catalogApplyToRestaurants = catalogApplyToRestaurantRepository.findBySoId(soId);
    	List<Integer> resCodes =  catalogApplyToRestaurants.stream().map(cc -> cc.getRestaurantCode()).collect(Collectors.toList());
		
    	// save CatalogDataEdit 
		if(resCodes != null && !resCodes.isEmpty()) {
			saveCatalogDataEdit(soId,savedSoCategory.getId().toString(),TypeRestaurantDataEditEnum.SO_CATEGORY.val);
		}
    	
    	if(soCategoryDto.isStatus()) {
    		saveCoCategoryAfterSo(savedSoCategory.getId(), savedSoCategory.getType(), false);
    	} else {
    		offSoCategory(savedSoCategory, false);
    	}
    	
		
		// get list of food groups for processing
		List<FoodGroupDto> reqFoodGroups = soCategoryDto.getFoodGroups();
		List<FoodGroupDto> processingFoodGroups = new ArrayList<>();
		List<FoodGroupDto> deletedGroupFoods = new ArrayList<>();
		List<String> delFoodGroupCodes = new ArrayList<>();
		
		// filter deleted food-group, updated food-group and new food-group for processing
		final Set<String> deletedFoodGroupIds = org.springframework.util.StringUtils.commaDelimitedListToSet(soCategoryDto.getDeletedFoodGroups());
		final Set<String> updatedFoodGroupIds = org.springframework.util.StringUtils.commaDelimitedListToSet(soCategoryDto.getUpdatedFoodGroups());
		
		if(reqFoodGroups != null && !reqFoodGroups.isEmpty()) {
			reqFoodGroups.forEach(fg -> {
				if (deletedFoodGroupIds.contains(String.valueOf(fg.getId()))) {
					deletedGroupFoods.add(fg);
				} else if (updatedFoodGroupIds.contains(String.valueOf(fg.getId())) || (fg.getId() == null && fg.isChecked())) {
					processingFoodGroups.add(fg);
				} else {
					// don't process with food-group that not be changed
				}
			});
		}
		
		// if there are some deleted food-group then delete them
		if (!deletedGroupFoods.isEmpty()) {
			deletedGroupFoods.stream().forEach(fg -> {
				FoodGroup deletedFoodGroup = foodGroupRepository.getOne(fg.getId());
				// delete so-category-food-groups and food-group-items that belong to deleted food-group
				foodGroupItemRepository.deleteByFoodGroupAndRestaurantCodeIsNull(deletedFoodGroup);
				delAttachment(fg.getId(), ModuleTypeEnum.FOOD_GROUP.val);
				delFoodGroupCodes.add(fg.getCode());
				if(resCodes != null && !resCodes.isEmpty()) {
					deletedFoodGroup.setChanged(StatusEnum.DELETE.status);
					foodGroupRepository.save(deletedFoodGroup);
				} else {
					soCategoryFoodGroupRepository.deleteByFoodGroupAndSoCategoryAndRestaurantCodeIsNull(deletedFoodGroup, savedSoCategory);
					foodGroupRepository.delete(deletedFoodGroup);
				}
			});
		}
		
		// delete co_foodGroup_display 
		if(delFoodGroupCodes != null && !delFoodGroupCodes.isEmpty()) {
			deleteDFGByCoCategory(savedSoCategory, null, delFoodGroupCodes);
		}
				
		// process food-group
		for (FoodGroupDto fg : processingFoodGroups) {
			FoodGroup foodGroup = Optional.ofNullable(fg).map(foodGroupMapper::dtoToEntity).orElse(null);
			if (fg.getId() != null) {
				foodGroup.setModifiedBy(username);
				FoodGroup existingFoodGroup = foodGroupRepository.getOne(fg.getId());
				if (existingFoodGroup != null) {
					foodGroup.setCreatedBy(existingFoodGroup.getCreatedBy());
					foodGroup.setCreatedDate(existingFoodGroup.getCreatedDate());
				}
			} else {
				foodGroup.setCreatedBy(username);
				foodGroup.setModifiedBy(username);
			}

			// save food-group
			if (foodGroup.getParent() != null && foodGroup.getParent().getId() == null) {
				foodGroup.setParent(null);
			}
			
			if(resCodes != null && !resCodes.isEmpty() && foodGroup.getChanged() != null && foodGroup.getChanged().equals(StatusEnum.ACTIVE.status)) {
				foodGroup.setChanged(StatusEnum.ACTIVE.status);
			} else {
				foodGroup.setChanged(StatusEnum.INACTIVE.status);
			}
			
			if(foodGroup.getNameVn() != null && !foodGroup.getNameVn().isEmpty()) {
				foodGroup.setUnsignedName(org.apache.commons.lang3.StringUtils.stripAccents(foodGroup.getNameVn()).toLowerCase());
			}
			FoodGroup savedFoodGroup = foodGroupRepository.save(foodGroup);
			if(savedFoodGroup != null && savedFoodGroup.getSrcImage() != null && !savedFoodGroup.getSrcImage().isEmpty()) {
				AttachmentDto attachment = new AttachmentDto();
				attachment.setModuleId(savedFoodGroup.getId());
				attachment.setRestaurantCode(savedFoodGroup.getRestaurantCode());
				attachment.setModuleCode(savedFoodGroup.getCode());
				attachment.setModuleId(savedFoodGroup.getId());
				attachment.setAbsolutePath(savedFoodGroup.getSrcImage());
				attachments.add(attachment);
				
			}
			// process food-item
			String selectedFoodItems = fg.getSelectedFoodItems();
			if (!StringUtils.isEmpty(selectedFoodItems)) {
				List<Long> selectedfoodItemIds = org.springframework.util.StringUtils.commaDelimitedListToSet(selectedFoodItems).stream().map(Long::valueOf).collect(Collectors.toList());
				if (fg.getId() != null) {
					// save food group item
					List<FoodGroupItem> existingFoodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCodeIsNull(savedFoodGroup);
					if (existingFoodGroupItems != null && !existingFoodGroupItems.isEmpty()) {
						List<Long> existingFoodItemIds = existingFoodGroupItems.stream().map(efgi -> efgi.getFoodItem().getId()).collect(Collectors.toList());
						/*List<Long> newFoodItemIds = new ArrayList<>();*/
						List<Long> deletedFoodItemIds = new ArrayList<>();
						existingFoodItemIds.stream().forEach(fiId -> {
							if (!selectedfoodItemIds.contains(fiId)) {
								deletedFoodItemIds.add(fiId);
							}
						});
						/*selectedfoodItemIds.stream().forEach(fiId -> {
							if (!existingFoodItemIds.contains(fiId)) {
								newFoodItemIds.add(fiId);
							}
						});*/
						
						if (!deletedFoodItemIds.isEmpty()) {
							/*removedFoodItemIds.addAll(deletedFoodItemIds);*/
							deletedFoodItemIds.stream().forEach(fiId -> {
								FoodItem foodItem = new FoodItem();
								foodItem.setId(fiId);
								foodGroupItemRepository.deleteByFoodGroupAndFoodItemAndRestaurantCodeIsNull(foodGroup, foodItem);
							});
						}
						/*if (!newFoodItemIds.isEmpty()) {
							saveFoodGroupItems(selectedfoodItemIds,fGroupItemOrders, savedFoodGroup, null);
						}*/ 
						saveFoodGroupItems(selectedfoodItemIds, savedFoodGroup, null,null);
					} else {
						saveFoodGroupItems(selectedfoodItemIds, savedFoodGroup, null,null);
					}
				} else {
					saveFoodGroupItems(selectedfoodItemIds, savedFoodGroup, null,null);
				}
			} else {
				foodGroupItemRepository.deleteByFoodGroupAndRestaurantCodeIsNull(savedFoodGroup);
			}
			
			//save so category food group
			if (fg.getId() == null) {
				SoCategoryFoodGroup savedSoCategoryFoodGroup = new SoCategoryFoodGroup();
				savedSoCategoryFoodGroup.setSoCategory(savedSoCategory);
				savedSoCategoryFoodGroup.setFoodGroup(savedFoodGroup);
				savedSoCategoryFoodGroup.setGroupOrder(fg.getGroupOrder());
				if (foodGroup.getParent() != null && foodGroup.getParent().getId() != null) {
					savedSoCategoryFoodGroup.setFoodGroupParentId(foodGroup.getParent().getId());
				}
				soCategoryFoodGroupRepository.save(savedSoCategoryFoodGroup);
			} else {
				SoCategoryFoodGroup savedSoCategoryFoodGroup = soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupAndRestaurantCodeIsNull(savedSoCategory, savedFoodGroup);
				savedSoCategoryFoodGroup.setGroupOrder(fg.getGroupOrder());
				soCategoryFoodGroupRepository.save(savedSoCategoryFoodGroup);
			}
		}
		
		// save attachment
		saveAttachment(attachments, attachmentPath, attachmentContextPath, ModuleTypeEnum.FOOD_GROUP.val, FunctionTypeEnum.AVATAR.val);
		return Optional.ofNullable(savedSoCategory).map(soCategoryMapper::entityToDto).orElse(null);
	}
	
	// add foodItem in foodGroups
	public Set<Long> saveFgItems(SoCategoryDto soCategory) {
		log.info("Entering 'saveFgItems(SoCategoryDto soCategory)' method...");
		String selectedFoodItems = soCategory.getSelectedFoodItems();
		String selectedKeyCodes = soCategory.getSelectedFoodGroupCodes();
		Set<Long> soIds = new HashSet<>();
		if (!StringUtils.isEmpty(selectedFoodItems) && !StringUtils.isEmpty(selectedKeyCodes)) {
			List<String> selectedfoodItemCodes = org.springframework.util.StringUtils.commaDelimitedListToSet(selectedFoodItems).stream().map(String::valueOf).collect(Collectors.toList());
			List<String> keyCodes = org.springframework.util.StringUtils.commaDelimitedListToSet(selectedKeyCodes).stream().filter(item -> !item.contains(SymbolEnum.UNDERSCORE.val)).collect(Collectors.toList());
			keyCodes.stream().forEach(keyCode ->{
				// form KeyCode : foodGroupCode-SoCategoryId-SoId
				String[] keyValue = keyCode.split(SymbolEnum.HYPHEN.val);
				String fgCode = keyValue[0];
				String soCategoryId = keyValue[1];
				Long soId = Long.parseLong(keyValue[2]);
				soIds.add(soId);
				FoodGroup foodGroup = foodGroupRepository.findByCodeAndRestaurantCodeIsNull(fgCode);
				if(foodGroup != null) {
					List<FoodGroupItem> foodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCodeIsNull(foodGroup);
					if(!foodGroupItems.isEmpty()) {
						List<String> fiCodeExisting = foodGroupItems.stream().map(item -> item.getFoodItem().getCode()).collect(Collectors.toList());
						for(int i = 0; i < selectedfoodItemCodes.size(); i++) {
							FoodItem foodItem = foodItemRepository.findByCode(selectedfoodItemCodes.get(i));
							if(foodItem != null && !fiCodeExisting.contains(foodItem.getCode())) {
								FoodGroupItem fGroupItem = new FoodGroupItem();
								fGroupItem.setFoodGroup(foodGroup);
								fGroupItem.setFoodItem(foodItem);
								foodGroupItems.add(fGroupItem);
							}
						}
						foodGroupItemRepository.deleteByFoodGroupAndRestaurantCodeIsNull(foodGroup);
						for(int i = 0; i < foodGroupItems.size(); i++) {
							FoodGroupItem fGroupItem = new FoodGroupItem();
							fGroupItem.setItemOrder(i + 1);
							fGroupItem.setFoodGroup(foodGroup);
							fGroupItem.setFoodItem(foodGroupItems.get(i).getFoodItem());
							foodGroupItemRepository.save(fGroupItem);
						}
					} else {
						for(int i = 0; i < selectedfoodItemCodes.size(); i++) {
							FoodItem foodItem = foodItemRepository.findByCode(selectedfoodItemCodes.get(i));
							if(foodItem != null) {
								FoodGroupItem fGroupItem = new FoodGroupItem();
								fGroupItem.setItemOrder(i + 1);
								fGroupItem.setFoodGroup(foodGroup);
								fGroupItem.setFoodItem(foodItem);
								foodGroupItemRepository.save(fGroupItem);
							}
						}
					}
					List<Integer> resCodes = new ArrayList<>();
					if(soId != null) {
				    	List<CatalogApplyToRestaurant> catalogApplyToRestaurants = catalogApplyToRestaurantRepository.findBySoId(soId);
				    	resCodes = catalogApplyToRestaurants.stream().map(cc -> cc.getRestaurantCode()).collect(Collectors.toList());
				    	if(resCodes != null && !resCodes.isEmpty()) {
				    		saveCatalogDataEdit(soId,soCategoryId,TypeRestaurantDataEditEnum.SO_CATEGORY.val);
				    		foodGroup.setChanged(StatusEnum.ACTIVE.status);
				    		foodGroupRepository.save(foodGroup);
						}
				    }
				}
			});
		}
		return soIds;
	}
	
	// delete foodItem in foodGroups
		public Set<Long> delFgItems(SoCategoryDto soCategory) {
			log.info("Entering 'delFgItems(SoCategoryDto soCategory)' method...");
			Set<Long> soIds = new HashSet<>();
			try {
				String selectedKeyCodes = soCategory.getSelectedFoodGroupCodes();
				List<String> keyCodes = org.springframework.util.StringUtils.commaDelimitedListToSet(selectedKeyCodes).stream().filter(item -> !item.contains(SymbolEnum.UNDERSCORE.val)).collect(Collectors.toList());
				keyCodes.stream().forEach(keyCode ->{
					// form KeyCode : foodGroupCode-SoCategoryId-SoId
					String[] keyValue = keyCode.split(SymbolEnum.HYPHEN.val);
					String fgCode = keyValue[0];
					String soCategoryId = keyValue[1];
					Long soId = Long.parseLong(keyValue[2]);
					String foodItemCode = keyValue[3];
					soIds.add(soId);
					FoodGroup foodGroup = foodGroupRepository.findByCodeAndRestaurantCodeIsNull(fgCode);
					FoodGroupItem foodGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItem_codeAndRestaurantCodeNull(foodGroup, foodItemCode);
					if(foodGroupItem != null) {
						foodGroupItemRepository.delete(foodGroupItem);
						List<Integer> resCodes = new ArrayList<>();
						if(soId != null) {
					    	List<CatalogApplyToRestaurant> catalogApplyToRestaurants = catalogApplyToRestaurantRepository.findBySoId(soId);
					    	resCodes = catalogApplyToRestaurants.stream().map(cc -> cc.getRestaurantCode()).collect(Collectors.toList());
					    	if(resCodes != null && !resCodes.isEmpty()) {
					    		saveCatalogDataEdit(soId,soCategoryId,TypeRestaurantDataEditEnum.SO_CATEGORY.val);
					    		foodGroup.setChanged(StatusEnum.ACTIVE.status);
					    		foodGroupRepository.save(foodGroup);
							}
					    }
					}
				});
			} catch (Exception e) {
				log.error("delete foodItem error : " + e.getMessage());
			}
			return soIds;
		}
	
	//save attachment
	private void saveAttachment(List<AttachmentDto> attachmentDtos, String attachmentPath, String contextPath,String moduleType, String functionType) {
		log.info("Entering 'saveAttachment(List<AttachmentDto> attachmentDtos, String attachmentPath, String contextPath,String moduleType, String functionType)' method...");
		contextPath = contextPath.substring(0, contextPath.length()-1);
		attachmentPath = attachmentPath.substring(0, attachmentPath.length()-1);
		if(attachmentDtos != null && !attachmentDtos.isEmpty()) {
			attachmentDtos.stream().forEach(att -> {
				List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleTypeAndFunctionType(att.getModuleId(), moduleType, functionType);
				if(attachments != null && !attachments.isEmpty()) {
					attachmentRepository.deleteAll(attachments);
				}
			});
			
			for(AttachmentDto att: attachmentDtos) {
				Attachment attachment = new Attachment();
				attachment.setModuleId(att.getModuleId());
				attachment.setModuleType(moduleType);
				attachment.setFunctionType(functionType);
				attachment.setUrl(contextPath + att.getAbsolutePath());
				attachment.setAbsolutePath(attachmentPath + att.getAbsolutePath());
				attachment.setFileType(org.apache.commons.lang3.StringUtils.substringAfterLast(att.getAbsolutePath(), SymbolEnum.DOT.val));
				attachment.setFileName(org.apache.commons.lang3.StringUtils.substringAfterLast(att.getAbsolutePath(), SymbolEnum.SLASH.val));
				attachmentRepository.save(attachment);
			}
		}
	}
	
	//save foodGroupItem
	private void saveFoodGroupItems(List<Long> selectedfoodItemIds,FoodGroup foodGroup, Integer resCode,Set<Long> delectedfoodItemIds) {
		for(Integer i = 0 ;i < selectedfoodItemIds.size(); i++) {
			FoodGroupItem foodGroupItem;
			FoodGroupItem fGroupItem = new FoodGroupItem();
			FoodItem foodItem = new FoodItem();
			foodItem.setId(selectedfoodItemIds.get(i));
			if (resCode != null) {
				foodGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeAndChanged(foodGroup, foodItem, resCode,null);
				FoodGroupItem foGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeAndChanged(foodGroup, foodItem, resCode, StatusEnum.ACTIVE.status);
				if(foodGroupItem != null) {
					fGroupItem = foodGroupItem;
				} else if(foGroupItem != null) {
					fGroupItem  = foGroupItem;
				}
				fGroupItem.setItemOrder(i + 1);
				fGroupItem.setFoodGroup(foodGroup);
				fGroupItem.setFoodItem(foodItem);
				fGroupItem.setRestaurantCode(resCode);	
				foodGroupItemRepository.save(fGroupItem);
			} else {
				foodGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeNull(foodGroup, foodItem);
				if(foodGroupItem != null) {
					fGroupItem = foodGroupItem;
				}
				fGroupItem.setItemOrder(i + 1);
				fGroupItem.setFoodGroup(foodGroup);
				fGroupItem.setFoodItem(foodItem);
				foodGroupItemRepository.save(fGroupItem);
			}
		}
		if(delectedfoodItemIds != null && !delectedfoodItemIds.isEmpty()) {
			delectedfoodItemIds.stream().forEach(fId ->{
				FoodGroupItem foodGroupItem;
				FoodGroupItem fGroupItem = new FoodGroupItem();
				FoodItem foodItem = new FoodItem();
				foodItem.setId(fId);
				if (resCode != null) {
					foodGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeAndChanged(foodGroup, foodItem, resCode,StatusEnum.DELETE.status);
					if(foodGroupItem != null) {
						fGroupItem = foodGroupItem;
					}
					fGroupItem.setFoodGroup(foodGroup);
					fGroupItem.setFoodItem(foodItem);
					fGroupItem.setChanged(StatusEnum.DELETE.status);
					fGroupItem.setRestaurantCode(resCode);	
					foodGroupItemRepository.save(fGroupItem);
				}
			});
		}
	}
	
	/*private FoodGroupItem findFoodGroupItem(FoodGroup foodGroup, FoodItem foodItem, Integer resCode,Integer changed) {
		FoodGroupItem foodGroupItem = new FoodGroupItem();
		if (resCode != null) {
			foodGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeAndChanged(foodGroup, foodItem, resCode,changed);
		} else {
			foodGroupItem = foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeNull(foodGroup, foodItem);
		}
		return foodGroupItem;
	}
	
	private boolean isExistingFoodGroupItem(FoodGroup foodGroup, FoodItem foodItem, Integer resCode) {
		boolean isExisting = false;
		if (resCode != null) {
			if (foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCode(foodGroup, foodItem, resCode) != null) {
				isExisting = true;
			}
		} else {
			if (foodGroupItemRepository.findByFoodGroupAndFoodItemAndRestaurantCodeNull(foodGroup, foodItem) != null) {
				isExisting = true;
			}
		}
		return isExisting;
	}*/
	
	
	public List<Long> deleleBySO(final Long soId, final Long scId) {
		log.debug("Entering 'deleleBySO(soId, scId)' method...");
		log.debug("soId: " + soId + ", scId: " + scId);
		
		SoCategory deletedSoCateogy = soCategoryRepository.getOne(scId);
		
		// find so-category-food-group belong to so-cateogory
		List<SoCategoryFoodGroup> deletedSoCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCodeIsNull(scId);
		
		Set<FoodGroup> deletedFoodGroup = new HashSet<>();
		// delete so-category-food-group
		deletedSoCategoryFoodGroups.stream().forEach(scfg -> {
			deletedFoodGroup.add(scfg.getFoodGroup());
			soCategoryFoodGroupRepository.delete(scfg);
		});
		
		
		Set<FoodItem> deletedFoodItems = new HashSet<>();
		// delete food-group-item and food-group
		deletedFoodGroup.stream().forEach(fg -> {
			List<FoodGroupItem> deletedFoodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCodeIsNull(fg);
			deletedFoodGroupItems.stream().forEach(fgi -> {
				deletedFoodItems.add(fgi.getFoodItem());
				foodGroupItemRepository.delete(fgi);
			});
			
			foodGroupRepository.delete(fg);
		});
		
		soCategoryRepository.delete(deletedSoCateogy);
		
		List<Long> removedCoFoodItemIds = new ArrayList<>();
		// remove co-food-item if food-group-item no longer
		if (!deletedFoodItems.isEmpty()) {
			deletedFoodItems.stream().forEach(fi -> {
				Long countFoodItem = foodGroupItemRepository.coutBySoIdAndFoodItemId(soId, fi.getId());
				if (countFoodItem <= 1) { //not has any more in so then remove in co automatically  coutBySoIdAndFoodItemId
					// remove from co-food-item
					List<CoFoodItem> removedCoFoodItems = coFoodItemRepository.findBySoIdAndFoodItemId(soId, fi.getId());
					if (removedCoFoodItems != null && !removedCoFoodItems.isEmpty()) {
						// remove from related-food-item
						relatedFoodItemRepository.deleteByCoFoodItemIn(removedCoFoodItems);
						toppingFoodItemRepository.deleteByCoFoodItemIn(removedCoFoodItems);
						coFoodItemModifierRepository.deleteByCoFoodItemIn(removedCoFoodItems);
						removedCoFoodItems.stream().forEach(cfi -> {
							removedCoFoodItemIds.add(cfi.getId());
							coFoodItemRepository.delete(cfi);
						});
					}
				}
			});
		}
		
		return removedCoFoodItemIds;
	}
	
	public List<Long> deleleByRestaurant(final Integer restaurantCode, final Long scId) {
		log.debug("Entering 'deleleByRestaurant(restaurantCode, scId)' method...");
		log.debug("soId: " + restaurantCode + ", scId: " + scId);
		
		SoCategory deletedSoCateogy = soCategoryRepository.getOne(scId);
		
		// find so-category-food-group belong to so-cateogory
		List<SoCategoryFoodGroup> deletedSoCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCode(scId, restaurantCode);
		
		Set<FoodGroup> deletedFoodGroup = new HashSet<>();
		// delete so-category-food-group
		deletedSoCategoryFoodGroups.stream().forEach(scfg -> {
			deletedFoodGroup.add(scfg.getFoodGroup());
			soCategoryFoodGroupRepository.delete(scfg);
		});
		
		
		Set<FoodItem> deletedFoodItems = new HashSet<>();
		// delete food-group-item and food-group
		deletedFoodGroup.stream().forEach(fg -> {
			List<FoodGroupItem> deletedFoodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCode(fg, restaurantCode);
			deletedFoodGroupItems.stream().forEach(fgi -> {
				deletedFoodItems.add(fgi.getFoodItem());
				foodGroupItemRepository.delete(fgi);
			});
			
			foodGroupRepository.delete(fg);
		});
		
		soCategoryRepository.delete(deletedSoCateogy);
		
		List<Long> removedCoFoodItemIds = new ArrayList<>();
		// remove co-food-item if food-group-item no longer
		if (!deletedFoodItems.isEmpty()) {
			deletedFoodItems.stream().forEach(fi -> {
				Long countFoodItem = foodGroupItemRepository.coutByResCodeAndFoodItemId(restaurantCode, fi.getId());
				if (countFoodItem <= 1) { //not has any more in so then remove in co automatically  coutBySoIdAndFoodItemId
					// remove from co-food-item
					List<CoFoodItem> removedCoFoodItems = coFoodItemRepository.findByResCodeAndFoodItemId(restaurantCode, fi.getId());
					if (removedCoFoodItems != null && !removedCoFoodItems.isEmpty()) {
						// remove from related-food-item
						relatedFoodItemRepository.deleteByCoFoodItemIn(removedCoFoodItems);
						toppingFoodItemRepository.deleteByCoFoodItemIn(removedCoFoodItems);
						coFoodItemModifierRepository.deleteByCoFoodItemIn(removedCoFoodItems);
						removedCoFoodItems.stream().forEach(cfi -> {
							removedCoFoodItemIds.add(cfi.getId());
							coFoodItemRepository.delete(cfi);
						});
					}
				}
			});
		}
		
		return removedCoFoodItemIds;
	}
	
	public void delSoCategory(Long scId) {
		log.info("Entering 'delSoCategory(Long scId)' method...");
		log.debug("Params: soCategoryId: " + scId);
		SoCategory deletedSoCateogy = soCategoryRepository.getOne(scId);
		List<SoCategoryFoodGroup> deletedSoCategoryFoodGroups;
		Integer resCode = deletedSoCateogy.getRestaurantCode();
		if(resCode != null) {
			deletedSoCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCode(scId, resCode);
		} else {
			deletedSoCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCodeIsNull(scId);
		}
		Set<FoodGroup> deletedFoodGroup = new HashSet<>();
		Set<FoodGroup> deletedFoodGroupHasParent = new HashSet<>();
		// delete so-category-food-group
		if(deletedSoCategoryFoodGroups != null && !deletedSoCategoryFoodGroups.isEmpty()) {
			deletedSoCategoryFoodGroups.stream().forEach(scfg -> {
				if(scfg.getFoodGroup().getParent() != null) {
					deletedFoodGroupHasParent.add(scfg.getFoodGroup());
				} else {
					deletedFoodGroup.add(scfg.getFoodGroup());
				}
				soCategoryFoodGroupRepository.delete(scfg);
			});
		}
		// delete food-group-item and food-group
		if(!deletedFoodGroupHasParent.isEmpty()) {
			deletedFoodGroupHasParent.stream().forEach(fg -> {
				if(resCode != null) {
					foodGroupItemRepository.deleteByFoodGroupAndRestaurantCode(fg, resCode);
				} else {
					foodGroupItemRepository.deleteByFoodGroupAndRestaurantCodeIsNull(fg);
				}
				delAttachment(fg.getId(), ModuleTypeEnum.FOOD_GROUP.val);
				foodGroupRepository.delete(fg);
			});
		}
		// delete food-group-item and food-group
		if(!deletedFoodGroup.isEmpty()) {
			deletedFoodGroup.stream().forEach(fg -> {
				if(resCode != null) {
					foodGroupItemRepository.deleteByFoodGroupAndRestaurantCode(fg, resCode);
				} else {
					foodGroupItemRepository.deleteByFoodGroupAndRestaurantCodeIsNull(fg);
				}
				delAttachment(fg.getId(), ModuleTypeEnum.FOOD_GROUP.val);
				foodGroupRepository.delete(fg);
			});
		}
		soCategoryRepository.delete(deletedSoCateogy);
	}
	
	private void deleteCoCategory(CoCategory coCategory) {
		log.debug("Entering 'deleteCoCategory(CoCategory coCategory)' method...");
		coFoodGroupDisplayRepository.deleteByCoCategory(coCategory);
		coCategoryRepository.delete(coCategory);
	}
	
	private void saveRestaurantDataEdit(Integer resCode, String type, String value) {
		log.info("Entering 'saveRestaurantDataEdit(Integer resCode, String type, Long itemId)' method...");
		log.debug("Params: resCode: " + resCode + ", type: " + type + ", value: " + value);
		restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(value, resCode, type);
		RestaurantDataEdit restaurantDataEdit = restaurantDataEditRepository.findByValueAndRestaurantCodeAndType(value, resCode, type);
		if(restaurantDataEdit == null) {
			restaurantDataEdit = new RestaurantDataEdit();
		}
		restaurantDataEdit.setValue(value);
		restaurantDataEdit.setRestaurantCode(resCode);
		restaurantDataEdit.setType(type);
		restaurantDataEditRepository.save(restaurantDataEdit);
	}
	
	private void delAttachment(Long moduleId,String moduleType) {
		log.info("Entering 'delAttachment(Long moduleId,String moduleType)' method...");
		log.debug("Params: moduleId: " + moduleId + ", moduleType: " + moduleType);
		List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleType(moduleId, moduleType);
		if(attachments != null && !attachments.isEmpty()) {
			attachments.stream().forEach(attachment ->{
				if(attachment.getAbsolutePath() != null) {
					Long countAbsolutePath = attachmentRepository.countByAbsolutePath(attachment.getAbsolutePath());
					if(countAbsolutePath.equals(CountAbsolutePathEnum.ONE.val)) {
						try {
							Files.deleteIfExists(Paths.get(attachment.getAbsolutePath()));
							attachmentRepository.delete(attachment);
						} catch (IOException e) {
							log.error(e.getMessage());
						}
					}else {
						attachmentRepository.delete(attachment);
					}
				}
			});
		}
	}
	
	public void deleleSoCategory(SoCategoryDto soCategoryDto) {
		log.info("Entering 'deleleSoCategory(SoCategoryDto soCategoryDto)' method...");
		log.debug("Params: soCategoryId: " + soCategoryDto.getId());
		SoCategory soCategory = Optional.ofNullable(soCategoryDto).map(soCategoryMapper::dtoToEntity).orElse(null);
		Integer resCode = soCategory.getRestaurantCode();
		Long soCategoryId = soCategory.getId();
		String orderCategoryCode = soCategory.getOrderCategory().getCode();
		if(resCode != null) {
			CoCategory coCategory = coCategoryRepository.findBySoCategoryAndRestaurantCode(soCategory, soCategory.getRestaurantCode());
			if(coCategory != null) {
				coFoodGroupDisplayRepository.deleteByCoCategory(coCategory);
				delAttachment(coCategory.getId(), ModuleTypeEnum.CO_CATEGORY.val);
				coCategoryRepository.delete(coCategory);
				saveRestaurantDataEdit(resCode, TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_RES.val, orderCategoryCode);
			}
			delSoCategory(soCategoryId);
			saveRestaurantDataEdit(resCode, TypeRestaurantDataEditEnum.DELETE_SO_CATEGORY_RES.val, orderCategoryCode);
		} else {
			Long soId = soCategory.getSo().getId();
			saveCatalogDataEdit(soId, orderCategoryCode, TypeRestaurantDataEditEnum.DELETE_SO_CATEGORY.val);
			
			List<CoCategory> categories = coCategoryRepository.findBySoCategoryAndRestaurantCodeIsNull(soCategory);
			if(categories != null && !categories.isEmpty()) {
				categories.stream().forEach(coCategory ->{
					coFoodGroupDisplayRepository.deleteByCoCategory(coCategory);
					delAttachment(coCategory.getId(), ModuleTypeEnum.CO_CATEGORY.val);
					coCategoryRepository.delete(coCategory);
					saveCatalogDataEdit(coCategory.getCoId(), orderCategoryCode, TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
				});
			}
			delSoCategory(soCategoryId);
			saveCatalogDataEdit(soId, orderCategoryCode, TypeRestaurantDataEditEnum.DELETE_SO_CATEGORY.val);
		}
	}
	
	private void saveCatalogDataEdit(Long catalogId, String value, String type) {
		log.info("Entering 'saveCatalogDataEdit(Long catalogId, Long itemId, Integer resCode, String type)' method...");
		log.debug("Params: catalogId: " + catalogId + ", value: " + value + ", type: " + type);
		catalogDataEditRepository.deleteByCatalogIdAndTypeAndValue(catalogId, type, value);
		CatalogDataEdit catalogDataEdit = catalogDataEditRepository.findByCatalogIdAndTypeAndValue(catalogId, type, value);
		if(catalogDataEdit == null) {
			catalogDataEdit = new CatalogDataEdit();
		}
		catalogDataEdit.setValue(value);
		catalogDataEdit.setCatalogId(catalogId);
		catalogDataEdit.setType(type);
		catalogDataEditRepository.save(catalogDataEdit);
	}
	
	public Page<SoCategoryDto> gets(SoCategoryDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Page<SoCategory> page = soCategoryRepository.findAll(soCategorySpecification.filter(criteria), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public Page<SoCategoryDto> getMenuChanged(SoCategoryDto criteria){
		log.debug("Entering 'getMenuChanged(criteria)' method...");
		Page<SoCategory> page = soCategoryRepository.findByRestaurantCodeAndSoIsNull(criteria.getRestaurantCode(),PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public List<MenuFoodGroup> getMenuFoodGroups(Long soCategoryId, Integer restaurantCode) {
		log.debug("PROCESS FUNCTION: GETS MENU_FOOD_GROUP, SO_CATEGORY_ID: {}, RESTAURANT_CODE: {}", soCategoryId, restaurantCode);
		List<MenuFoodGroup> menuFoodGroups = new ArrayList<>();
		List<SoCategoryFoodGroup> soCategoryFoodGroups = null;
		if (restaurantCode != null) {
			soCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCode(soCategoryId, restaurantCode);
		} else {
			soCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCodeIsNull(soCategoryId);
		}
		if (soCategoryFoodGroups != null && !soCategoryFoodGroups.isEmpty()) {
			soCategoryFoodGroups.stream().forEach(scfg -> {
				if((scfg.getFoodGroup().getChanged() != null && !scfg.getFoodGroup().getChanged().equals(StatusEnum.DELETE.status)) || scfg.getFoodGroup().getChanged() == null) {
					MenuFoodGroup menuFoodGroup = new MenuFoodGroup();
					menuFoodGroup.setFoodGroupCode(scfg.getFoodGroup().getCode());
					menuFoodGroup.setFoodGroupId(scfg.getFoodGroup().getId());
					menuFoodGroup.setFoodGroupName(scfg.getFoodGroup().getNameVn());
					menuFoodGroup.setFoodGroupOrder(scfg.getGroupOrder());
					menuFoodGroup.setFoodGroupNameEn(scfg.getFoodGroup().getNameEn());
					menuFoodGroup.setFoodGroupLevel(scfg.getFoodGroup().getLevel());
					menuFoodGroup.setSrcImage(scfg.getFoodGroup().getSrcImage());
					if(scfg.getFoodGroup().getLevel() != null) {
						if(scfg.getFoodGroup().getLevel().equals(FoodGroupLevelEnum.MENU_NORMAL.val)) {
							menuFoodGroup.setFoodGroupLevelName(FoodGroupLevelNameEnum.MENU_NORMAL.val);
						}else {
							menuFoodGroup.setFoodGroupLevelName(FoodGroupLevelNameEnum.MENU_DRINK.val);
						}
					}
					if (scfg.getFoodGroup().getParent() != null) {
						menuFoodGroup.setFoodGroupParentId(scfg.getFoodGroup().getParent().getId());
						menuFoodGroup.setFoodGroupParentName(scfg.getFoodGroup().getParent().getNameVn());
						menuFoodGroup.setEnableDeleted(true);
					} else {
						List<FoodGroup> fGroups = foodGroupRepository.findByParent(scfg.getFoodGroup());
						if(fGroups != null && !fGroups.isEmpty()) {
							menuFoodGroup.setEnableDeleted(false);
						} else {
							menuFoodGroup.setEnableDeleted(true);
						}
					}
					menuFoodGroup.setMenuTypeId(scfg.getFoodGroup().getMenuType().getId());
					menuFoodGroup.setMenuTypeName(scfg.getFoodGroup().getMenuType().getName());
					menuFoodGroup.setChanged(scfg.getFoodGroup().getChanged());
					List<FoodGroupItem> foodGroupItems = null;
					
					if (restaurantCode != null) {
						foodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCodeOrderByItemOrderAsc(scfg.getFoodGroup(), restaurantCode);
					} else {
						foodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCodeIsNullOrderByItemOrderAsc(scfg.getFoodGroup());
					}
					if (foodGroupItems != null && !foodGroupItems.isEmpty()) {
						StringBuilder stringBuilder = new StringBuilder();
						foodGroupItems.stream().forEach(fgi -> {
							stringBuilder.append(fgi.getFoodItem().getId()).append(SymbolEnum.COMMA.val);
						});
						String selectedFoodItems = stringBuilder.toString();
						selectedFoodItems = selectedFoodItems.substring(0, selectedFoodItems.length() - 1);
						menuFoodGroup.setSelectedFoodItems(selectedFoodItems);
					}
					menuFoodGroups.add(menuFoodGroup);
				}
			});
		}
		
		return menuFoodGroups.stream().sorted(Comparator.comparing(MenuFoodGroup::getFoodGroupCode)).collect(Collectors.toList());
	}
	
	public FancyTree getJsonFoodGroupItems(Long soCategoryId, Integer restaurantCode) {
		log.info("entering 'getJsonFoodGroupItems' method...");
		log.debug("soCategoryId: " + soCategoryId + ", restaurantCode: " + restaurantCode);
		
		FancyTree root = new FancyTree();
		List<SoCategoryFoodGroup> soCategoryFoodGroups = null;
		if (restaurantCode != null) {
			soCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCode(soCategoryId, restaurantCode);
		} else {
			soCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCodeIsNull(soCategoryId);
		}
		if (soCategoryFoodGroups != null && !soCategoryFoodGroups.isEmpty()) {
			List<FancyTree> foodGroups = new ArrayList<>();
			soCategoryFoodGroups.stream().forEach(scfg -> {
				FoodGroup fg = scfg.getFoodGroup();
				Long foodGroupId = fg.getId();
				String foodGroupName = fg.getNameVn();
		
				List<FoodGroupItem> foodGroupItems = null;
				if (restaurantCode != null) {
					foodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCode(fg, restaurantCode);
				} else {
					foodGroupItems = foodGroupItemRepository.findByFoodGroupAndRestaurantCodeIsNull(fg);			
				}
				
				FancyTree foodGroup = new FancyTree();
				foodGroup.setKey(foodGroupId.toString());
				foodGroup.setTitle(foodGroupName);
				
				if (foodGroupItems != null && !foodGroupItems.isEmpty()) {
					List<FancyTree> foodItems = new ArrayList<>();
					foodGroupItems.stream().forEach(fgi -> {
						FancyTree foodItem = new FancyTree();
						foodItem.setKey(fgi.getFoodItem().getId().toString());
						foodItem.setTitle(fgi.getFoodItem().getName());
						foodItems.add(foodItem);
					});
					foodGroup.setChildren(foodItems);
				}
				foodGroups.add(foodGroup);
			});
			root.setChildren(foodGroups);
		}
		
		return root;
	}

	public List<MenuFoodGroup> gets(String foodGroupCode) {
		List<MenuFoodGroup> menuFoodGroups = new ArrayList<>();
		List<FoodGroup> foodGroups = foodGroupRepository.findByCodeStartingWith(foodGroupCode);
		if (foodGroups != null && !foodGroups.isEmpty()) {
			foodGroups.stream().forEach(fg -> {
				MenuFoodGroup menuFoodGroup = new MenuFoodGroup();
				menuFoodGroup.setFoodGroupCode(fg.getCode());
				menuFoodGroup.setFoodGroupId(fg.getId());
				menuFoodGroup.setFoodGroupName(fg.getNameVn());
				menuFoodGroups.add(menuFoodGroup);
			});
		}
		
		return menuFoodGroups;
	}


	public MenuFoodGroup getMenuFoodGroup(Long soCategoryId, String foodGroupCode, Integer restaurantCode) {
		log.debug("entering 'getMenuFoodGroup' method...");
		
		MenuFoodGroup menuFoodGroup = new MenuFoodGroup();
		FoodGroup foodGroup = null;
		SoCategoryFoodGroup soCategoryFoodGroup = new SoCategoryFoodGroup();
		List<MenuType> menuTypes = menuTypeRepository.findAll();
		List<Long>  arrValues = menuTypes.stream().map(fg -> fg.getId()).collect(Collectors.toList());
		List<String>  arrTexts = menuTypes.stream().map(fg -> fg.getName()).collect(Collectors.toList());
		if (restaurantCode != null) {
			foodGroup = foodGroupRepository.findByCodeAndRestaurantCode(foodGroupCode, restaurantCode);
			soCategoryFoodGroup = soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupCodeAndResCode(soCategoryId, foodGroupCode,restaurantCode);
		} else {
			foodGroup = foodGroupRepository.findByCodeAndRestaurantCodeIsNull(foodGroupCode);
			soCategoryFoodGroup = soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupCode(soCategoryId, foodGroupCode);
		}
		if (foodGroup != null && soCategoryFoodGroup != null) {
			menuFoodGroup.setFoodGroupCode(foodGroup.getCode());
			menuFoodGroup.setFoodGroupId(foodGroup.getId());
			menuFoodGroup.setFoodGroupName(foodGroup.getNameVn());
			menuFoodGroup.setMenuTypeId(foodGroup.getMenuType().getId());
			menuFoodGroup.setMenuTypeName(foodGroup.getMenuType().getName());
			menuFoodGroup.setFoodGroupNameEn(foodGroup.getNameEn());
			menuFoodGroup.setFoodGroupLevel(foodGroup.getLevel());
			menuFoodGroup.setFoodGroupOrder(soCategoryFoodGroup.getGroupOrder());
			menuFoodGroup.setArrTexts(arrTexts);
			menuFoodGroup.setArrValues(arrValues);
			menuFoodGroup.setSrcImage(foodGroup.getSrcImage());
			
//			if (scfg.getGroupOrder() != null) {
//				menuFoodGroup.setFoodGroupOrder(scfg.getGroupOrder());	
//			}
//			if (scfg.getFoodGroupParentId() != null) {
//				FoodGroup foodGroupParent = foodGroupRepository.findById(scfg.getFoodGroupParentId()).get();
//				menuFoodGroup.setFoodGroupParentId(foodGroupParent.getId());
//				menuFoodGroup.setFoodGroupParentName(foodGroupParent.getNameVn());
//			}
		}
		
		System.out.println("-------------> " + menuFoodGroup);
		
		return menuFoodGroup;
	}
	
	public List<Integer> getAppliedRestaurantCodes(Long soId) {
		log.debug("entering 'getAppliedRestaurantCodes' method...");
		
		return soCategoryRepository.findRestaurantCodes(soId);
	}
	
	public List<SoCategoryDto> getByResCode(Integer resCode) {
		return soCategoryRepository.findByRestaurantCode(resCode).stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<SoCategoryDto> getBySoId(Long soId) {
		return soCategoryRepository.findBySoId(soId).stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList());
	}
	
	public SoCategoryDto getByFoodGroupCodeAndResCodeIsNull(String code) {
		return Optional.ofNullable(soCategoryRepository.findByFoodGroupCodeAndResCodeIsNull(code)).map(soCategoryMapper::entityToDto).orElse(null);
	}
	
	public void deleteDFGByCoCategory(SoCategory soCategory,Integer resCode,List<String> foodGroupCodes) {
		log.info("Entering 'deleteDFGByCoCategory(SoCategory soCategory,Integer resCode,List<String> foodGroupCodes)' method...");
		if(resCode != null) {
			CoCategory coCategory = coCategoryRepository.findBySoCategoryAndRestaurantCode(soCategory, resCode);
			if(coCategory != null) {
				List<CoFoodGroupDisplay> coFoodGroupDisplays = coFoodGroupDisplayRepository.findByCoCategoryAndFoodGroupCodeIn(coCategory, foodGroupCodes);
				if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
					coFoodGroupDisplays.stream().forEach(item ->{
						coFoodGroupDisplayRepository.delete(item);
					});
					saveRestaurantDataEdit(resCode, TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategory.getId().toString());
				}
			}
			
		} else {
			Long soId = soCategory.getSo().getId();
			List<Co> cos = coRepository.findBySoId(soId);
			if(cos != null && !cos.isEmpty()) {
				cos.stream().forEach(item ->{
					Long coId = item.getId();
					CoCategory coCategory = coCategoryRepository.findBySoCategoryAndCoId(soCategory, coId);
					if(coCategory != null) {
						List<CoFoodGroupDisplay> coFoodGroupDisplays = coFoodGroupDisplayRepository.findByCoCategoryAndFoodGroupCodeIn(coCategory, foodGroupCodes);
						if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
							coFoodGroupDisplays.stream().forEach(r ->{
								coFoodGroupDisplayRepository.delete(r);
							});
							saveCatalogDataEdit(coId,  coCategory.getId().toString(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
						}
					}
				});
			}
		}
	}
	
	/*
	 * lấy dữ liệu SO theo SO_ID hoặc RESTAURANT_CODE để export
	 */
	public List<IOSoDto> getIOSoDtosBysoIdOrResCode(Long soId, Integer resCode) {
		log.debug("PROCESS: GET IO_SO_DTO BY SO_ID OR RESTAURANT_CODE, SO_ID: {}, RESTAURANT_CODE: {}",soId , resCode);
		List<IOSoDto> ioSoDtos = new ArrayList<>();
		List<SoCategoryDto> soCategoryExistingDtos = new ArrayList<>();
		// trường hợp SO_ID khác null thì export SO của danh mục
		if(soId != null) {
			soCategoryExistingDtos.addAll(soCategoryRepository.findBySoId(soId).stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList()));
		}
		// trường hợp RESTAURANT_CODE khác null thì export SO của nhà hàng
		if(resCode != null) {
			soCategoryExistingDtos.addAll(soCategoryRepository.findByRestaurantCode(resCode).stream().map(soCategoryMapper::entityToDto).collect(Collectors.toList()));
		}
		if(!CollectionUtils.isEmpty(soCategoryExistingDtos)) {
			soCategoryExistingDtos.stream().forEach(soCategoryExistingDto -> {
				OrderCategoryDto orderCategoryDto = soCategoryExistingDto.getOrderCategory();
				String orderCategoryCode = orderCategoryDto.getCode();
				String orderCategoryName = orderCategoryDto.getName();
				List<SoCategoryFoodGroupDto> soCategoryFoodGroupDtos = soCategoryExistingDto.getSoCategoryFoodGroups();
				if(!CollectionUtils.isEmpty(soCategoryFoodGroupDtos)) {
					soCategoryFoodGroupDtos.stream().forEach(scfg -> {
						FoodGroupDto foodGroupDto = Optional.ofNullable(foodGroupRepository.findBySoCategoryFoodGroupId(scfg.getId())).map(foodGroupMapper::entityToDto).orElse(null);
						List<FoodGroupItemDto> foodGroupItemDtos = foodGroupItemRepository.findByFoodGroupId(foodGroupDto.getId()).stream().map(foodGroupItemMapper::entityToDto).collect(Collectors.toList());
						if(!CollectionUtils.isEmpty(foodGroupItemDtos)) {
							foodGroupItemDtos.stream().forEach(fgi -> {
								IOSoDto ioSoDto = new IOSoDto();
								ioSoDto.setOrderCategoryCode(orderCategoryCode);
								ioSoDto.setOrderCategoryName(orderCategoryName);
								FoodItemDto foodItemDto = fgi.getFoodItem();
								if(foodGroupDto.getParent() != null) {
									FoodGroupDto foodGroupParentDto = foodGroupDto.getParent();
									//set nhóm chính
									if(foodGroupParentDto.getCode() != null) {
										ioSoDto.setFoodGroupParentCode(foodGroupParentDto.getCode());
									}
									if(foodGroupParentDto.getNameVn() != null) {
										ioSoDto.setFoodGroupParentNameVn(foodGroupParentDto.getNameVn());
									}
									if(foodGroupParentDto.getNameEn() != null) {
										ioSoDto.setFoodGroupParentNameEn(foodGroupParentDto.getNameEn());
									}
									if(foodGroupParentDto.getType() != null) {
										ioSoDto.setFoodGroupParentType(foodGroupParentDto.getType());
									}
									if(foodGroupDto.getLevel() != null) {
										ioSoDto.setFoodGroupParentLevel((double)foodGroupDto.getLevel());
									}
									
									//set nhóm con
									if(foodGroupDto.getCode() != null) {
										ioSoDto.setFoodGroupCode(foodGroupDto.getCode());
									}
									if(foodGroupDto.getNameVn() != null) {
										ioSoDto.setFoodGroupNameVn(foodGroupDto.getNameVn());
									}
									if(foodGroupDto.getNameEn() != null) {
										ioSoDto.setFoodGroupNameEn(foodGroupDto.getNameEn());
									}
									if(foodGroupDto.getType() != null) {
										ioSoDto.setFoodGroupType(foodGroupDto.getType());
									}
								}else {
									if(foodGroupDto.getCode() != null) {
										ioSoDto.setFoodGroupParentCode(foodGroupDto.getCode());
									}
									if(foodGroupDto.getNameVn() != null) {
										ioSoDto.setFoodGroupParentNameVn(foodGroupDto.getNameVn());
									}
									if(foodGroupDto.getNameEn() != null) {
										ioSoDto.setFoodGroupParentNameEn(foodGroupDto.getNameEn());
									}
									if(foodGroupDto.getType() != null) {
										ioSoDto.setFoodGroupParentType(foodGroupDto.getType());
									}
									if(foodGroupDto.getLevel() != null) {
										ioSoDto.setFoodGroupParentLevel((double)foodGroupDto.getLevel());
									}
								}
								if(scfg.getGroupOrder() != null) {
									ioSoDto.setGroupOrder((double) scfg.getGroupOrder());
								}
								if(StringUtils.isNotBlank(foodGroupDto.getSrcImage())) {
									ioSoDto.setSrcImg(new StringBuilder("/resources").append(foodGroupDto.getSrcImage()).toString());
								}
								if(foodGroupDto.getMenuType().getCode() != null) {
									ioSoDto.setMenuTypeCode((double) foodGroupDto.getMenuType().getCode());
								}
								if(foodItemDto.getCode() != null) {
									ioSoDto.setFoodItemCode(foodItemDto.getCode());
								}
								if(foodItemDto.getName() != null) {
									ioSoDto.setFoodItemNameVn(foodItemDto.getName());
								}
								if(fgi.getItemOrder() != null) {
									ioSoDto.setItemOrder((double) fgi.getItemOrder());
								}
								if(foodItemDto.getSapCode() != null) {
									ioSoDto.setSapCode(foodItemDto.getSapCode());
								}
								ioSoDto.setStatus(true);
								ioSoDtos.add(ioSoDto);
							});
						}
					});
				}
			});
		}
		return ioSoDtos;
	}
	
	public List<IOSoDto> importSoMenu(List<IOSoDto> ioSoDtos, Long soId, String attachmentPath) {
		log.debug("PROCESS: IMPORT SO_MENU, IO_SO_DTO: {}, SO_ID: {}", ioSoDtos, soId);
		List<IOSoDto> ioSoErrs = new ArrayList<>();
		// Khai báo một số biến thường dùng
		String moduleTypeImage = ModuleTypeEnum.FOOD_GROUP.val;
		String avatarFunctionType = FunctionTypeEnum.AVATAR.val;
		String catalogDataEditType = TypeRestaurantDataEditEnum.SO_CATEGORY.val;
		// Value của attachmentPath = /opt/gpos/resources/ nhưng do url import từ file excel đã có resources nên chỉ lấy attachmentPath = /opt/gpos/
		String splitAttachmentPath = attachmentPath.substring(0, attachmentPath.length()-11); 
		// Lấy danh sách nhà hàng đang được áp dụng danh mục CO này
		List<Integer> restaurantCodeApplies = catalogApplyToRestaurantRepository.findBySoId(soId).stream().map(item -> item.getRestaurantCode()).collect(Collectors.toList());		
		// Lấy thông tin danh mục SO
		SoDto soExistingDto = soRepository.findById(soId).map(soMapper::entityToDto).orElse(null);
		List<Long> newSoCategoryIds = new ArrayList<>();
		if(!CollectionUtils.isEmpty(ioSoDtos) && soExistingDto != null) {
			ioSoDtos.stream().forEach(ioSoDto -> {
				if(StringUtils.isNotBlank(ioSoDto.getError())) {
					ioSoDto.setStatus(false);
					ioSoErrs.add(ioSoDto);
	    		} else {
	    			try {
	    				// Kiểm tra nếu OrderCategoryCode không có giá trị thì mặc định bản ghi không thể import được
						if(StringUtils.isBlank(ioSoDto.getOrderCategoryCode())) {
							ioSoDto.setStatus(false);
		    				ioSoDto.setError("OrderCategoryCode is null");
							ioSoErrs.add(ioSoDto);
						} else {
							String orderCategoryCode = ioSoDto.getOrderCategoryCode();
							OrderCategoryDto orderCategory = Optional.ofNullable(orderCategoryRepository.findByCode(orderCategoryCode)).map(orderCategoryMapper::entityToDto).orElse(null);
							// Kiểm tra nếu OrderCategory không tồn tại với OrderCategoryCode thì mặc định bản ghi không thể import được
							if(orderCategory == null) {
								ioSoDto.setStatus(false);
			    				ioSoDto.setError(new StringBuilder("OrderCategory is not existing with code ").append(orderCategoryCode).toString());
								ioSoErrs.add(ioSoDto);
							} else {
								// Tìm kiếm xem với mã OrderCategory thì đã được tạo ở SO_CATEGORY chưa nếu chưa thì tạo mới
								SoCategoryDto soCategoryExistingDto =  Optional.ofNullable(soCategoryRepository.findBySoIdAndOrderCategoryCode(soId,orderCategoryCode)).map(soCategoryMapper::entityToDto).orElse(null);
								if(soCategoryExistingDto == null) {
									soCategoryExistingDto = new SoCategoryDto();
								}
								soCategoryExistingDto.setSo(soExistingDto);
								soCategoryExistingDto.setOrderCategory(orderCategory);
								soCategoryExistingDto.setStatus(true);
								SoCategory soCategory = Optional.ofNullable(soCategoryExistingDto).map(soCategoryMapper::dtoToEntity).orElse(null);
								SoCategoryDto soCategorySavedDto = Optional.ofNullable(soCategoryRepository.save(soCategory)).map(soCategoryMapper::entityToDto).orElse(null);
								SoCategory soCategorySaved = Optional.ofNullable(soCategorySavedDto).map(soCategoryMapper::dtoToEntity).orElse(null);
		        	    		newSoCategoryIds.add(soCategorySaved.getId());
								
								// Lưu thông tin Menu-Type
								MenuTypeDto menuTypeSavedDto = null;
								if (ioSoDto.getMenuTypeCode() != null) {
									Integer menuTypeCode = Integer.valueOf(ioSoDto.getMenuTypeCode().intValue());
									menuTypeSavedDto = Optional.ofNullable(menuTypeRepository.findByCode(menuTypeCode)).map(menuTypeMapper::entityToDto).orElse(null);;
									if (menuTypeSavedDto == null) {
										MenuType newMenuType = new MenuType();
										newMenuType.setCode(menuTypeCode);
										menuTypeSavedDto = Optional.ofNullable(menuTypeRepository.save(newMenuType)).map(menuTypeMapper::entityToDto).orElse(null);;
									}
								}
								
								FoodGroupDto foodGroup = null;
								if (StringUtils.isEmpty(ioSoDto.getFoodGroupParentCode())) {
										foodGroup = saveFoodGroupAndSoCategoryFoodGroup(soCategorySaved, menuTypeSavedDto, ioSoDto.getFoodGroupCode(), ioSoDto.getFoodGroupNameEn(), ioSoDto.getFoodGroupNameVn(), ioSoDto.getFoodGroupType(), ioSoDto.getGroupOrder(),ioSoDto.getSrcImg(), null,null);
								} else {
									FoodGroupDto foodGroupParent = saveFoodGroupAndSoCategoryFoodGroup(soCategorySaved, menuTypeSavedDto, ioSoDto.getFoodGroupParentCode(), ioSoDto.getFoodGroupParentNameEn(), ioSoDto.getFoodGroupParentNameVn(), ioSoDto.getFoodGroupParentType(), ioSoDto.getGroupOrder(),ioSoDto.getSrcImg(), null,ioSoDto.getFoodGroupParentLevel());
									if (StringUtils.isEmpty(ioSoDto.getFoodGroupCode())) {
										foodGroup = foodGroupParent;
									} else if(foodGroupParent.getCode() != null && ioSoDto.getFoodGroupCode() != null && !foodGroupParent.getCode().equals(ioSoDto.getFoodGroupCode())){
										foodGroup = saveFoodGroupAndSoCategoryFoodGroup(soCategorySaved, menuTypeSavedDto, ioSoDto.getFoodGroupCode(), ioSoDto.getFoodGroupNameEn(), ioSoDto.getFoodGroupNameVn(), ioSoDto.getFoodGroupType(), ioSoDto.getGroupOrder(),ioSoDto.getSrcImg(), foodGroupParent,ioSoDto.getFoodGroupParentLevel());	
									} else {
										foodGroup = new FoodGroupDto();
										foodGroup.setError(ErrorImportEnum.ERROR_FOODGROUP_FORMAT.val);
									}
								}
								
								// save food-group-item
								if (StringUtils.isNotBlank(ioSoDto.getFoodItemCode()) && StringUtils.isEmpty(foodGroup.getError())) {
									// Lưu thông tin ảnh nhóm món ăn
		    						if(StringUtils.isNotBlank(ioSoDto.getSrcImg())) {
										String url = ioSoDto.getSrcImg();
										String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
										String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
										String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
										String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
										if(!imageHelper.checkImageUrlErr(fileName) && fileType.length() < 6) {
											saveAttachmentDto(foodGroup.getId(), moduleTypeImage, avatarFunctionType, fileName, fileType, url, absolutePath);
										} else {
											ioSoDto.setStatus(false);
											ioSoDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
											ioSoErrs.add(ioSoDto);
										}
									}
									
									FoodGroupItemDto foodGroupItemDto = Optional.ofNullable(foodGroupItemRepository.findByFoodGroupAndFoodItemCode(foodGroup.getId(), ioSoDto.getFoodItemCode())).map(foodGroupItemMapper::entityToDto).orElse(null);
									if (foodGroupItemDto == null) {
										FoodItemDto foodItemDto = Optional.ofNullable(foodItemRepository.findByCode(ioSoDto.getFoodItemCode())).map(foodItemMapper::entityToDto).orElse(null);
										if (foodItemDto != null) {
											foodGroupItemDto = new FoodGroupItemDto();
											foodGroupItemDto.setFoodGroup(foodGroup);
											foodGroupItemDto.setFoodItem(foodItemDto);
											foodGroupItemDto.setItemOrder(Integer.valueOf(ioSoDto.getItemOrder().intValue()));
											FoodGroupItem foodGroupItem = Optional.ofNullable(foodGroupItemDto).map(foodGroupItemMapper::dtoToEntity).orElse(null);
											foodGroupItemRepository.save(foodGroupItem);
										} else {
											ioSoDto.setStatus(false);
											ioSoDto.setError(ErrorImportEnum.ERROR_FOODITEM_NOT_EXIST.val);
											ioSoErrs.add(ioSoDto);
										}
									} else {
										FoodItemDto foodItemDto = Optional.ofNullable(foodItemRepository.findByCode(ioSoDto.getFoodItemCode())).map(foodItemMapper::entityToDto).orElse(null);
										if (foodItemDto != null) {
											foodGroupItemDto.setFoodGroup(foodGroup);
											foodGroupItemDto.setFoodItem(foodItemDto);
											foodGroupItemDto.setItemOrder(Integer.valueOf(ioSoDto.getItemOrder().intValue()));
											FoodGroupItem foodGroupItem = Optional.ofNullable(foodGroupItemDto).map(foodGroupItemMapper::dtoToEntity).orElse(null);
											foodGroupItemRepository.save(foodGroupItem);
										} else {
											ioSoDto.setStatus(false);
											ioSoDto.setError(ErrorImportEnum.ERROR_FOODITEM_NOT_EXIST.val);
											ioSoErrs.add(ioSoDto);
										}
									}
								} else {
									ioSoDto.setStatus(false);
				    				ioSoDto.setError(foodGroup.getError());
									ioSoErrs.add(ioSoDto);
								}
							}
						}
					} catch (Exception e) {
						log.error("ERROR: IMPORT SO_MENU EXCEPTION, EXCEPTION: {}", e);
	    				ioSoDto.setStatus(false);
	    				ioSoDto.setError(e.getMessage());
						ioSoErrs.add(ioSoDto);
					}
	    		}
			});
			//Check xem nếu restaurantCodeApplies != null thì lưu vào bảng để đánh dấu item này đã chỉnh sửa => Dùng cho việc đồng bộ update
    		if(!CollectionUtils.isEmpty(restaurantCodeApplies) && !CollectionUtils.isEmpty(newSoCategoryIds)) {
    			newSoCategoryIds.stream().forEach(id ->{
    				// Xóa dữ liệu cũ trước khi lưu data
    				catalogDataEditRepository.deleteByCatalogIdAndTypeAndValue(soId, catalogDataEditType, id.toString());
    				CatalogDataEdit catalogDataEdit = new CatalogDataEdit();
    				catalogDataEdit.setCatalogId(soId);
    				catalogDataEdit.setValue(id.toString());
    				catalogDataEdit.setType(catalogDataEditType);
    				catalogDataEditRepository.save(catalogDataEdit);
    			});
    		}
		}
		return ioSoErrs;
	}
	
	// save foodGroup 
	private FoodGroupDto saveFoodGroupAndSoCategoryFoodGroup(SoCategory soCategory, MenuTypeDto menuType, String code, String nameEn, String nameVn, String type, Double order,String srcImg, FoodGroupDto parent,Double level) {
		StringBuilder builder = new StringBuilder();
		FoodGroupDto foodGroupSavedDto;
		FoodGroupDto foodGroupExisting = Optional.ofNullable(foodGroupRepository.findByCodeAndRestaurantCodeIsNull(code)).map(foodGroupMapper::entityToDto).orElse(null);
		OrderCategoryDto category = Optional.ofNullable(orderCategoryRepository.findByFoodGroupCode(code)).map(orderCategoryMapper::entityToDto).orElse(null);;
		SoCategoryDto soCategoryExisting = Optional.ofNullable(soCategoryRepository.findByFoodGroupCodeAndResCodeIsNull(code)).map(soCategoryMapper::entityToDto).orElse(null);;
		if(foodGroupExisting != null) {
			if(category != null && category.getCode().equals(soCategory.getOrderCategory().getCode()) && soCategory.getSo().getId().equals(soCategoryExisting.getSo().getId())) {
				try {
					FoodGroupDto foodGroupExistingDto = Optional.ofNullable(foodGroupRepository.findBySoCategoryIdAndFoodGroupCode(soCategory.getId(), code)).map(foodGroupMapper::entityToDto).orElse(null);
					if (foodGroupExistingDto == null) {
						foodGroupExistingDto = new FoodGroupDto();
						foodGroupExistingDto.setCode(code);
					}
					if(nameVn != null && !nameVn.isEmpty()) {
						foodGroupExistingDto.setNameVn(nameVn);
						foodGroupExistingDto.setUnsignedName(org.apache.commons.lang3.StringUtils.stripAccents(nameVn));
					}
					foodGroupExistingDto.setSrcImage(srcImg);
					foodGroupExistingDto.setNameEn(nameEn);
					foodGroupExistingDto.setLevel(Integer.valueOf(level.intValue()));
					foodGroupExistingDto.setType(type);
					foodGroupExistingDto.setChanged(StatusEnum.ACTIVE.status);
					if (parent != null) {
						foodGroupExistingDto.setParent(parent);
					}
					foodGroupExistingDto.setMenuType(menuType);
					foodGroupExistingDto.setError(null);
					
					FoodGroup foodGroupSaved = foodGroupRepository.save(Optional.ofNullable(foodGroupExistingDto).map(foodGroupMapper::dtoToEntity).orElse(null));
					foodGroupSavedDto = Optional.ofNullable(foodGroupSaved).map(foodGroupMapper::entityToDto).orElse(null);

					// save so-category-food-group
					SoCategoryFoodGroup soCategoryFoodGroupExisting = soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupAndRestaurantCodeIsNull(soCategory, foodGroupSaved);
					if (soCategoryFoodGroupExisting == null) {
						soCategoryFoodGroupExisting = new SoCategoryFoodGroup();
						soCategoryFoodGroupExisting.setFoodGroup(foodGroupSaved);
						soCategoryFoodGroupExisting.setSoCategory(soCategory);
						if (order != null) {
							soCategoryFoodGroupExisting.setGroupOrder(Integer.valueOf(order.intValue()));	
						}
						if (parent != null) {
							soCategoryFoodGroupExisting.setFoodGroupParentId(parent.getId());
						}
						soCategoryFoodGroupRepository.save(soCategoryFoodGroupExisting);
					} else {
						soCategoryFoodGroupExisting.setFoodGroup(foodGroupSaved);
						soCategoryFoodGroupExisting.setSoCategory(soCategory);
						if (order != null) {
							soCategoryFoodGroupExisting.setGroupOrder(Integer.valueOf(order.intValue()));	
						}
						if (parent != null) {
							soCategoryFoodGroupExisting.setFoodGroupParentId(parent.getId());
						}
						soCategoryFoodGroupRepository.save(soCategoryFoodGroupExisting);
					}
				} catch (Exception e) {
					builder.append(e.toString());
					foodGroupSavedDto = new FoodGroupDto();
					foodGroupSavedDto.setError(builder.toString());
				}
			} else {
				builder.append(ErrorImportEnum.ERROR_FOODGROUP_IS_USE.val).append(soCategoryExisting.getSo().getName()).append(SymbolEnum.HYPHEN.val).append(soCategoryExisting.getOrderCategory().getName());
				foodGroupSavedDto = new FoodGroupDto();
				foodGroupSavedDto.setError(builder.toString());
			}
		}else {
			try {
				FoodGroupDto foodGroupExistingDto = Optional.ofNullable(foodGroupRepository.findBySoCategoryIdAndFoodGroupCode(soCategory.getId(), code)).map(foodGroupMapper::entityToDto).orElse(null);
				if (foodGroupExistingDto == null) {
					foodGroupExistingDto = new FoodGroupDto();
					foodGroupExistingDto.setCode(code);
				}
				if(nameVn != null && !nameVn.isEmpty()) {
					foodGroupExistingDto.setNameVn(nameVn);
					foodGroupExistingDto.setUnsignedName(StringUtils.stripAccents(nameVn));
				}
				foodGroupExistingDto.setNameEn(nameEn);
				foodGroupExistingDto.setLevel(Integer.valueOf(level.intValue()));
				foodGroupExistingDto.setSrcImage(srcImg);
				foodGroupExistingDto.setType(type);
				if (parent != null) {
					foodGroupExistingDto.setParent(parent);
				}
				foodGroupExistingDto.setMenuType(menuType);
				foodGroupExistingDto.setError(null);
				
				FoodGroup foodGroupSaved = foodGroupRepository.save(Optional.ofNullable(foodGroupExistingDto).map(foodGroupMapper::dtoToEntity).orElse(null));
				foodGroupSavedDto = Optional.ofNullable(foodGroupSaved).map(foodGroupMapper::entityToDto).orElse(null);

				// save so-category-food-group
				SoCategoryFoodGroup soCategoryFoodGroupExisting = soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupAndRestaurantCodeIsNull(soCategory, foodGroupSaved);
				if (soCategoryFoodGroupExisting == null) {
					soCategoryFoodGroupExisting = new SoCategoryFoodGroup();
					soCategoryFoodGroupExisting.setFoodGroup(foodGroupSaved);
					soCategoryFoodGroupExisting.setSoCategory(soCategory);
					if (order != null) {
						soCategoryFoodGroupExisting.setGroupOrder(Integer.valueOf(order.intValue()));	
					}
					if (parent != null) {
						soCategoryFoodGroupExisting.setFoodGroupParentId(parent.getId());
					}
					soCategoryFoodGroupRepository.save(soCategoryFoodGroupExisting);
				} else {
					soCategoryFoodGroupExisting.setFoodGroup(foodGroupSaved);
					soCategoryFoodGroupExisting.setSoCategory(soCategory);
					if (order != null) {
						soCategoryFoodGroupExisting.setGroupOrder(Integer.valueOf(order.intValue()));	
					}
					if (parent != null) {
						soCategoryFoodGroupExisting.setFoodGroupParentId(parent.getId());
					}
					soCategoryFoodGroupRepository.save(soCategoryFoodGroupExisting);
				}
			} catch (Exception e) {
				builder.append(e.toString());
				foodGroupSavedDto = new FoodGroupDto();
				foodGroupSavedDto.setError(builder.toString());
			}
		}
		return foodGroupSavedDto;
	}
	
	/*
	 * Function tạo mới đường dẫn của ảnh
	 */
	private AttachmentDto saveAttachmentDto(Long moduleId, String moduleType, String functionType, String  fileName, String fileType, String url, String absolutePath) {
		log.debug("PROCESS: SAVE ATTACHMENT, MODULE_ID: {}, MODULE_TYPE: {}, FUNCTION_TYPE: {}, URL: {}, ABSOLUTE_PATH: {}", moduleId, moduleType, functionType, url, absolutePath);
		
		/*
		 * MODULE_ID: ID của CO_FOOD_ITEM
		 * MODULE_TYPE: Loại ảnh, ví dụ: ảnh Cateogry, ảnh CoFoodItem
		 * FUNCTION_TYPE: Chức năng của ảnh để hiển thị, ví dụ: ảnh đại diện, ảnh đồ uống, ảnh 1/4
		 */
		
		try {
			attachmentRepository.deleteByModuleIdAndModuleTypeAndFunctionType(moduleId, moduleType, functionType);
			// tạo mới data
			Attachment attachment = new Attachment();
			attachment.setModuleId(moduleId);
			attachment.setModuleType(moduleType);
			attachment.setFunctionType(functionType);
			attachment.setUrl(url);
			attachment.setAbsolutePath(absolutePath);
			attachment.setFileName(fileName);
			attachment.setFileType(fileType);
			return Optional.ofNullable(attachmentRepository.save(attachment)).map(attachmentMapper::entityToDto).orElse(null);
		} catch (Exception e) {
			log.debug("ERROR SAVE ATTACHMENT EXCEPTION: {}", e);
			return null;
		}
	}

	public List<SyncDto> offSoMenuAndCoMenu(SoCategoryDto soCategoryDto) {
		log.debug("PROCESS FUNCTION: CONVERT JSON DELETE SO_MENU AND CO_MENU");
		List<SyncDto> syncDtos = new ArrayList<>();
		try {
			String orderCategoryCode = soCategoryDto.getOrderCategory().getCode();
			if(soCategoryDto.getRestaurantCode() != null) {
				syncDtos.add(savedSyncDtoWithTypeSoMenu(orderCategoryCode, soCategoryDto.getRestaurantCode()));
				List<CoCategory> coCategories = coCategoryRepository.findBySoCategory_Id(soCategoryDto.getId());
				if(!CollectionUtils.isEmpty(coCategories)) {
					syncDtos.addAll(savedSyncDtoWithTypeCoMenu(orderCategoryCode, coCategories));
				}
			} else {
				List<Integer> restaurantCodeApplies = catalogApplyToRestaurantRepository.findBySoId(soCategoryDto.getSo().getId()).stream().map(cc -> cc.getRestaurantCode()).collect(Collectors.toList());
				if(!CollectionUtils.isEmpty(restaurantCodeApplies)) {
					List<SoCategory> soCategories = soCategoryRepository.findByOrderCategoryCodeAndRestaurantCodeIn(orderCategoryCode, restaurantCodeApplies);
					if(!CollectionUtils.isEmpty(soCategories)) {
						soCategories.stream().forEach(soCategoryExisting ->{
							syncDtos.add(savedSyncDtoWithTypeSoMenu(orderCategoryCode, soCategoryExisting.getRestaurantCode()));
							List<CoCategory> coCategories = coCategoryRepository.findBySoCategory_Id(soCategoryExisting.getId());
							if(!CollectionUtils.isEmpty(coCategories)) {
								syncDtos.addAll(savedSyncDtoWithTypeCoMenu(orderCategoryCode, coCategories));
							}
						});
					}
				}
			}
		} catch (Exception e) {
			log.error("ERROR PROCESS FUNCTION: CONVERT JSON DELETE SO_MENU AND CO_MENU EXCEPTION: {}", e);
		}
		return syncDtos;
	}
	
	private List<SyncDto> savedSyncDtoWithTypeCoMenu(String orderCategoryCode, List<CoCategory> coCategories) {
		List<SyncDto> syncDtos = new ArrayList<>();
		if(!CollectionUtils.isEmpty(coCategories)) {
			coCategories.stream().forEach(item ->{
				SyncDto syncDto = new SyncDto();
				syncDto.setRestaurantCode(item.getRestaurantCode());
				syncDto.setValue(orderCategoryCode);
				syncDto.setStatus(SyncStatusEnum.WAITING.val);
				syncDto.setResult(ResultEnum.WAITING_RESULT.val);
				syncDto.setTypeData(TypeDataEnum.OFF_CO_MENU.val);
				syncDto.setTypeSync(TypeSyncEnum.OFF_CO_MENU.val);
				syncDtos.add(syncDto);
			});	
		}
		return syncDtos;
	}
	
	private SyncDto savedSyncDtoWithTypeSoMenu(String orderCategoryCode, Integer restaurantCode) {
		SyncDto syncDto = new SyncDto();
		syncDto.setRestaurantCode(restaurantCode);
		syncDto.setValue(orderCategoryCode);
		syncDto.setStatus(SyncStatusEnum.WAITING.val);
		syncDto.setResult(ResultEnum.WAITING_RESULT.val);
		syncDto.setTypeData(TypeDataEnum.OFF_SO_MENU.val);
		syncDto.setTypeSync(TypeSyncEnum.OFF_SO_MENU.val);
		return syncDto;
	}
	
	private List<ConfigMenuEngineering> convertJsonDeleteSoMenu(String orderCategoryCode) {
		log.debug("PROCESS FUNCTION: CONVERT JSON DELETE SO_MENU, ORDER_CATEGORY_CODE: {}", orderCategoryCode);
		List<ConfigMenuEngineering> deleteMenuEngineerings = new ArrayList<>();
		ConfigMenuEngineering delMenuEngineering = new ConfigMenuEngineering();
		JsonOrderCategory jsonOrderCategory = new JsonOrderCategory();
		jsonOrderCategory.setCode(orderCategoryCode);
		delMenuEngineering.setJsonOrderCategory(jsonOrderCategory);
		deleteMenuEngineerings.add(delMenuEngineering);
		return deleteMenuEngineerings;
	}
	
	/*
	 * Function convert thông tin CO_CATEGORY khi MENU này off
	 */
	private List<JsonDeleteCoCategory> convertJsonDeleteCoCategories(String orderCategoryCode) {
		log.debug("PROCESS FUNCTION: CONVERT JSON DELETE CO_MENU, ORDER_CATEGORY_CODE: {}", orderCategoryCode);
		List<JsonDeleteCoCategory> deleteCoCategories = new ArrayList<>();
		JsonDeleteCoCategory jsonDeleteCoCategory = new JsonDeleteCoCategory();
		jsonDeleteCoCategory.setCode(orderCategoryCode);
		deleteCoCategories.add(jsonDeleteCoCategory);
		return deleteCoCategories;
	}
	
	
}