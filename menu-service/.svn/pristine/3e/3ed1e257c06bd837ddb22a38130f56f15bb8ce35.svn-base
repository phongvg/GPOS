package com.gg.gpos.menu.manager;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.common.json.ResponseData;
import com.gg.gpos.menu.dto.CoDto;
import com.gg.gpos.menu.dto.ConfigQrOrderDto;
import com.gg.gpos.menu.entity.CatalogApplyToRestaurant;
import com.gg.gpos.menu.entity.CatalogDataEdit;
import com.gg.gpos.menu.entity.Co;
import com.gg.gpos.menu.entity.CoCategory;
import com.gg.gpos.menu.entity.CoFoodGroupDisplay;
import com.gg.gpos.menu.entity.CoFoodItem;
import com.gg.gpos.menu.entity.CoFoodItemModifier;
import com.gg.gpos.menu.entity.ConfigQrOrder;
import com.gg.gpos.menu.entity.Feature;
import com.gg.gpos.menu.entity.RelatedFoodItem;
import com.gg.gpos.menu.entity.RestaurantDataEdit;
import com.gg.gpos.menu.entity.SoCategory;
import com.gg.gpos.menu.entity.ToppingFoodItem;
import com.gg.gpos.menu.mapper.CoMapper;
import com.gg.gpos.menu.mapper.ConfigQrOrderMapper;
import com.gg.gpos.menu.repository.CatalogApplyToRestaurantRepository;
import com.gg.gpos.menu.repository.CatalogDataEditRepository;
import com.gg.gpos.menu.repository.CoCategoryRepository;
import com.gg.gpos.menu.repository.CoFoodGroupDisplayRepository;
import com.gg.gpos.menu.repository.CoFoodItemModifierRepository;
import com.gg.gpos.menu.repository.CoFoodItemRepository;
import com.gg.gpos.menu.repository.CoRepository;
import com.gg.gpos.menu.repository.ConfigQrOrderRepository;
import com.gg.gpos.menu.repository.RelatedFoodItemRepository;
import com.gg.gpos.menu.repository.RestaurantDataEditRepository;
import com.gg.gpos.menu.repository.SoCategoryRepository;
import com.gg.gpos.menu.repository.ToppingFoodItemRepository;
import com.gg.gpos.menu.specification.CoSpecification;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.entity.Attachment;
import com.gg.gpos.reference.mapper.AttachmentMapper;
import com.gg.gpos.reference.repository.AttachmentRepository;
import com.gg.gpos.res.dto.RestaurantDto;
import com.gg.gpos.res.mapper.RestaurantMapper;
import com.gg.gpos.res.repository.RestaurantRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class CoManager {
	@Autowired
	private CoRepository coRepository;
	@Autowired
	private CoMapper coMapper;
	@Autowired
	private CoSpecification coSpecification;
	@Autowired
	private CoFoodItemRepository coFoodItemRepository;
	@Autowired
	private RelatedFoodItemRepository relatedFoodItemRepository;
	@Autowired
	private SoCategoryRepository soCategoryRepository;
	@Autowired
	private CoCategoryRepository coCategoryRepository;
	@Autowired
	private CoFoodGroupDisplayRepository coFoodGroupDisplayRepository;
	@Autowired
	private ToppingFoodItemRepository toppingFoodItemRepository;
	@Autowired
	private CatalogApplyToRestaurantRepository catalogApplyToRestaurantRepository;
	@Autowired
	private CatalogDataEditRepository catalogDataEditRepository;
	@Autowired
	private RestaurantDataEditRepository restaurantDataEditRepository;
	@Autowired
	private AttachmentRepository attachmentRepository;
	@Autowired
	private CoFoodItemModifierRepository coFoodItemModifierRepository;
	@Autowired
	private ConfigQrOrderRepository configQrOrderRepository;
	@Autowired
	private ConfigQrOrderMapper configQrOrderMapper;
	@Autowired
	private RestaurantMapper restaurantMapper;
	@Autowired
	private AttachmentMapper attachmentMapper;
	@Autowired
	private RestaurantRepository restaurantRepository;
	
	public CoDto get(Long id) {
		return coRepository.findById(id).map(coMapper::entityToDto).orElse(null);
	}
	
	public List<CoDto> gets() {
		return coRepository.findAll().stream().map(coMapper::entityToDto).collect(Collectors.toList());
	}
	
	public CoDto saveAfterChangeCatalog(Long id) {
		log.debug("PROCESS: SAVE CO AFTER CHANGE INFO DATA CATALOG, CO_ID: {}", id);
		Co co = coRepository.findById(id).get();
		if(co != null) {
			co.setModifiedDate(LocalDateTime.now());
			return Optional.ofNullable(coRepository.save(co)).map(coMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
		
	}
	
	public List<CoDto> getsByStatusAndCoFoodItemNotNull(){
		return coRepository.findByStatusAndCoFoodItemNotNull().stream().map(coMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<CoDto> getsByStatusAndCoFoodItemNotNull(Integer rCode,Long soId){
		List<CoDto> coDtos = new ArrayList<>();
		if(soId != null) {
			coDtos = coRepository.findByStatusAndCoFoodItemNotNull(soId).stream().map(coMapper::entityToDto).collect(Collectors.toList());
			return coDtos;
		}else {
			return coDtos;
		}
	}
	
	public CoDto save(CoDto coDto) {
		Co co = Optional.ofNullable(coDto).map(coMapper::dtoToEntity).orElse(null);
		if (co != null) {
			if(co.getId() != null && !co.isStatus()) {
				offCatalog(co);
			}
			return Optional.ofNullable(coRepository.save(co)).map(coMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<CoDto> gets(CoDto criteria){
		log.debug("PROCESS FUCNTION: GETS PAGE CO_DTO, CO_DTO: {}", criteria);
		Page<Co> page = coRepository.findAll(coSpecification.filter(criteria), PageRequest.of(criteria.getPage(), criteria.getSize(), Sort.by(Sort.Direction.DESC, "modifiedDate")));
		return new PageImpl<>(page.getContent().stream().map(coMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()),page.getTotalElements());
	} 
	
	public ResponseData checkSoBeforApply(String selectedRestaurantCodes,Long coId) {
		log.debug("Entering 'checkApplyToRes' method...");
		Co co = coRepository.getOne(coId);
		Long soId = co.getSoId();
		ResponseData res = new ResponseData();
		List<Integer> resCodes = new ArrayList<>();
		// check xem nhà hàng đã áp dụng danh mục So chưa
		Set<String> keys = StringUtils.commaDelimitedListToSet(selectedRestaurantCodes);
    	List<String> filterKey = keys.stream().filter(key -> {
    		return !key.contains(SymbolEnum.UNDERSCORE.val);
    	}).collect(Collectors.toList());
    	filterKey.stream().forEach(rCode ->{
    		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCodeAndSoId(Integer.parseInt(rCode),soId);
    		if(applyToRestaurant == null) {
    			resCodes.add(Integer.parseInt(rCode));
    		}
    	});
		if (!resCodes.isEmpty()) {
			res.setData(resCodes);
			res.setResult(true);
			res.setSize(resCodes.size());
		} else {
			res.setResult(false);
		}
		return res;
	}
	
	public ResponseData checkSoBeforCopy(String selectedRestaurantCodes,Long coId) {
		log.debug("Entering 'checkApplyToRes' method...");
		Co co = coRepository.getOne(coId);
		ResponseData res = new ResponseData();
		List<Integer> resCodes = new ArrayList<>();
		Set<String> keys = StringUtils.commaDelimitedListToSet(selectedRestaurantCodes);
    	List<String> filterKey = keys.stream().filter(key -> {
    		return !key.contains(SymbolEnum.COMMA.val);
    	}).collect(Collectors.toList());
    	filterKey.stream().forEach(rCode ->{
			Long soId = soCategoryRepository.findSoIdByRestaurantCode(Integer.parseInt(rCode));
			if(soId == null || !soId.equals(co.getSoId())) {
    			resCodes.add(Integer.parseInt(rCode));
    		}
		});
		if (!resCodes.isEmpty()) {
			res.setData(resCodes);
			res.setResult(true);
			res.setSize(resCodes.size());
		} else {
			res.setResult(false);
		}
		return res;
	}

	// get list code categories changed and deleted
	private List<String> getCateChanged(Integer resCode){
		List<String> orderCodes = new ArrayList<>();
		orderCodes.addAll(coCategoryRepository.findOrderCateCodes(resCode));
//		orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_OLD.val));
//		orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val));
		orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DEL_CO_CATEGORY_OLD_RES.val));
		orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_RES.val));
		return orderCodes;
	}
	
	// get list code CoFoodItems changed and deleted
		private List<String> getCFIChanged(Integer resCode){
			List<String> orderCodes = new ArrayList<>();
			orderCodes.addAll(coFoodItemRepository.findFoodItemCode(resCode));
//			orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_OLD.val));
			orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DEL_CO_FOODITEM_OLD_RES.val));
			orderCodes.addAll(restaurantDataEditRepository.findValues(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_RES.val));
			return orderCodes;
		}
	
	
	private void saveAttachment(Long currentModuleId, Long newModuleId, String moduleType) {
		List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleType(currentModuleId, moduleType);
		if(attachments != null && !attachments.isEmpty()) {
			attachments.stream().forEach(item ->{
				Attachment attachment = new Attachment();
				attachment.setModuleId(newModuleId);
				attachment.setModuleType(moduleType);
				attachment.setFunctionType(item.getFunctionType());
				attachment.setName(item.getName());
				attachment.setUrl(item.getUrl());
				attachment.setAbsolutePath(item.getAbsolutePath());
				attachment.setFileName(item.getFileName());
				attachment.setFileType(item.getFileType());
				attachment.setVersion(item.getVersion());
				attachmentRepository.save(attachment);
			});
		}
	}
	
	
	
	private void saveRestaurantDataEdit(String value, String type,Integer resCode){
		restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(value, resCode, type);
		RestaurantDataEdit restaurantDataEdit = restaurantDataEditRepository.findByValueAndRestaurantCodeAndType(value, resCode, type);
		if(restaurantDataEdit == null) {
			restaurantDataEdit = new RestaurantDataEdit();
		}
		restaurantDataEdit.setValue(value);
		restaurantDataEdit.setType(type);
		restaurantDataEdit.setRestaurantCode(resCode);
		restaurantDataEditRepository.save(restaurantDataEdit);
	}
	
	private void saveCatalogApply(Integer resCode, Long coId) {
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(resCode);
		if(applyToRestaurant == null) {
			applyToRestaurant = new CatalogApplyToRestaurant();
		}
		applyToRestaurant.setRestaurantCode(resCode);
		applyToRestaurant.setCoId(coId);
		catalogApplyToRestaurantRepository.save(applyToRestaurant);
	}
	
	
	// apply data from catalog to res before sync data to restaurant
	public void syncFromToServerRes(CoDto coDto,boolean isOverride,Integer toResCode,List<Integer> rCodeExistings) {
    	log.info("Entering 'syncFromToServerRes(CoDto coDto,boolean isOverride,Integer toResCode,List<Integer> rCodeExistings)' method...");
    	Long coId = coDto.getId();
        Co co = Optional.ofNullable(coDto).map(coMapper::dtoToEntity).orElse(null);
        
        if(isOverride) {
			saveCoCategory(toResCode, co, true,false,false);
			saveCoFoodItem(toResCode, co, true,false,false);
			saveCatalogApply(toResCode,coId);
			deleteCatalogDataEdit(coId);
        } else {
    		if(rCodeExistings != null && !rCodeExistings.isEmpty()) {
    			if(rCodeExistings.contains(toResCode)) {
    				saveCoCategory(toResCode, co, false,true,false);
        			saveCoFoodItem(toResCode, co, false,true,false);		
    			} else {
    				saveCoCategory(toResCode, co, true,false,false);
        			saveCoFoodItem(toResCode, co, true,false,false);  		
    			}
    			saveCatalogApply(toResCode,coId);
    		} else {
    			saveCoCategory(toResCode, co, true,false,false);
    			saveCoFoodItem(toResCode, co, true,false,false);
    			saveCatalogApply(toResCode,coId);
    		}
        }
	}
	
	public void deleteDataIfResUncheck(List<Integer> rCodeExistings, List<String> resCodeSelected,Long catalogId) {
		// delete data if resCode uncheck
        if(resCodeSelected != null && !resCodeSelected.isEmpty() && rCodeExistings != null && !rCodeExistings.isEmpty()) {
        	rCodeExistings.stream().forEach(rCode ->{
        		if(!resCodeSelected.contains(rCode.toString())) {
        			//delete old data
        			//delete CoFoodItem
        			List<CoFoodItem> coFoodItems = getsCoFoodItemData(rCode, true);
            		if(coFoodItems != null && !coFoodItems.isEmpty()) {
            			coFoodItems.stream().forEach(coFoodItem ->{
            				coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
            				relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
                			toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
                			delAttachment(coFoodItem.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
                			coFoodItemRepository.delete(coFoodItem);
            			});
            		};
            		//delete CoCategory
            		List<CoCategory> coCates = getCoCategoryData(rCode,true);
            		if(coCates != null && !coCates.isEmpty()) {
            			coCates.stream().forEach(coCate ->{
            				coFoodGroupDisplayRepository.deleteByCoCategory(coCate);
            				delAttachment(coCate.getId(), ModuleTypeEnum.CO_CATEGORY.val);
            				coCategoryRepository.delete(coCate);
            			});
            		}
            		// delete data restaurantDataEdit by resCode
            		delRestaurantDataEdit(rCode,true);
    				// set coId null when off
            		saveCatalogApply(rCode,null);
        		}
        	});
        }
	}
	
	
	private void deleteCatalogDataEdit(Long catalogId) {
		log.debug("Entering 'deleteCatalogDataEdit(Long catalogId)' method...");
		catalogDataEditRepository.deleteByCatalogIdAndType(catalogId,TypeRestaurantDataEditEnum.CO_FOODITEM.val);
		catalogDataEditRepository.deleteByCatalogIdAndType(catalogId,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
		catalogDataEditRepository.deleteByCatalogIdAndType(catalogId,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
		catalogDataEditRepository.deleteByCatalogIdAndType(catalogId,TypeRestaurantDataEditEnum.CO_CATEGORY.val);
	}
	
	private void delRestaurantDataEdit(Integer resCode, boolean isOverride) {
		log.debug("Entering 'deleteCatalogDataEdit(Integer resCode)' method...");
		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.CO_FOODITEM.val);
		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.CO_CATEGORY.val);
		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.DELETE_CO_FG_DISPLAY.val);
		if(isOverride) {
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_RES.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_RES.val);
		}
	}
	
	private List<CoFoodItem> getsCoFoodItemData(Integer resCode, boolean isOverride) {
		log.info("Entering 'getsCoFoodItemData(Integer resCode, boolean isOverride)' method...");
		List<CoFoodItem> coFoodItems = null;
		if (isOverride) {
			coFoodItems = coFoodItemRepository.findByRestaurantCode(resCode);
		} else {
			coFoodItems = coFoodItemRepository.findByRestaurantCodeAndSoIdIsNotNull(resCode);
		}
		return coFoodItems;
	}
	
	private List<CoCategory> getCoCategoryData(Integer resCode, boolean isOverride){
		log.debug("Entering 'getCoCategoryData(Integer resCode, boolean isOverride)' method...");
		List<CoCategory> coCategories = null;
		if (isOverride) {
			coCategories = coCategoryRepository.findByRestaurantCode(resCode);
		} else {
			coCategories = coCategoryRepository.findByRestaurantCodeAndCoIdIsNotNull(resCode);
		}
		return coCategories;
	}
	
	//Delete all data CoCategory and CoFoodItem when Off-Co
	public void offCatalog(Co co) {
		log.info("Entering 'offCatalog(Co co)' method...");
		log.debug("Params: coId: " + co.getId());
		
		List<CatalogApplyToRestaurant> applyToRestaurants = catalogApplyToRestaurantRepository.findByCoId(co.getId());
		if(applyToRestaurants != null && !applyToRestaurants.isEmpty()) {
			applyToRestaurants.stream().forEach(item ->{
				Integer resCode = item.getRestaurantCode();
				List<CoCategory> coCategories = coCategoryRepository.findByRestaurantCode(resCode);
				if(coCategories != null && !coCategories.isEmpty()) {
					coCategories.stream().forEach(coCategory ->{
						coFoodGroupDisplayRepository.deleteByCoCategory(coCategory);
						delAttachment(coCategory.getId(), ModuleTypeEnum.CO_CATEGORY.val);
						coCategoryRepository.delete(coCategory);
					});
				}
				List<CoFoodItem> coFoodItems = coFoodItemRepository.findByRestaurantCode(resCode);
				if(coFoodItems != null && !coFoodItems.isEmpty()) {
					coFoodItems.stream().forEach(coFoodItem ->{
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
						relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
						toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
						delAttachment(coFoodItem.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
						coFoodItemRepository.delete(coFoodItem);
					});
				}
				// delete data restaurantDataEdit by resCode\
				restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.CO_CATEGORY.val);
				restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.CO_FOODITEM.val);
				// set coId null when off
				item.setCoId(null);
				catalogApplyToRestaurantRepository.save(item);
			});
			// delete data catalogDataEdit by resCode
			catalogDataEditRepository.deleteByCatalogIdAndType(co.getId(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
			catalogDataEditRepository.deleteByCatalogIdAndType(co.getId(), TypeRestaurantDataEditEnum.DELETE_CO_FG_DISPLAY.val);
			catalogDataEditRepository.deleteByCatalogIdAndType(co.getId(), TypeRestaurantDataEditEnum.CO_FOODITEM.val);
		}
	}
	
	private void delAttachment(Long moduleId,String moduleType) {
		log.info("Entering 'delAttachment(Long moduleId,String moduleType)' method...");
		log.debug("Params: moduleId: " + moduleId + ", moduleType: " + moduleType);
		List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleType(moduleId, moduleType);
		if(attachments != null && !attachments.isEmpty()) {
			attachments.stream().forEach(attachment ->{
				attachment.setModuleId(null);
				attachment.setFunctionType(null);
				attachment.setModuleType(ModuleTypeEnum.DEL_ATTACHMENT.val);
				attachment.setRestaurantCode(null);
				attachment.setSyncStatus(null);
				attachmentRepository.save(attachment);
			});
		}
	}
	
	public boolean checkCatalog(CoDto coDto) {
		log.debug("Entering 'checkCatalog' method...");
		Co co = Optional.ofNullable(coDto).map(coMapper::dtoToEntity).orElse(null);
		if(co != null) {
			List<CoFoodItem> coFoodItems = coFoodItemRepository.findByCoAndRestaurantCodeIsNull(co);
			if(coFoodItems != null && !coFoodItems.isEmpty()) {
				return true;
			}
		}
		return false;
	}
	
	public void resetCoCateCategories(Integer resCode) {
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(resCode);
		List<CoCategory> coCateInRes = coCategoryRepository.findByRestaurantCodeAndCoIdIsNull(resCode);
		if(coCateInRes != null && !coCateInRes.isEmpty() && applyToRestaurant != null && applyToRestaurant.getCoId() != null) {
			coCateInRes.stream().forEach(coCate ->{
				String orderCategoryCode = coCate.getSoCategory().getOrderCategory().getCode();
				CoCategory coCateInCataLog = coCategoryRepository.findByorderCategoryCodeAndCoId(orderCategoryCode, applyToRestaurant.getCoId());
				if(coCateInCataLog != null) {
					List<CoFoodGroupDisplay> coFoodGroupDisplays = coCateInCataLog.getCoFoodGroupDisplays();
					
					CoCategory newCoCate = new CoCategory();
					newCoCate.setCoId(coCateInCataLog.getCoId());
					newCoCate.setNameEn(coCateInCataLog.getNameEn());
					newCoCate.setNameVn(coCateInCataLog.getNameVn());
					newCoCate.setDescCn(coCateInCataLog.getDescCn());
					newCoCate.setDescEn(coCateInCataLog.getDescEn());
					newCoCate.setDescJp(coCateInCataLog.getDescJp());
					newCoCate.setDescKr(coCateInCataLog.getDescKr());
					newCoCate.setDescVn(coCateInCataLog.getDescVn());
					newCoCate.setType(coCateInCataLog.getType());
					newCoCate.setAlacarteLabel(coCateInCataLog.getAlacarteLabel());
					newCoCate.setBuffetLabel(coCateInCataLog.getBuffetLabel());
					newCoCate.setDrinksLabel(coCateInCataLog.getDrinksLabel());
					newCoCate.setAlacarteLabelEn(coCateInCataLog.getAlacarteLabelEn());
					newCoCate.setBuffetLabelEn(coCateInCataLog.getBuffetLabelEn());
					newCoCate.setDrinksLabelEn(coCateInCataLog.getDrinksLabelEn());
					newCoCate.setPhotoDisplayPosition(coCateInCataLog.getPhotoDisplayPosition());
					newCoCate.setRestaurantCode(resCode);
					newCoCate.setSoCategory(coCateInCataLog.getSoCategory());
					newCoCate.setSrcImg(coCateInCataLog.getSrcImg());
					newCoCate.setSrcImgIntros(coCateInCataLog.getSrcImgIntros());
					newCoCate.setNote(coCateInCataLog.getNote());	
					newCoCate.setAverageAmount(coCateInCataLog.getAverageAmount());
	    			CoCategory coCategoryNew = coCategoryRepository.save(newCoCate);
	    			
					//clone coFoodGroupDisplay
					if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
						coFoodGroupDisplays.stream().forEach(cfgd ->{
							CoFoodGroupDisplay coFoodGroupDisplay = new CoFoodGroupDisplay();
							coFoodGroupDisplay.setCoCategory(coCategoryNew);
							coFoodGroupDisplay.setFoodGroupCode(cfgd.getFoodGroupCode());
							coFoodGroupDisplayRepository.save(coFoodGroupDisplay);
						});
					}
	    			Long newModuleId = coCategoryNew.getId();
	    			// clone attachement
	    			saveAttachment(coCateInCataLog.getId(), newModuleId, ModuleTypeEnum.CO_CATEGORY.val);
	    			//
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(orderCategoryCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(coCate.getId().toString(), resCode, TypeRestaurantDataEditEnum.CO_CATEGORY.val);
					// save in RestaurantDataEdit if sync update
					saveRestaurantDataEdit(newModuleId.toString(),TypeRestaurantDataEditEnum.CO_CATEGORY.val,resCode);
					
					// delete data old
					coFoodGroupDisplayRepository.deleteByCoCategory(coCate);
					delAttachment(coCate.getId(), ModuleTypeEnum.CO_CATEGORY.val);
					coCategoryRepository.delete(coCate);
				}
			});
		}
	}
	
	public void resetCoFoodItems(Integer resCode) {
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(resCode);
		List<CoFoodItem> coFoodItemInRes =  coFoodItemRepository.findByRestaurantCodeAndSoIdIsNull(resCode);
		if(coFoodItemInRes != null && !coFoodItemInRes.isEmpty() && applyToRestaurant != null && applyToRestaurant.getCoId() != null) {
			coFoodItemInRes.stream().forEach(c ->{
				String foodItemCode = c.getFoodItem().getCode();
    			CoFoodItem coFoodItem = coFoodItemRepository.findByCoIdAndFoodItemCodeAndRestaurantCodeIsNull(applyToRestaurant.getCoId(),foodItemCode);
    			if(coFoodItem != null) {
    				List<RelatedFoodItem> relatedFoodItems = relatedFoodItemRepository.findByCoFoodItem(coFoodItem);
        			List<ToppingFoodItem> toppingFoodItems = toppingFoodItemRepository.findByCoFoodItem(coFoodItem);
        			List<CoFoodItemModifier> coFoodItemModifiers = coFoodItemModifierRepository.findByCoFoodItem(c);
        			List<Feature> features = new ArrayList<>(coFoodItem.getFeatures());
    				
    				CoFoodItem newCoFoodItem = new CoFoodItem();
    				newCoFoodItem.setCo(coFoodItem.getCo());
    				newCoFoodItem.setFoodItem(coFoodItem.getFoodItem());
    				newCoFoodItem.setFeatures(features);
    				newCoFoodItem.setKalo(coFoodItem.getKalo());
    				newCoFoodItem.setMaxForKitchen(coFoodItem.getMaxForKitchen());
    				newCoFoodItem.setMaxPerTransaction(coFoodItem.getMaxPerTransaction());
    				newCoFoodItem.setSoId(coFoodItem.getSoId());
    				newCoFoodItem.setRestaurantCode(resCode);
    				newCoFoodItem.setNameVn(coFoodItem.getNameVn());
    				newCoFoodItem.setNameEn(coFoodItem.getNameEn());
    				newCoFoodItem.setDescEn(coFoodItem.getDescEn());
    				newCoFoodItem.setDescVn(coFoodItem.getDescVn());
    				newCoFoodItem.setPrice(coFoodItem.getPrice());
    				newCoFoodItem.setCode(coFoodItem.getCode());
    				newCoFoodItem.setCombo(coFoodItem.isCombo());
    				newCoFoodItem.setPositionNumber(coFoodItem.getPositionNumber());
    				newCoFoodItem.setBufferLabel(coFoodItem.getBufferLabel());
    				newCoFoodItem.setInfoFoodItem(coFoodItem.getInfoFoodItem());
    				newCoFoodItem.setCoImageSize(coFoodItem.getCoImageSize());
    				newCoFoodItem.setExtraFoodItem(coFoodItem.getExtraFoodItem());
    				newCoFoodItem.setViewType(coFoodItem.getViewType());
    				newCoFoodItem.setKaloGroupId(coFoodItem.getKaloGroupId());
    				newCoFoodItem.setNumberOfPeopleEat(coFoodItem.getNumberOfPeopleEat());
    				newCoFoodItem.setHideIcon(coFoodItem.getHideIcon());
    				newCoFoodItem.setNote(coFoodItem.getNote());
    				newCoFoodItem.setNoteQuantitative(coFoodItem.getNoteQuantitative());
    				CoFoodItem coFoodItemNew = coFoodItemRepository.save(newCoFoodItem);
    				//clone coFoodItemModifier
					if(coFoodItemModifiers != null && !coFoodItemModifiers.isEmpty()) {
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItemNew);
						coFoodItemModifiers.stream().forEach(item ->{
							CoFoodItemModifier coFoodItemModifier = new CoFoodItemModifier();
							coFoodItemModifier.setCoFoodItem(coFoodItemNew);
							coFoodItemModifier.setModifier(item.getModifier());
							coFoodItemModifier.setType(item.getType());
							coFoodItemModifier.setNumberOfChili(item.getNumberOfChili());
							coFoodItemModifierRepository.save(coFoodItemModifier);
							
						});
					}
    				//clone related foodItem
    				if(relatedFoodItems != null && !relatedFoodItems.isEmpty()) {
    					relatedFoodItems.stream().forEach(r ->{
    						RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
    						relatedFoodItem.setCoFoodItem(coFoodItemNew);
    						relatedFoodItem.setFoodItemCode(r.getFoodItemCode());
    						relatedFoodItem.setFoodItemName(r.getFoodItemName());
    						relatedFoodItem.setType(r.getType());
    						relatedFoodItem.setSapCode(r.getSapCode());
    						relatedFoodItem.setNameDisplay(r.getNameDisplay());
    						relatedFoodItemRepository.save(relatedFoodItem);
    					});
    				}
    				//clone topping FoodItem
    				if(toppingFoodItems != null && !toppingFoodItems.isEmpty()) {
    					toppingFoodItems.stream().forEach(r ->{
    						ToppingFoodItem toppingFoodItem = new ToppingFoodItem();
    						toppingFoodItem.setCoFoodItem(coFoodItemNew);
    						toppingFoodItem.setFoodItemCode(r.getFoodItemCode());
    						toppingFoodItem.setFoodItemName(r.getFoodItemName());
    						toppingFoodItem.setModifierCode(r.getModifierCode());
    						toppingFoodItem.setModifierName(r.getModifierName());
    						toppingFoodItem.setSapCode(r.getSapCode());
    						toppingFoodItemRepository.save(toppingFoodItem);
    					});
    				}
    				
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(foodItemCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(c.getId().toString(), resCode, TypeRestaurantDataEditEnum.CO_FOODITEM.val);
					//save in resDataEdit if sync update
					saveRestaurantDataEdit(coFoodItemNew.getId().toString(), TypeRestaurantDataEditEnum.CO_FOODITEM.val, resCode);
					
    				// delete attachement
        			delAttachment(c.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
    				// clone attachment
    				saveAttachment(coFoodItem.getId(), coFoodItemNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
    				
    				// delete data old
    				coFoodItemModifierRepository.deleteByCoFoodItem(c);
					relatedFoodItemRepository.deleteByCoFoodItem(c);
	    			toppingFoodItemRepository.deleteByCoFoodItem(c);
	        		delAttachment(c.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
	        		coFoodItemRepository.delete(c);
    			}
			});
		}
	}
	
	
	//===================== REVERT CODE ================================//
	//sync data from catalog to restaurants
	public void syncToRes(CoDto coDto,boolean isOverride) {
		log.debug("Entering 'syncToRes(CoDto coDto,boolean isOverride)' method...");
		
		Long coId = coDto.getId();
		Co co = coRepository.getOne(coId);
		Set<String> keys = StringUtils.commaDelimitedListToSet(coDto.getSelectedRestaurantCodes());
    	List<String> filterKey = keys.stream().filter(key -> {
    		return !key.contains(SymbolEnum.UNDERSCORE.val);
    	}).collect(Collectors.toList());
    	
    	// find list restaurant apply catalog CO
		List<CatalogApplyToRestaurant> applyToRestaurants = catalogApplyToRestaurantRepository.findByCoId(coId);
    	List<Integer> resCodeExistings = applyToRestaurants.stream().map(ap -> ap.getRestaurantCode()).collect(Collectors.toList());
    	
    	
    	if(isOverride) {
    		filterKey.stream().forEach(resCode -> {
    			saveCoCategory(Integer.parseInt(resCode), co, true,false,false);
    			saveCoFoodItem(Integer.parseInt(resCode), co, true,false,false);
    			saveCatalogApply(Integer.parseInt(resCode),coId);
        	});
    	} else {
    		if(resCodeExistings != null && !resCodeExistings.isEmpty()) {
        		filterKey.stream().forEach(resCode -> {
        			if(resCodeExistings.contains(Integer.parseInt(resCode))) {
            			saveCoCategory(Integer.parseInt(resCode), co, false,true,false);
            			saveCoFoodItem(Integer.parseInt(resCode), co, false,true,false);
        			} else {
            			saveCoCategory(Integer.parseInt(resCode), co, true,false,false);
            			saveCoFoodItem(Integer.parseInt(resCode), co, true,false,false);
            			saveCatalogApply(Integer.parseInt(resCode),coId);
        			}
        			saveCatalogApply(Integer.parseInt(resCode),coId);
            	});
    		} else {
    			filterKey.stream().forEach(resCode -> {
        			saveCoCategory(Integer.parseInt(resCode), co, true,false,false);
        			saveCoFoodItem(Integer.parseInt(resCode), co, true,false,false);
        			saveCatalogApply(Integer.parseInt(resCode),coId);
            	});
    		}
    	}
		deleteCatalogDataEdit(coId);
	}
	
	private void saveCoCategory(Integer resCode,Co co,boolean isOverride,boolean isSaveRDE,boolean isCopyToRes){
		log.info("Entering 'saveCoCategory(Integer resCode,Co co,boolean isOverride,boolean isDelAll,boolean isSaveRDE,boolean isCopyToRes)' method...");
		List<CoCategory> coCategories = new ArrayList<>();
		if(isOverride) {
			// delete data before update
    		List<CoCategory> coCates = getCoCategoryData(resCode,true);
    		if(coCates != null && !coCates.isEmpty()) {
    			coCates.stream().forEach(coCate ->{
    				coFoodGroupDisplayRepository.deleteByCoCategory(coCate);
    				delAttachment(coCate.getId(), ModuleTypeEnum.CO_CATEGORY.val);
    				coCategoryRepository.delete(coCate);
    			});
    		}
    		// prepare Data
    		coCategories = coCategoryRepository.findByCoIdAndRestaurantCodeIsNull(co.getId());
    		// delete RestaurantDataEdit
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.CO_CATEGORY.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_RES.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FG_DISPLAY.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_OLD.val);
		} else if(isCopyToRes){
			List<RestaurantDataEdit> coCategoryDatas = restaurantDataEditRepository.findByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.CO_CATEGORY.val);
			if(coCategoryDatas != null && !coCategoryDatas.isEmpty()) {
				List<Long> coCategoryIds = coCategoryDatas.stream().map(cc -> Long.parseLong(cc.getValue())).collect(Collectors.toList());
				coCategories = coCategoryRepository.findByIdIn(coCategoryIds);
			}
		} else {
			// prepare Data
			List<CatalogDataEdit> coCategoryDatas = catalogDataEditRepository.findByTypeAndCatalogId(TypeRestaurantDataEditEnum.CO_CATEGORY.val,co.getId());
			if(coCategoryDatas != null && !coCategoryDatas.isEmpty()) {
				List<Long> coCategoryIds = coCategoryDatas.stream().map(cc -> Long.parseLong(cc.getValue())).collect(Collectors.toList());
				coCategories = coCategoryRepository.findByIdIn(coCategoryIds);
			}
			// delete items that have been deleted in the catalog
			List<CatalogDataEdit> deleteDatas = catalogDataEditRepository.findByTypeAndCatalogId(TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val,co.getId());
			if(deleteDatas != null && !deleteDatas.isEmpty()) {
				List<String> codes = deleteDatas.stream().map(c -> c.getValue()).collect(Collectors.toList());
				List<CoCategory> coCates = coCategoryRepository.findByResCodeAndCoIdIsNotNullAndOrderCategoryCodeIn(resCode, codes);
				if(coCates != null && !coCates.isEmpty()) {
					coCates.stream().forEach(coCate ->{
						String orderCode = coCate.getSoCategory().getOrderCategory().getCode();
	    				coFoodGroupDisplayRepository.deleteByCoCategory(coCate);
	    				delAttachment(coCate.getId(), ModuleTypeEnum.CO_CATEGORY.val);
	    				coCategoryRepository.delete(coCate);
	    				//save restaurantDataEdit with idItem = code orderCategory
	    				saveRestaurantDataEdit(orderCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val,resCode);
	    			});
				}
			}
		}
		
		// get list category changed
		List<String> orderCodes = getCateChanged(resCode);
		if(coCategories !=  null && !coCategories.isEmpty()) {
			coCategories.stream().forEach(coCate ->{
				String orderCategoryCode = coCate.getSoCategory().getOrderCategory().getCode();
				if(!orderCodes.contains(orderCategoryCode)) {
					List<SoCategory> soCategories = soCategoryRepository.findByRestaurantCodeAndOrderCategory(resCode, coCate.getSoCategory().getOrderCategory());
					if(soCategories != null && !soCategories.isEmpty()) {
						List<CoFoodGroupDisplay> coFoodGroupDisplays = coCate.getCoFoodGroupDisplays();
	        			Long currentModuleId = coCate.getId();
	        			
	        			CoCategory coCategory = coCategoryRepository.findByorderCategoryCodeAndResCode(orderCategoryCode, resCode);
	        			if(coCategory == null) {
	        				coCategory = new CoCategory();
	        			} else {
	        				coFoodGroupDisplayRepository.deleteByCoCategory(coCategory);
	        			}
	        			coCategory.setCoId(coCate.getId());
	        			coCategory.setNameEn(coCate.getNameEn());
	        			coCategory.setNameVn(coCate.getNameVn());
	        			coCategory.setDescCn(coCate.getDescCn());
	        			coCategory.setDescEn(coCate.getDescEn());
	        			coCategory.setDescJp(coCate.getDescJp());
	        			coCategory.setDescKr(coCate.getDescKr());
	        			coCategory.setDescVn(coCate.getDescVn());
	        			coCategory.setType(coCate.getType());
	        			coCategory.setAlacarteLabel(coCate.getAlacarteLabel());
	        			coCategory.setBuffetLabel(coCate.getBuffetLabel());
	        			coCategory.setDrinksLabel(coCate.getDrinksLabel());
	        			coCategory.setAlacarteLabelEn(coCate.getAlacarteLabelEn());
	        			coCategory.setBuffetLabelEn(coCate.getBuffetLabelEn());
	        			coCategory.setDrinksLabelEn(coCate.getDrinksLabelEn());
	        			coCategory.setPhotoDisplayPosition(coCate.getPhotoDisplayPosition());
	        			coCategory.setRestaurantCode(resCode);
	        			coCategory.setSoCategory(soCategories.get(0));
	        			coCategory.setSrcImg(coCate.getSrcImg());
	        			coCategory.setSrcImgIntros(coCate.getSrcImgIntros());
	        			coCategory.setNote(coCate.getNote());	
	        			coCategory.setAverageAmount(coCate.getAverageAmount());
	        			CoCategory coCategoryNew = coCategoryRepository.save(coCategory);
	        			
	    				//clone coFoodGroupDisplay
	    				if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
	    					coFoodGroupDisplays.stream().forEach(cfgd ->{
	    						CoFoodGroupDisplay coFoodGroupDisplay = new CoFoodGroupDisplay();
	    						coFoodGroupDisplay.setCoCategory(coCategoryNew);
	    						coFoodGroupDisplay.setFoodGroupCode(cfgd.getFoodGroupCode());
	    						coFoodGroupDisplayRepository.save(coFoodGroupDisplay);
	    					});
	    				}
	        			Long newModuleId = coCategoryNew.getId();
	        			if(isSaveRDE) {
	        				restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(orderCategoryCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
	        				// save in RestaurantDataEdit if sync update
	        				saveRestaurantDataEdit(newModuleId.toString(),TypeRestaurantDataEditEnum.CO_CATEGORY.val,resCode);
	        			}
	        			// delete attachement
	        			delAttachment(newModuleId, ModuleTypeEnum.CO_CATEGORY.val);
	        			// clone attachment
	        			saveAttachment(currentModuleId, newModuleId, ModuleTypeEnum.CO_CATEGORY.val);
					}
				}
			});
		}
	}
	
	//clone data coFoodItem
	private void saveCoFoodItem(Integer resCode,Co co,boolean isOverride,boolean isSaveRDE,boolean isCopyToRes){
		List<CoFoodItem> coFoodItemDatas = new ArrayList<>();
		if(isOverride) {
			// delete data before update
			List<CoFoodItem> coFoodItems = getsCoFoodItemData(resCode, true);
    		if(coFoodItems != null && !coFoodItems.isEmpty()) {
    			coFoodItems.stream().forEach(coFoodItem ->{
    				coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
    				relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
					toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
					delAttachment(coFoodItem.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
					coFoodItemRepository.delete(coFoodItem);
    			});
    		};
    		coFoodItemDatas = coFoodItemRepository.findByCoAndRestaurantCodeIsNull(co);
    		// delete Data restaurantDataEdit before sync data
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.CO_FOODITEM.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_OLD.val);
    		restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_RES.val);
		} else if(isCopyToRes){
			List<RestaurantDataEdit> cFIDatas = restaurantDataEditRepository.findByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.CO_FOODITEM.val);
			if(cFIDatas != null && !cFIDatas.isEmpty()) {
				List<Long> coFoodItemIds = cFIDatas.stream().map(cc -> Long.parseLong(cc.getValue())).collect(Collectors.toList());
				coFoodItemDatas = coFoodItemRepository.findByIdIn(coFoodItemIds);
			}
		}else {
			List<CatalogDataEdit> cFIDatas = catalogDataEditRepository.findByTypeAndCatalogId(TypeRestaurantDataEditEnum.CO_FOODITEM.val,co.getId());
			if(cFIDatas != null && !cFIDatas.isEmpty()) {
				List<Long> coFoodItemIds = cFIDatas.stream().map(cc -> Long.parseLong(cc.getValue())).collect(Collectors.toList());
				coFoodItemDatas = coFoodItemRepository.findByIdIn(coFoodItemIds);
			}
			List<CatalogDataEdit> deleteDatas = catalogDataEditRepository.findByTypeAndCatalogId(TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val,co.getId());
			if(deleteDatas != null && !deleteDatas.isEmpty()) {
				List<String> codes = deleteDatas.stream().map(c -> c.getValue()).collect(Collectors.toList());
				List<CoFoodItem> coFoodItems = coFoodItemRepository.findByResCodeAndAndSoIdIsNotNullAndFoodItemCodeIn(resCode, codes);
				if(coFoodItems != null && !coFoodItems.isEmpty()) {
					coFoodItems.stream().forEach(coFoodItem ->{
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
						relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
		    			toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
		        		delAttachment(coFoodItem.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
		        		coFoodItemRepository.delete(coFoodItem);
		        		saveRestaurantDataEdit(coFoodItem.getFoodItem().getCode(), TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val, resCode);
					});
				}
			}
		}
		
		// get list code CoFoodItems changed and deleted
		List<String> foodItemCodes = getCFIChanged(resCode);
		System.out.println("foodItemCodes :" + foodItemCodes);
		if(coFoodItemDatas !=  null && !coFoodItemDatas.isEmpty()) {
			coFoodItemDatas.stream().forEach(c ->{
				String foodItemCode = c.getFoodItem().getCode();
				if(!foodItemCodes.contains(foodItemCode)) {
					List<RelatedFoodItem> relatedFoodItems = relatedFoodItemRepository.findByCoFoodItem(c);
        			List<ToppingFoodItem> toppingFoodItems = toppingFoodItemRepository.findByCoFoodItem(c);
        			List<CoFoodItemModifier> coFoodItemModifiers = coFoodItemModifierRepository.findByCoFoodItem(c);
        			CoFoodItem coFoodItem = coFoodItemRepository.findByRestaurantCodeAndFoodItem_Code(resCode,foodItemCode);
        			if(coFoodItem == null) {
        				coFoodItem = new CoFoodItem();
        			}
        			
        			List<Feature> features = new ArrayList<>(c.getFeatures());
					coFoodItem.setCo(c.getCo());
					coFoodItem.setFoodItem(c.getFoodItem());
					coFoodItem.setFeatures(features);
					coFoodItem.setKalo(c.getKalo());
					coFoodItem.setMaxForKitchen(c.getMaxForKitchen());
					coFoodItem.setMaxPerTransaction(c.getMaxPerTransaction());
					coFoodItem.setSoId(c.getSoId());
					coFoodItem.setRestaurantCode(resCode);
					coFoodItem.setNameVn(c.getNameVn());
					coFoodItem.setNameEn(c.getNameEn());
					coFoodItem.setDescEn(c.getDescEn());
					coFoodItem.setDescVn(c.getDescVn());
					coFoodItem.setPrice(c.getPrice());
					coFoodItem.setCode(c.getCode());
					coFoodItem.setCombo(c.isCombo());
					coFoodItem.setPositionNumber(c.getPositionNumber());
					coFoodItem.setBufferLabel(c.getBufferLabel());
					coFoodItem.setInfoFoodItem(c.getInfoFoodItem());
					coFoodItem.setCoImageSize(c.getCoImageSize());
					coFoodItem.setExtraFoodItem(c.getExtraFoodItem());
					coFoodItem.setViewType(c.getViewType());
					coFoodItem.setKaloGroupId(c.getKaloGroupId());
					coFoodItem.setNumberOfPeopleEat(c.getNumberOfPeopleEat());
					coFoodItem.setHideIcon(c.getHideIcon());
					coFoodItem.setNote(c.getNote());
					coFoodItem.setNoteQuantitative(c.getNoteQuantitative());
					CoFoodItem coFoodItemNew = coFoodItemRepository.save(coFoodItem);
					
					//clone coFoodItemModifier
					if(coFoodItemModifiers != null && !coFoodItemModifiers.isEmpty()) {
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItemNew);
						coFoodItemModifiers.stream().forEach(item ->{
							CoFoodItemModifier coFoodItemModifier = new CoFoodItemModifier();
							coFoodItemModifier.setCoFoodItem(coFoodItemNew);
							coFoodItemModifier.setModifier(item.getModifier());
							coFoodItemModifier.setType(item.getType());
							coFoodItemModifier.setNumberOfChili(item.getNumberOfChili());
							coFoodItemModifierRepository.save(coFoodItemModifier);
							
						});
					}
					
					//clone related foodItem
					if(relatedFoodItems != null && !relatedFoodItems.isEmpty()) {
						relatedFoodItemRepository.deleteByCoFoodItem(coFoodItemNew);
						relatedFoodItems.stream().forEach(r ->{
							
							RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
//								RelatedFoodItem relatedFoodItem = relatedFoodItemRepository.findByCoFoodItemAndFoodItemCodeAndType(coFoodItemNew, r.getFoodItemCode(), r.getType());
//	    						if(relatedFoodItem == null) {
//	    							relatedFoodItem = new RelatedFoodItem();
//	    						}
    						relatedFoodItem.setCoFoodItem(coFoodItemNew);
    						relatedFoodItem.setFoodItemCode(r.getFoodItemCode());
							relatedFoodItem.setFoodItemName(r.getFoodItemName());
    						relatedFoodItem.setType(r.getType());
    						relatedFoodItem.setSapCode(r.getSapCode());
    						relatedFoodItem.setNameDisplay(r.getNameDisplay());
    						relatedFoodItemRepository.save(relatedFoodItem);
    					});
					}
					//clone topping FoodItem
					if(toppingFoodItems != null && !toppingFoodItems.isEmpty()) {
						toppingFoodItemRepository.deleteByCoFoodItem(coFoodItemNew);
						toppingFoodItems.stream().forEach(r ->{
							ToppingFoodItem toppingFoodItem = new ToppingFoodItem();
//								ToppingFoodItem toppingFoodItem = toppingFoodItemRepository.findByCoFoodItemAndFoodItemCode(coFoodItemNew, r.getFoodItemCode());
//	    						if(toppingFoodItem == null) {
//	    							toppingFoodItem = new ToppingFoodItem();
//	    						}
    						toppingFoodItem.setCoFoodItem(coFoodItemNew);
    						toppingFoodItem.setFoodItemCode(r.getFoodItemCode());
    						toppingFoodItem.setFoodItemName(r.getFoodItemName());
    						toppingFoodItem.setModifierCode(r.getModifierCode());
    						toppingFoodItem.setModifierName(r.getModifierName());
    						toppingFoodItem.setSapCode(r.getSapCode());
    						toppingFoodItemRepository.save(toppingFoodItem);
    					});
					}
					
					if(isSaveRDE) {
						restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(foodItemCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
						//save in resDataEdit if sync update
						saveRestaurantDataEdit(coFoodItemNew.getId().toString(), TypeRestaurantDataEditEnum.CO_FOODITEM.val, resCode);
					}
					// delete attachement
        			delAttachment(coFoodItemNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
					// clone attachment
					saveAttachment(c.getId(), coFoodItemNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
				}
			});
		}
	}
	
	//apply data from restaurant
	public void apply(CoDto coDto, boolean isOverride) {
 		log.debug("Entering 'apply(CoDto coDto, boolean isOverride)' method...");
		Long coId = coDto.getId();
		Co co = coRepository.getOne(coId);
		Integer resCode = coDto.getRestaurantCode();
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(resCode);
		if(isOverride) {
			//saveCoCategory(Integer resCode,Co co,boolean isOverride,boolean isSaveRDE,boolean isCopyToRes)
			saveCoCategory(resCode, co, true,false,false);
			saveCoFoodItem(resCode, co, true,false,false);
		} else {
			if(applyToRestaurant != null && applyToRestaurant.getCoId() != null) {
				if(applyToRestaurant.getCoId().equals(coId)) {
					saveCoCategory(resCode, co, false,true,false);
        			saveCoFoodItem(resCode, co, false,true,false);		
    			} else {
    				saveCoCategory(resCode, co, true,false,false);
        			saveCoFoodItem(resCode, co, true,false,false);
    			}
			} else {
				saveCoCategory(resCode, co, true,false,false);
    			saveCoFoodItem(resCode, co, true,false,false);
			}
		}
		saveCatalogApply(resCode,coId);
 	}
	
	// copy data from restaurant to restaurant same brand
	public void copyToRes(CoDto coDto,boolean isOverride) {
		log.debug("Entering 'copyToRes(CoDto coDto,boolean isOverride)' method...");
		Integer restaurantCode = coDto.getRestaurantCode();
		List<CoCategory> coCategories = coCategoryRepository.findByRestaurantCode(restaurantCode);
		List<CoFoodItem> coFoodItems = coFoodItemRepository.findByRestaurantCode(restaurantCode);
		List<Integer> resCodeApplys = coDto.getResCodes();
		
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(restaurantCode);
    	if(applyToRestaurant != null && applyToRestaurant.getCoId() != null && resCodeApplys != null && !resCodeApplys.isEmpty()) {
    		Long coId = applyToRestaurant.getGroupParamId();
    		if(isOverride) {
    			resCodeApplys.stream().forEach(resCode -> {
    				//copyCoCategory(List<CoCategory> coCategories,Integer resCode,boolean isOverride,boolean isSaveRDE)
    				copyCoCategory(coCategories,resCode,true,false);
					copyCoFoodItem(coFoodItems,resCode,true,false);
	    			saveCatalogApply(resCode,coId);
	        	});
			} else {
	    		List<CatalogApplyToRestaurant> applyToRestaurants = catalogApplyToRestaurantRepository.findByCoId(coId);
	    		if(applyToRestaurants != null && !applyToRestaurants.isEmpty()) {
	    			List<Integer> rCodeExistings = applyToRestaurants.stream().map(ap -> ap.getRestaurantCode()).collect(Collectors.toList());
	    			resCodeApplys.stream().forEach(resCode -> {
	        			if(rCodeExistings.contains(resCode)) {
	        				saveCoCategory(resCode, null, false,true,true);
	            			saveCoFoodItem(resCode, null, false,true,true);	
	        			} else {
	        				copyCoCategory(coCategories,resCode,true,true);
    						copyCoFoodItem(coFoodItems,resCode,true,true);		
	        			}
	        			//save catalogApplyToRes
	        			saveCatalogApply(resCode, coId);
	            	});
	    		} else {
	    			resCodeApplys.stream().forEach(resCode -> {
	    				copyCoCategory(coCategories,resCode,true,true);
						copyCoFoodItem(coFoodItems,resCode,true,true);
	        			saveCatalogApply(resCode,coId);
	            	});
	    		}
			}
    	}
	}
	
	private void copyCoCategory(List<CoCategory> coCategories,Integer resCode,boolean isOverride,boolean isSaveRDE){
		log.info("Entering 'copyCoCategory(List<CoCategory> coCategories,Integer resCode,boolean isOverride,boolean isSaveRDE)' method...");
		
		// delete before copy data
		if(isOverride) {
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.CO_CATEGORY.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FG_DISPLAY.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY_OLD.val);
			// delete data before update
			List<CoCategory> coCates = getCoCategoryData(resCode,isOverride);
			if(coCates != null && !coCates.isEmpty()) {
				coCates.stream().forEach(coCate ->{
					coFoodGroupDisplayRepository.deleteByCoCategory(coCate);
					delAttachment(coCate.getId(), ModuleTypeEnum.CO_CATEGORY.val);
					coCategoryRepository.delete(coCate);
				});
			}
		}
		
		// get list category changed
		List<String> orderCodes = getCateChanged(resCode);
		if(coCategories !=  null && !coCategories.isEmpty()) {
			coCategories.stream().forEach(coCate ->{
				String orderCategoryCode = coCate.getSoCategory().getOrderCategory().getCode();
				if(!orderCodes.contains(orderCategoryCode)) {
					List<SoCategory> soCategories = soCategoryRepository.findByRestaurantCodeAndOrderCategory(resCode, coCate.getSoCategory().getOrderCategory());
					if(soCategories != null && !soCategories.isEmpty()) {
						List<CoFoodGroupDisplay> coFoodGroupDisplays = coCate.getCoFoodGroupDisplays();
	        			Long currentModuleId = coCate.getId();
	        			
	        			CoCategory coCategory = coCategoryRepository.findByorderCategoryCodeAndResCode(orderCategoryCode, resCode);
	        			if(coCategory == null) {
	        				coCategory = new CoCategory();
	        			}
	        			coCategory.setCoId(coCate.getCoId());
	        			coCategory.setNameEn(coCate.getNameEn());
	        			coCategory.setNameVn(coCate.getNameVn());
	        			coCategory.setDescCn(coCate.getDescCn());
	        			coCategory.setDescEn(coCate.getDescEn());
	        			coCategory.setDescJp(coCate.getDescJp());
	        			coCategory.setDescKr(coCate.getDescKr());
	        			coCategory.setDescVn(coCate.getDescVn());
	        			coCategory.setType(coCate.getType());
	        			coCategory.setAlacarteLabel(coCate.getAlacarteLabel());
	        			coCategory.setBuffetLabel(coCate.getBuffetLabel());
	        			coCategory.setDrinksLabel(coCate.getDrinksLabel());
	        			coCategory.setAlacarteLabelEn(coCate.getAlacarteLabelEn());
	        			coCategory.setBuffetLabelEn(coCate.getBuffetLabelEn());
	        			coCategory.setDrinksLabelEn(coCate.getDrinksLabelEn());
	        			coCategory.setPhotoDisplayPosition(coCate.getPhotoDisplayPosition());
	        			coCategory.setRestaurantCode(resCode);
	        			coCategory.setSoCategory(soCategories.get(0));
	        			coCategory.setSrcImg(coCate.getSrcImg());
	        			coCategory.setSrcImgIntros(coCate.getSrcImgIntros());
	        			coCategory.setNote(coCate.getNote());	
	        			coCategory.setAverageAmount(coCate.getAverageAmount());
	        			CoCategory coCategoryNew = coCategoryRepository.save(coCategory);
	        			
	    				//clone coFoodGroupDisplay
	    				if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
	    					coFoodGroupDisplays.stream().forEach(cfgd ->{
	    						CoFoodGroupDisplay coFoodGroupDisplay = new CoFoodGroupDisplay();
	    						coFoodGroupDisplay.setCoCategory(coCategoryNew);
	    						coFoodGroupDisplay.setFoodGroupCode(cfgd.getFoodGroupCode());
	    						coFoodGroupDisplayRepository.save(coFoodGroupDisplay);
	    					});
	    				}
	        			Long newModuleId = coCategoryNew.getId();
	        			if(isSaveRDE) {
	        				restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(orderCategoryCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
	        				// save in RestaurantDataEdit if sync update
	        				saveRestaurantDataEdit(newModuleId.toString(),TypeRestaurantDataEditEnum.CO_CATEGORY.val,resCode);
	        			}
	        			// delete attachement
	        			delAttachment(newModuleId, ModuleTypeEnum.CO_CATEGORY.val);
	        			saveAttachment(currentModuleId, newModuleId, ModuleTypeEnum.CO_CATEGORY.val);
					}
				}
			});
		}
	}	
	
	private void copyCoFoodItem(List<CoFoodItem> coFoodItemDatas,Integer resCode,boolean isOverride,boolean isSaveRDE){
		log.info("Entering 'copyCoFoodItem(coFoodItemDatas,resCode,isOverride,isSaveRDE)' method...");
		
		if(isOverride) {
			// delete data before update
			List<CoFoodItem> coFoodItems = getsCoFoodItemData(resCode, isOverride);
			if(coFoodItems != null && !coFoodItems.isEmpty()) {
				coFoodItems.stream().forEach(coFoodItem ->{
					coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
					relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
					toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
					delAttachment(coFoodItem.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
					coFoodItemRepository.delete(coFoodItem);
				});
			}
			// delete resDataEdit before copy data
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.CO_FOODITEM.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
			restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode,TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_OLD.val);
		}
		// get list code CoFoodItems changed and deleted
		List<String> foodItemCodes = getCFIChanged(resCode);
		//clone data
		if(coFoodItemDatas !=  null && !coFoodItemDatas.isEmpty()) {
			coFoodItemDatas.stream().forEach(c ->{
				String foodItemCode = c.getFoodItem().getCode();
				if(!foodItemCodes.contains(foodItemCode)) {
					List<RelatedFoodItem> relatedFoodItems = relatedFoodItemRepository.findByCoFoodItem(c);
        			List<ToppingFoodItem> toppingFoodItems = toppingFoodItemRepository.findByCoFoodItem(c);
        			List<CoFoodItemModifier> coFoodItemModifiers = coFoodItemModifierRepository.findByCoFoodItem(c);
        			CoFoodItem coFoodItem = coFoodItemRepository.findByRestaurantCodeAndFoodItem_Code(resCode,foodItemCode);
        			if(coFoodItem == null) {
        				coFoodItem = new CoFoodItem();
        			} 
        			List<Feature> features = new ArrayList<>(c.getFeatures());
					coFoodItem.setCo(c.getCo());
					coFoodItem.setFoodItem(c.getFoodItem());
					coFoodItem.setFeatures(features);
					coFoodItem.setKalo(c.getKalo());
					coFoodItem.setMaxForKitchen(c.getMaxForKitchen());
					coFoodItem.setMaxPerTransaction(c.getMaxPerTransaction());
					coFoodItem.setSoId(c.getSoId());
					coFoodItem.setRestaurantCode(resCode);
					coFoodItem.setNameVn(c.getNameVn());
					coFoodItem.setNameEn(c.getNameEn());
					coFoodItem.setDescEn(c.getDescEn());
					coFoodItem.setDescVn(c.getDescVn());
					coFoodItem.setPrice(c.getPrice());
					coFoodItem.setCode(c.getCode());
					coFoodItem.setCombo(c.isCombo());
					coFoodItem.setPositionNumber(c.getPositionNumber());
					coFoodItem.setBufferLabel(c.getBufferLabel());
					coFoodItem.setInfoFoodItem(c.getInfoFoodItem());
					coFoodItem.setCoImageSize(c.getCoImageSize());
					coFoodItem.setExtraFoodItem(c.getExtraFoodItem());
					coFoodItem.setViewType(c.getViewType());
					coFoodItem.setKaloGroupId(c.getKaloGroupId());
					coFoodItem.setNumberOfPeopleEat(c.getNumberOfPeopleEat());
					coFoodItem.setHideIcon(c.getHideIcon());
					coFoodItem.setNote(c.getNote());
					coFoodItem.setNoteQuantitative(c.getNoteQuantitative());
					CoFoodItem coFoodItemNew = coFoodItemRepository.save(coFoodItem);
					//clone coFoodItemModifier
					if(coFoodItemModifiers != null && !coFoodItemModifiers.isEmpty()) {
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItemNew);
						coFoodItemModifiers.stream().forEach(item ->{
							CoFoodItemModifier coFoodItemModifier = new CoFoodItemModifier();
							coFoodItemModifier.setCoFoodItem(coFoodItemNew);
							coFoodItemModifier.setModifier(item.getModifier());
							coFoodItemModifier.setType(item.getType());
							coFoodItemModifier.setNumberOfChili(item.getNumberOfChili());
							coFoodItemModifierRepository.save(coFoodItemModifier);
							
						});
					}
					//clone related foodItem
					if(relatedFoodItems != null && !relatedFoodItems.isEmpty()) {
						relatedFoodItems.stream().forEach(r ->{
    						RelatedFoodItem relatedFoodItem = relatedFoodItemRepository.findByCoFoodItemAndFoodItemCodeAndType(coFoodItemNew, r.getFoodItemCode(), r.getType());
    						if(relatedFoodItem == null) {
    							relatedFoodItem = new RelatedFoodItem();
    						}
    						relatedFoodItem.setCoFoodItem(coFoodItemNew);
    						relatedFoodItem.setFoodItemCode(r.getFoodItemCode());
							relatedFoodItem.setFoodItemName(r.getFoodItemName());
    						relatedFoodItem.setType(r.getType());
    						relatedFoodItem.setSapCode(r.getSapCode());
    						relatedFoodItem.setNameDisplay(r.getNameDisplay());
    						relatedFoodItemRepository.save(relatedFoodItem);
    					});
					}
					//clone topping FoodItem
					if(toppingFoodItems != null && !toppingFoodItems.isEmpty()) {
						toppingFoodItemRepository.deleteByCoFoodItem(c);
						toppingFoodItems.stream().forEach(r ->{
    						ToppingFoodItem toppingFoodItem = toppingFoodItemRepository.findByCoFoodItemAndFoodItemCode(coFoodItemNew, r.getFoodItemCode());
    						if(toppingFoodItem == null) {
    							toppingFoodItem = new ToppingFoodItem();
    						}
    						toppingFoodItem.setCoFoodItem(coFoodItemNew);
    						toppingFoodItem.setFoodItemCode(r.getFoodItemCode());
    						toppingFoodItem.setFoodItemName(r.getFoodItemName());
    						toppingFoodItem.setModifierCode(r.getModifierCode());
    						toppingFoodItem.setModifierName(r.getModifierName());
    						toppingFoodItem.setSapCode(r.getSapCode());
    						toppingFoodItemRepository.save(toppingFoodItem);
    					});
					}
					
					if(isSaveRDE) {
						restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(foodItemCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
						//save in resDataEdit if sync update
						saveRestaurantDataEdit(coFoodItemNew.getId().toString(), TypeRestaurantDataEditEnum.CO_FOODITEM.val, resCode);
					}
					// delete attachment 
					delAttachment(coFoodItemNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
					// clone attachment
					saveAttachment(c.getId(), coFoodItemNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
				}
			});
		}
	}
	
	/*
	 * Clone dữ liệu liên quan đến thông tin ảnh
	 */
	private void cloneAttachment(Long idExisting, Long newId, String moduleType) {
		log.debug("PROCESS FUNCTION: CLONE ATTACHMENT, ID_EXISTING: {}, NEW_ID: {}", idExisting, newId);
		try {
			List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleType(idExisting, moduleType);
			if(!CollectionUtils.isEmpty(attachments)) {
				attachments.stream().forEach(item ->{
					AttachmentDto attachmentDto = new AttachmentDto();
					BeanUtils.copyProperties(item, attachmentDto);
					attachmentDto.setId(null);
					attachmentDto.setModuleId(newId);
					Attachment attachment = Optional.ofNullable(attachmentDto).map(attachmentMapper::dtoToEntity).orElse(null);
					attachmentRepository.save(attachment);
				});
			}
		} catch (Exception e) {
			log.error("ERROR PROCESS FUNCTION: CLONE ATTACHMENT EXCEPTION: {}", e);
		}
	}
	
	private void savedConfigQrOrder(Integer restaurantCode, Boolean isOverride, ConfigQrOrderDto configQrOrderExistingDto) {
		log.info("process 'savedConfigQrOrder resCode: {}", restaurantCode);
		if(isOverride) {
			RestaurantDto restaurantDto = Optional.of(restaurantRepository.findByCode(restaurantCode)).map(restaurantMapper::entityToDto).orElse(null);
			if(restaurantDto != null && configQrOrderExistingDto != null) {
				ConfigQrOrderDto configQrOrderDto = new ConfigQrOrderDto();
				BeanUtils.copyProperties(configQrOrderExistingDto, configQrOrderDto);
				configQrOrderDto.setId(null);
				configQrOrderDto.setIp(restaurantDto.getIp());
				configQrOrderDto.setPort(restaurantDto.getPort());
				configQrOrderDto.setRestaurantCode(String.valueOf(restaurantCode));
				ConfigQrOrder configQrOrder = Optional.ofNullable(configQrOrderDto).map(configQrOrderMapper::dtoToEntity).orElse(null);
				ConfigQrOrderDto savedConfigQrOrderDto = Optional.ofNullable(configQrOrderRepository.save(configQrOrder)).map(configQrOrderMapper::entityToDto).orElse(null);
				// lưu thông tin ảnh
				cloneAttachment(configQrOrderExistingDto.getId(), savedConfigQrOrderDto.getId(), ModuleTypeEnum.CONFIG_QR_ORDER.val);
			}
		} else {
			ConfigQrOrder configQrOrderExistingInRestaurant = configQrOrderRepository.findByRestaurantCode(String.valueOf(restaurantCode)); 
			RestaurantDto restaurantDto = Optional.of(restaurantRepository.findByCode(restaurantCode)).map(restaurantMapper::entityToDto).orElse(null);
			if(restaurantDto != null && configQrOrderExistingDto != null) {
				// Trường hợp đã có dữ liệu liên quan đến CONFIG_QR_ORDER thì check điều kiện CO_ID == null để xem bản ghi đã bị nhà hàng chỉnh sửa chưa
				if(configQrOrderExistingInRestaurant != null) {
					// Trường hợp phía nhà hàng đã sửa thông tin ảnh thì không cập nhật - CO_ID == null có nghĩa là thông tin bảng đã được cập nhật
					if(configQrOrderExistingInRestaurant.getCoId() != null) {
						// xóa dữ liệu trước khi tạo mới
						attachmentRepository.deleteByModuleIdAndModuleType(configQrOrderExistingInRestaurant.getId(), ModuleTypeEnum.CONFIG_QR_ORDER.val);
						configQrOrderRepository.delete(configQrOrderExistingInRestaurant);
						
						ConfigQrOrderDto configQrOrderDto = new ConfigQrOrderDto();
						BeanUtils.copyProperties(configQrOrderExistingDto, configQrOrderDto);
						configQrOrderDto.setId(null);
						configQrOrderDto.setIp(restaurantDto.getIp());
						configQrOrderDto.setPort(restaurantDto.getPort());
						configQrOrderDto.setRestaurantCode(String.valueOf(restaurantCode));
						ConfigQrOrder configQrOrder = Optional.ofNullable(configQrOrderDto).map(configQrOrderMapper::dtoToEntity).orElse(null);
						ConfigQrOrderDto savedConfigQrOrderDto = Optional.ofNullable(configQrOrderRepository.save(configQrOrder)).map(configQrOrderMapper::entityToDto).orElse(null);
						// lưu thông tin ảnhêm 
						cloneAttachment(configQrOrderExistingDto.getId(), savedConfigQrOrderDto.getId(), ModuleTypeEnum.CONFIG_QR_ORDER.val);
					}
				} else {
					ConfigQrOrderDto configQrOrderDto = new ConfigQrOrderDto();
					BeanUtils.copyProperties(configQrOrderExistingDto, configQrOrderDto);
					configQrOrderDto.setId(null);
					configQrOrderDto.setIp(restaurantDto.getIp());
					configQrOrderDto.setPort(restaurantDto.getPort());
					configQrOrderDto.setRestaurantCode(String.valueOf(restaurantCode));
					ConfigQrOrder configQrOrder = Optional.ofNullable(configQrOrderDto).map(configQrOrderMapper::dtoToEntity).orElse(null);
					ConfigQrOrderDto savedConfigQrOrderDto = Optional.ofNullable(configQrOrderRepository.save(configQrOrder)).map(configQrOrderMapper::entityToDto).orElse(null);
					// lưu thông tin ảnh
					cloneAttachment(configQrOrderExistingDto.getId(), savedConfigQrOrderDto.getId(), ModuleTypeEnum.CONFIG_QR_ORDER.val);
				}
			}
		}
		
	}
}