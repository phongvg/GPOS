package com.gg.gpos.menu.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.SoCategory;
import com.gg.gpos.menu.entity.SoCategoryFoodGroup;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface SoCategoryFoodGroupRepository extends JpaRepository<SoCategoryFoodGroup, Long>, JpaSpecificationExecutor<SoCategoryFoodGroup> {
	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.id=:scId and scfg.restaurantCode is null")
	List<SoCategoryFoodGroup> findBySoCategoryAndRestaurantCodeIsNull(@Param("scId") Long scId);
	
	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc where sc.id=:scId and scfg.restaurantCode=:restaurantCode")
	List<SoCategoryFoodGroup> findBySoCategoryAndRestaurantCode(@Param("scId") Long scId, Integer restaurantCode);
	
	@Query("from SoCategoryFoodGroup scfg inner join scfg.foodGroup fg inner join scfg.soCategory sc where sc.id=:scId and scfg.restaurantCode=:restaurantCode and fg.code =:code")
	List<SoCategoryFoodGroup> findFoodGroupAndSoCategoryAndRestaurantCode(@Param("code") String fgCode, @Param("scId") Long scId,@Param("restaurantCode") Integer restaurantCode);

	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.restaurantCode = :restaurantCode and scfg.restaurantCode = :restaurantCode and fg.restaurantCode=:restaurantCode")
	List<SoCategoryFoodGroup> findByRestaurantCode(Integer restaurantCode);
	
	/*@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.so.id = :soId and sc.restaurantCode = :restaurantCode and scfg.restaurantCode = :restaurantCode and fg.restaurantCode=:restaurantCode")
	List<SoCategoryFoodGroup> findBySoIdAndRestaurantCode(Long soId, Integer restaurantCode);*/
	
	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.so.id is not null and sc.restaurantCode = :restaurantCode and scfg.restaurantCode = :restaurantCode and fg.restaurantCode=:restaurantCode")
	List<SoCategoryFoodGroup> findBySoIdIsNotNullAndRestaurantCode(Integer restaurantCode);
	
	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.id = :soCategoryId and fg.id = :foodGroupId")
	SoCategoryFoodGroup findBySoCategoryAndFoodGroup(Long soCategoryId, Long foodGroupId);

	SoCategoryFoodGroup findBySoCategoryAndFoodGroupAndRestaurantCode(SoCategory soCategory, FoodGroup foodGroup, Integer restaurantCode);
	SoCategoryFoodGroup findBySoCategoryAndFoodGroupAndRestaurantCodeIsNull(SoCategory soCategory, FoodGroup foodGroup);
	
	void deleteByFoodGroupAndSoCategoryAndRestaurantCode(FoodGroup foodGroup, SoCategory soCategory, Integer restaurantCode);
	void deleteByFoodGroupAndSoCategoryAndRestaurantCodeIsNull(FoodGroup foodGroup, SoCategory soCategory);
	
	void deleteBySoCategoryAndRestaurantCode(SoCategory soCategory, Integer restaurantCode);
	
	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.id = :soCategoryId and fg.code = :foodGroupCode")
	SoCategoryFoodGroup findBySoCategoryAndFoodGroupCode(Long soCategoryId, String foodGroupCode);
	
	@Query("from SoCategoryFoodGroup scfg join fetch scfg.soCategory sc join fetch scfg.foodGroup fg where sc.id = :soCategoryId and fg.code = :foodGroupCode and scfg.restaurantCode = :restaurantCode")
	SoCategoryFoodGroup findBySoCategoryAndFoodGroupCodeAndResCode(Long soCategoryId, String foodGroupCode, Integer restaurantCode);
	
	void deleteByIdIn(List<Long> ids);
	
	@Query("from SoCategoryFoodGroup scfg where scfg.restaurantCode = :restaurantCode")
	List<SoCategoryFoodGroup> findByResCode(Integer restaurantCode);
	
	void deleteByRestaurantCode(Integer restaurantCode);
	
	@Query("select scfg.id from SoCategoryFoodGroup scfg where scfg.foodGroup.id not in (select f.id from FoodGroup f)")
	List<Long> findSoCategoryFoodGroupIds();
}