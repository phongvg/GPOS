package com.gg.gpos.menu.manager;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.common.json.ResponseData;
import com.gg.gpos.menu.dto.CoDto;
import com.gg.gpos.menu.dto.ConfigQrOrderDto;
import com.gg.gpos.menu.entity.CatalogApplyToRestaurant;
import com.gg.gpos.menu.entity.CatalogDataEdit;
import com.gg.gpos.menu.entity.Co;
import com.gg.gpos.menu.entity.CoCategory;
import com.gg.gpos.menu.entity.CoFoodGroupDisplay;
import com.gg.gpos.menu.entity.CoFoodItem;
import com.gg.gpos.menu.entity.CoFoodItemModifier;
import com.gg.gpos.menu.entity.ConfigQrOrder;
import com.gg.gpos.menu.entity.Feature;
import com.gg.gpos.menu.entity.RelatedFoodItem;
import com.gg.gpos.menu.entity.RestaurantDataEdit;
import com.gg.gpos.menu.entity.SoCategory;
import com.gg.gpos.menu.entity.ToppingFoodItem;
import com.gg.gpos.menu.mapper.CoMapper;
import com.gg.gpos.menu.mapper.ConfigQrOrderMapper;
import com.gg.gpos.menu.repository.CatalogApplyToRestaurantRepository;
import com.gg.gpos.menu.repository.CatalogDataEditRepository;
import com.gg.gpos.menu.repository.CoCategoryRepository;
import com.gg.gpos.menu.repository.CoFoodGroupDisplayRepository;
import com.gg.gpos.menu.repository.CoFoodItemModifierRepository;
import com.gg.gpos.menu.repository.CoFoodItemRepository;
import com.gg.gpos.menu.repository.CoRepository;
import com.gg.gpos.menu.repository.ConfigQrOrderRepository;
import com.gg.gpos.menu.repository.RelatedFoodItemRepository;
import com.gg.gpos.menu.repository.RestaurantDataEditRepository;
import com.gg.gpos.menu.repository.SoCategoryRepository;
import com.gg.gpos.menu.repository.ToppingFoodItemRepository;
import com.gg.gpos.menu.specification.CoSpecification;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.entity.Attachment;
import com.gg.gpos.reference.mapper.AttachmentMapper;
import com.gg.gpos.reference.repository.AttachmentRepository;
import com.gg.gpos.res.dto.RestaurantDto;
import com.gg.gpos.res.mapper.RestaurantMapper;
import com.gg.gpos.res.repository.RestaurantRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class CoManager {
	@Autowired
	private CoRepository coRepository;
	@Autowired
	private CoMapper coMapper;
	@Autowired
	private CoSpecification coSpecification;
	@Autowired
	private CoFoodItemRepository coFoodItemRepository;
	@Autowired
	private RelatedFoodItemRepository relatedFoodItemRepository;
	@Autowired
	private SoCategoryRepository soCategoryRepository;
	@Autowired
	private CoCategoryRepository coCategoryRepository;
	@Autowired
	private CoFoodGroupDisplayRepository coFoodGroupDisplayRepository;
	@Autowired
	private ToppingFoodItemRepository toppingFoodItemRepository;
	@Autowired
	private CatalogApplyToRestaurantRepository catalogApplyToRestaurantRepository;
	@Autowired
	private CatalogDataEditRepository catalogDataEditRepository;
	@Autowired
	private RestaurantDataEditRepository restaurantDataEditRepository;
	@Autowired
	private AttachmentRepository attachmentRepository;
	@Autowired
	private CoFoodItemModifierRepository coFoodItemModifierRepository;
	@Autowired
	private AttachmentMapper attachmentMapper;

	public CoDto get(Long id) {
		return coRepository.findById(id).map(coMapper::entityToDto).orElse(null);
	}
	
	public List<CoDto> gets() {
		return coRepository.findAll().stream().map(coMapper::entityToDto).collect(Collectors.toList());
	}
	
	public CoDto saveAfterChangeCatalog(Long id) {
		log.debug("PROCESS: SAVE CO AFTER CHANGE INFO DATA CATALOG, CO_ID: {}", id);
		Co co = coRepository.findById(id).get();
		if(co != null) {
			co.setModifiedDate(LocalDateTime.now());
			return Optional.ofNullable(coRepository.save(co)).map(coMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
		
	}
	
	public List<CoDto> getsByStatusAndCoFoodItemNotNull(Integer rCode,Long soId){
		List<CoDto> coDtos = new ArrayList<>();
		if(soId != null) {
			coDtos = coRepository.findByStatusAndCoFoodItemNotNull(soId).stream().map(coMapper::entityToDto).collect(Collectors.toList());
			return coDtos;
		}else {
			return coDtos;
		}
	}
	
	public CoDto save(CoDto coDto) {
		Co co = Optional.ofNullable(coDto).map(coMapper::dtoToEntity).orElse(null);
		if (co != null) {
			if(co.getId() != null && !co.isStatus()) {
				offCatalog(co);
			}
			return Optional.ofNullable(coRepository.save(co)).map(coMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<CoDto> gets(CoDto criteria){
		log.debug("PROCESS FUCNTION: GETS PAGE CO_DTO, CO_DTO: {}", criteria);
		Page<Co> page = coRepository.findAll(coSpecification.filter(criteria), PageRequest.of(criteria.getPage(), criteria.getSize(), Sort.by(Sort.Direction.DESC, "modifiedDate")));
		return new PageImpl<>(page.getContent().stream().map(coMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()),page.getTotalElements());
	} 
	
	public ResponseData checkSoBeforApply(String selectedRestaurantCodes,Long coId) {
		log.debug("Entering 'checkApplyToRes' method...");
		Co co = coRepository.getOne(coId);
		Long soId = co.getSoId();
		ResponseData res = new ResponseData();
		List<Integer> resCodes = new ArrayList<>();
		// check xem nhà hàng đã áp dụng danh mục So chưa
		Set<String> keys = StringUtils.commaDelimitedListToSet(selectedRestaurantCodes);
    	List<String> filterKey = keys.stream().filter(key -> {
    		return !key.contains(SymbolEnum.UNDERSCORE.val);
    	}).collect(Collectors.toList());
    	filterKey.stream().forEach(rCode ->{
    		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCodeAndSoId(Integer.parseInt(rCode),soId);
    		if(applyToRestaurant == null) {
    			resCodes.add(Integer.parseInt(rCode));
    		}
    	});
		if (!resCodes.isEmpty()) {
			res.setData(resCodes);
			res.setResult(true);
			res.setSize(resCodes.size());
		} else {
			res.setResult(false);
		}
		return res;
	}
	
	public ResponseData checkSoBeforCopy(String selectedRestaurantCodes,Long coId) {
		log.debug("Entering 'checkApplyToRes' method...");
		Co co = coRepository.getOne(coId);
		ResponseData res = new ResponseData();
		List<Integer> resCodes = new ArrayList<>();
		Set<String> keys = StringUtils.commaDelimitedListToSet(selectedRestaurantCodes);
		List<String> filterKey = keys.stream().filter(key -> {
			return !key.contains(SymbolEnum.COMMA.val);
		}).collect(Collectors.toList());
		filterKey.stream().forEach(rCode -> {
			Long soId = soCategoryRepository.findSoIdByRestaurantCode(Integer.parseInt(rCode));
			if (soId == null || !soId.equals(co.getSoId())) {
				resCodes.add(Integer.parseInt(rCode));
			}
		});
		if (!resCodes.isEmpty()) {
			res.setData(resCodes);
			res.setResult(true);
			res.setSize(resCodes.size());
		} else {
			res.setResult(false);
		}
		return res;
	}
	private void saveAttachment(Long currentModuleId, Long newModuleId, String moduleType) {
		List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleType(currentModuleId, moduleType);
		if(attachments != null && !attachments.isEmpty()) {
			attachments.stream().forEach(item ->{
				Attachment attachment = new Attachment();
				attachment.setModuleId(newModuleId);
				attachment.setModuleType(moduleType);
				attachment.setFunctionType(item.getFunctionType());
				attachment.setName(item.getName());
				attachment.setUrl(item.getUrl());
				attachment.setAbsolutePath(item.getAbsolutePath());
				attachment.setFileName(item.getFileName());
				attachment.setFileType(item.getFileType());
				attachment.setVersion(item.getVersion());
				attachmentRepository.save(attachment);
			});
		}
	}

	private void saveRestaurantDataEdit(String value, String type,Integer resCode){
		restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(value, resCode, type);
		RestaurantDataEdit restaurantDataEdit = restaurantDataEditRepository.findByValueAndRestaurantCodeAndType(value, resCode, type);
		if(restaurantDataEdit == null) {
			restaurantDataEdit = new RestaurantDataEdit();
		}
		restaurantDataEdit.setValue(value);
		restaurantDataEdit.setType(type);
		restaurantDataEdit.setRestaurantCode(resCode);
		restaurantDataEditRepository.save(restaurantDataEdit);
	}

	
	//Delete all data CoCategory and CoFoodItem when Off-Co
	public void offCatalog(Co co) {
		log.info("Entering 'offCatalog(Co co)' method...");
		log.debug("Params: coId: " + co.getId());
		
		List<CatalogApplyToRestaurant> applyToRestaurants = catalogApplyToRestaurantRepository.findByCoId(co.getId());
		if(applyToRestaurants != null && !applyToRestaurants.isEmpty()) {
			applyToRestaurants.stream().forEach(item ->{
				Integer resCode = item.getRestaurantCode();
				List<CoCategory> coCategories = coCategoryRepository.findByRestaurantCode(resCode);
				if(coCategories != null && !coCategories.isEmpty()) {
					coCategories.stream().forEach(coCategory ->{
						coFoodGroupDisplayRepository.deleteByCoCategory(coCategory);
						delAttachment(coCategory.getId(), ModuleTypeEnum.CO_CATEGORY.val);
						coCategoryRepository.delete(coCategory);
					});
				}
				List<CoFoodItem> coFoodItems = coFoodItemRepository.findByRestaurantCode(resCode);
				if(coFoodItems != null && !coFoodItems.isEmpty()) {
					coFoodItems.stream().forEach(coFoodItem ->{
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
						relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
						toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
						delAttachment(coFoodItem.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
						coFoodItemRepository.delete(coFoodItem);
					});
				}
				// delete data restaurantDataEdit by resCode\
				restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.CO_CATEGORY.val);
				restaurantDataEditRepository.deleteByRestaurantCodeAndType(resCode, TypeRestaurantDataEditEnum.CO_FOODITEM.val);
				// set coId null when off
				item.setCoId(null);
				catalogApplyToRestaurantRepository.save(item);
			});
			// delete data catalogDataEdit by resCode
			catalogDataEditRepository.deleteByCatalogIdAndType(co.getId(), TypeRestaurantDataEditEnum.CO_CATEGORY.val);
			catalogDataEditRepository.deleteByCatalogIdAndType(co.getId(), TypeRestaurantDataEditEnum.DELETE_CO_FG_DISPLAY.val);
			catalogDataEditRepository.deleteByCatalogIdAndType(co.getId(), TypeRestaurantDataEditEnum.CO_FOODITEM.val);
		}
	}
	
	private void delAttachment(Long moduleId,String moduleType) {
		log.info("Entering 'delAttachment(Long moduleId,String moduleType)' method...");
		log.debug("Params: moduleId: " + moduleId + ", moduleType: " + moduleType);
		List<Attachment> attachments = attachmentRepository.findByModuleIdAndModuleType(moduleId, moduleType);
		if(attachments != null && !attachments.isEmpty()) {
			attachments.stream().forEach(attachment ->{
				attachment.setModuleId(null);
				attachment.setFunctionType(null);
				attachment.setModuleType(ModuleTypeEnum.DEL_ATTACHMENT.val);
				attachment.setRestaurantCode(null);
				attachment.setSyncStatus(null);
				attachmentRepository.save(attachment);
			});
		}
	}
	
	public void resetCoCateCategories(Integer resCode) {
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(resCode);
		List<CoCategory> coCateInRes = coCategoryRepository.findByRestaurantCodeAndCoIdIsNull(resCode);
		if(coCateInRes != null && !coCateInRes.isEmpty() && applyToRestaurant != null && applyToRestaurant.getCoId() != null) {
			coCateInRes.stream().forEach(coCate ->{
				String orderCategoryCode = coCate.getSoCategory().getOrderCategory().getCode();
				CoCategory coCateInCataLog = coCategoryRepository.findByorderCategoryCodeAndCoId(orderCategoryCode, applyToRestaurant.getCoId());
				if(coCateInCataLog != null) {
					List<CoFoodGroupDisplay> coFoodGroupDisplays = coCateInCataLog.getCoFoodGroupDisplays();
					
					CoCategory newCoCate = new CoCategory();
					newCoCate.setCoId(coCateInCataLog.getCoId());
					newCoCate.setNameEn(coCateInCataLog.getNameEn());
					newCoCate.setNameVn(coCateInCataLog.getNameVn());
					newCoCate.setDescCn(coCateInCataLog.getDescCn());
					newCoCate.setDescEn(coCateInCataLog.getDescEn());
					newCoCate.setDescJp(coCateInCataLog.getDescJp());
					newCoCate.setDescKr(coCateInCataLog.getDescKr());
					newCoCate.setDescVn(coCateInCataLog.getDescVn());
					newCoCate.setType(coCateInCataLog.getType());
					newCoCate.setAlacarteLabel(coCateInCataLog.getAlacarteLabel());
					newCoCate.setBuffetLabel(coCateInCataLog.getBuffetLabel());
					newCoCate.setDrinksLabel(coCateInCataLog.getDrinksLabel());
					newCoCate.setAlacarteLabelEn(coCateInCataLog.getAlacarteLabelEn());
					newCoCate.setBuffetLabelEn(coCateInCataLog.getBuffetLabelEn());
					newCoCate.setDrinksLabelEn(coCateInCataLog.getDrinksLabelEn());
					newCoCate.setPhotoDisplayPosition(coCateInCataLog.getPhotoDisplayPosition());
					newCoCate.setRestaurantCode(resCode);
					newCoCate.setSoCategory(coCateInCataLog.getSoCategory());
					newCoCate.setSrcImg(coCateInCataLog.getSrcImg());
					newCoCate.setSrcImgIntros(coCateInCataLog.getSrcImgIntros());
					newCoCate.setNote(coCateInCataLog.getNote());	
					newCoCate.setAverageAmount(coCateInCataLog.getAverageAmount());
	    			CoCategory coCategoryNew = coCategoryRepository.save(newCoCate);
	    			
					//clone coFoodGroupDisplay
					if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
						coFoodGroupDisplays.stream().forEach(cfgd ->{
							CoFoodGroupDisplay coFoodGroupDisplay = new CoFoodGroupDisplay();
							coFoodGroupDisplay.setCoCategory(coCategoryNew);
							coFoodGroupDisplay.setFoodGroupCode(cfgd.getFoodGroupCode());
							coFoodGroupDisplayRepository.save(coFoodGroupDisplay);
						});
					}
	    			Long newModuleId = coCategoryNew.getId();
	    			// clone attachement
	    			saveAttachment(coCateInCataLog.getId(), newModuleId, ModuleTypeEnum.CO_CATEGORY.val);
	    			//
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(orderCategoryCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_CATEGORY.val);
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(coCate.getId().toString(), resCode, TypeRestaurantDataEditEnum.CO_CATEGORY.val);
					// save in RestaurantDataEdit if sync update
					saveRestaurantDataEdit(newModuleId.toString(),TypeRestaurantDataEditEnum.CO_CATEGORY.val,resCode);
					
					// delete data old
					coFoodGroupDisplayRepository.deleteByCoCategory(coCate);
					delAttachment(coCate.getId(), ModuleTypeEnum.CO_CATEGORY.val);
					coCategoryRepository.delete(coCate);
				}
			});
		}
	}
	
	public void resetCoFoodItems(Integer resCode) {
		CatalogApplyToRestaurant applyToRestaurant = catalogApplyToRestaurantRepository.findByRestaurantCode(resCode);
		List<CoFoodItem> coFoodItemInRes =  coFoodItemRepository.findByRestaurantCodeAndSoIdIsNull(resCode);
		if(coFoodItemInRes != null && !coFoodItemInRes.isEmpty() && applyToRestaurant != null && applyToRestaurant.getCoId() != null) {
			coFoodItemInRes.stream().forEach(c ->{
				String foodItemCode = c.getFoodItem().getCode();
    			CoFoodItem coFoodItem = coFoodItemRepository.findByCoIdAndFoodItemCodeAndRestaurantCodeIsNull(applyToRestaurant.getCoId(),foodItemCode);
    			if(coFoodItem != null) {
    				List<RelatedFoodItem> relatedFoodItems = relatedFoodItemRepository.findByCoFoodItem(coFoodItem);
        			List<ToppingFoodItem> toppingFoodItems = toppingFoodItemRepository.findByCoFoodItem(coFoodItem);
        			List<CoFoodItemModifier> coFoodItemModifiers = coFoodItemModifierRepository.findByCoFoodItem(c);
        			List<Feature> features = new ArrayList<>(coFoodItem.getFeatures());
    				
    				CoFoodItem newCoFoodItem = new CoFoodItem();
    				newCoFoodItem.setCo(coFoodItem.getCo());
    				newCoFoodItem.setFoodItem(coFoodItem.getFoodItem());
    				newCoFoodItem.setFeatures(features);
    				newCoFoodItem.setKalo(coFoodItem.getKalo());
    				newCoFoodItem.setMaxForKitchen(coFoodItem.getMaxForKitchen());
    				newCoFoodItem.setMaxPerTransaction(coFoodItem.getMaxPerTransaction());
    				newCoFoodItem.setSoId(coFoodItem.getSoId());
    				newCoFoodItem.setRestaurantCode(resCode);
    				newCoFoodItem.setNameVn(coFoodItem.getNameVn());
    				newCoFoodItem.setNameEn(coFoodItem.getNameEn());
    				newCoFoodItem.setDescEn(coFoodItem.getDescEn());
    				newCoFoodItem.setDescVn(coFoodItem.getDescVn());
    				newCoFoodItem.setPrice(coFoodItem.getPrice());
    				newCoFoodItem.setCode(coFoodItem.getCode());
    				newCoFoodItem.setCombo(coFoodItem.isCombo());
    				newCoFoodItem.setPositionNumber(coFoodItem.getPositionNumber());
    				newCoFoodItem.setBufferLabel(coFoodItem.getBufferLabel());
    				newCoFoodItem.setInfoFoodItem(coFoodItem.getInfoFoodItem());
    				newCoFoodItem.setCoImageSize(coFoodItem.getCoImageSize());
    				newCoFoodItem.setExtraFoodItem(coFoodItem.getExtraFoodItem());
    				newCoFoodItem.setViewType(coFoodItem.getViewType());
    				newCoFoodItem.setKaloGroupId(coFoodItem.getKaloGroupId());
    				newCoFoodItem.setNumberOfPeopleEat(coFoodItem.getNumberOfPeopleEat());
    				newCoFoodItem.setHideIcon(coFoodItem.getHideIcon());
    				newCoFoodItem.setNote(coFoodItem.getNote());
    				newCoFoodItem.setNoteQuantitative(coFoodItem.getNoteQuantitative());
    				CoFoodItem coFoodItemNew = coFoodItemRepository.save(newCoFoodItem);
    				//clone coFoodItemModifier
					if(coFoodItemModifiers != null && !coFoodItemModifiers.isEmpty()) {
						coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItemNew);
						coFoodItemModifiers.stream().forEach(item ->{
							CoFoodItemModifier coFoodItemModifier = new CoFoodItemModifier();
							coFoodItemModifier.setCoFoodItem(coFoodItemNew);
							coFoodItemModifier.setModifier(item.getModifier());
							coFoodItemModifier.setType(item.getType());
							coFoodItemModifier.setNumberOfChili(item.getNumberOfChili());
							coFoodItemModifierRepository.save(coFoodItemModifier);
							
						});
					}
    				//clone related foodItem
    				if(relatedFoodItems != null && !relatedFoodItems.isEmpty()) {
    					relatedFoodItems.stream().forEach(r ->{
    						RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
    						relatedFoodItem.setCoFoodItem(coFoodItemNew);
    						relatedFoodItem.setFoodItemCode(r.getFoodItemCode());
    						relatedFoodItem.setFoodItemName(r.getFoodItemName());
    						relatedFoodItem.setType(r.getType());
    						relatedFoodItem.setSapCode(r.getSapCode());
    						relatedFoodItem.setNameDisplay(r.getNameDisplay());
    						relatedFoodItemRepository.save(relatedFoodItem);
    					});
    				}
    				//clone topping FoodItem
    				if(toppingFoodItems != null && !toppingFoodItems.isEmpty()) {
    					toppingFoodItems.stream().forEach(r ->{
    						ToppingFoodItem toppingFoodItem = new ToppingFoodItem();
    						toppingFoodItem.setCoFoodItem(coFoodItemNew);
    						toppingFoodItem.setFoodItemCode(r.getFoodItemCode());
    						toppingFoodItem.setFoodItemName(r.getFoodItemName());
    						toppingFoodItem.setModifierCode(r.getModifierCode());
    						toppingFoodItem.setModifierName(r.getModifierName());
    						toppingFoodItem.setSapCode(r.getSapCode());
    						toppingFoodItemRepository.save(toppingFoodItem);
    					});
    				}
    				
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(foodItemCode, resCode, TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val);
					restaurantDataEditRepository.deleteByValueAndRestaurantCodeAndType(c.getId().toString(), resCode, TypeRestaurantDataEditEnum.CO_FOODITEM.val);
					//save in resDataEdit if sync update
					saveRestaurantDataEdit(coFoodItemNew.getId().toString(), TypeRestaurantDataEditEnum.CO_FOODITEM.val, resCode);
					
    				// delete attachement
        			delAttachment(c.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
    				// clone attachment
    				saveAttachment(coFoodItem.getId(), coFoodItemNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
    				
    				// delete data old
    				coFoodItemModifierRepository.deleteByCoFoodItem(c);
					relatedFoodItemRepository.deleteByCoFoodItem(c);
	    			toppingFoodItemRepository.deleteByCoFoodItem(c);
	        		delAttachment(c.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val);
	        		coFoodItemRepository.delete(c);
    			}
			});
		}
	}
}