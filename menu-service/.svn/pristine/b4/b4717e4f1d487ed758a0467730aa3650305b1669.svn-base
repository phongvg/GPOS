package com.gg.gpos.menu.repository;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.gg.gpos.menu.entity.Co;
import com.gg.gpos.menu.entity.CoFoodItem;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface CoFoodItemRepository extends JpaRepository<CoFoodItem, Long>, JpaSpecificationExecutor<CoFoodItem> {
	CoFoodItem findByIdAndCo(Long id, Co co);
	CoFoodItem findByRestaurantCodeAndFoodItem_Code(Integer resCode,String foodItemCode);
	List<CoFoodItem> findByRestaurantCode(Integer restaurantCode);
	List<CoFoodItem> findByRestaurantCodeAndSoIdIsNotNull(Integer restaurantCode);
	List<CoFoodItem> findByRestaurantCodeAndSoIdIsNull(Integer restaurantCode);
	List<CoFoodItem> findByCoAndRestaurantCodeIsNull(Co co);
	List<CoFoodItem> findByCoAndRestaurantCode(Co co,Integer restaurantCode);
	Page<CoFoodItem> findByCoAndRestaurantCode(Co co,Integer restaurantCode,Pageable pageable);
	Page<CoFoodItem> findByRestaurantCode(Integer restaurantCode,Pageable pageable);
	Page<CoFoodItem> findByRestaurantCodeAndSoIdIsNull(Integer restaurantCode,Pageable pageable);
	List<CoFoodItem> findByRestaurantCodeIn(List<Integer> resCodes);
	
	@Query("select distinct cfi.restaurantCode from CoFoodItem cfi where cfi.co.id = :coId and cfi.restaurantCode is not null")
	List<Integer> findRestaurantCodes(@Param("coId") Long coId);
	
	@Query("from CoFoodItem cfi where cfi.co.id = :coId and cfi.restaurantCode is not null")
	List<CoFoodItem> findByCoIdAndRestaurantCodeNotNull(@Param("coId") Long coId);
	
	@Query("from CoFoodItem cfi where cfi.co.id = :coId and cfi.foodItem.code = :fiCode and cfi.restaurantCode is null")
	CoFoodItem findByCoIdAndFoodItemCodeAndRestaurantCodeIsNull(@Param("coId") Long coId,@Param("fiCode") String fiCode);
	
	@Query("from CoFoodItem cfi where cfi.co.id = :coId and cfi.restaurantCode is not null and cfi.soId is not null")
	List<CoFoodItem> findByCoIdAndRestaurantCodeNotNullAndSoIdNotNull(@Param("coId") Long coId);
	
	@Query("from CoFoodItem cfi where cfi.soId = :soId and cfi.restaurantCode = :restaurantCode")
	List<CoFoodItem> findBySoIdAndRestaurantCode(Long soId, Integer restaurantCode);
	
	@Query("from CoFoodItem cfi where cfi.soId is null and cfi.restaurantCode = :restaurantCode")
	List<CoFoodItem> findBySoIdIsNullAndRestaurantCode(Integer restaurantCode);
	
	@Query("from CoFoodItem cfi where cfi.co.id = :coId and cfi.soId is not null and cfi.restaurantCode is not null")
	List<CoFoodItem> findByCoIdAndSoIdNotNull(@Param("coId") Long coId);
	
	void deleteByIdIn(List<Long> ids);
	void deleteByRestaurantCode(Integer restaurantCode);
	void deleteByRestaurantCodeAndSoIdIsNull(Integer restaurantCode);
	
	void deleteBySoIdAndFoodItem_Id(Long soId, Long foodItemId);
	 
	@Query("from CoFoodItem cfi where cfi.co.id = :coId and cfi.restaurantCode is null")
	List<CoFoodItem> findByCoIdAndRestaurantCodeNull(@Param("coId") Long coId);
	
	CoFoodItem findBySoIdAndRestaurantCodeNullAndFoodItem_Id(Long soId, Long foodItemId);
	
	CoFoodItem findByRestaurantCodeAndFoodItem_Id(Integer resCode, Long foodItemId);
	
	void deleteByAndRestaurantCodeAndFoodItem_Id(Integer resCode, Long foodItemId);
	
	@Query("from CoFoodItem cfi where cfi.co.id = :coId and cfi.foodItem.id = :fiId and cfi.restaurantCode is null")
	CoFoodItem findByCoIdAndFoodItemId(Long coId, Long fiId);
	
	@Query("select cfi.foodItem.id from CoFoodItem cfi where cfi.restaurantCode = :restaurantCode and cfi.soId is null")
	List<Long> findFoodItemId(@Param("restaurantCode") Integer resCode);
	
	@Query("select cfi from CoFoodItem cfi where cfi.co.soId = :soId and cfi.foodItem.id = :fiId")
	List<CoFoodItem> findBySoIdAndFoodItemId(@Param("soId") Long soId, @Param("fiId") Long fiId);
	
	@Query("select cfi from CoFoodItem cfi where cfi.restaurantCode = :restaurantCode and cfi.foodItem.id = :fiId")
	List<CoFoodItem> findByResCodeAndFoodItemId(@Param("restaurantCode") Integer restaurantCode, @Param("fiId") Long fiId);
	
	List<CoFoodItem> findByIdIn(List<Long> ids);
	
	@Query("select cfi from CoFoodItem cfi where cfi.restaurantCode = :restaurantCode and cfi.foodItem.code in :fiCodes")
	List<CoFoodItem> findByResCodeAndFoodItemCodeIn(@Param("restaurantCode") Integer restaurantCode, @Param("fiCodes") List<String> fiCodes);
	
	@Query("select cfi.foodItem.code from CoFoodItem cfi where cfi.restaurantCode = :restaurantCode and cfi.soId is null")
	List<String> findFoodItemCode(@Param("restaurantCode") Integer resCode);
	
	@Query("select cfi from CoFoodItem cfi where cfi.restaurantCode = :restaurantCode and cfi.foodItem.code in :fiCodes and cfi.soId is null")
	List<CoFoodItem> findByResCodeAndAndSoIdIsNullAndFoodItemCodeIn(@Param("restaurantCode") Integer restaurantCode, @Param("fiCodes") List<String> fiCodes);
	
	@Query("select cfi from CoFoodItem cfi where cfi.restaurantCode = :restaurantCode and cfi.foodItem.code in :fiCodes and cfi.soId is not null")
	List<CoFoodItem> findByResCodeAndAndSoIdIsNotNullAndFoodItemCodeIn(@Param("restaurantCode") Integer restaurantCode, @Param("fiCodes") List<String> fiCodes);
	
	List<CoFoodItem> findByKaloGroupId(Long kaloGroupId);
	
}