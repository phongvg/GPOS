package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.gg.gpos.common.constant.FeatureStatusEnum;
import com.gg.gpos.menu.dto.FeatureDto;
import com.gg.gpos.menu.entity.CoFoodItem;
import com.gg.gpos.menu.entity.Feature;
import com.gg.gpos.menu.mapper.FeatureMapper;
import com.gg.gpos.menu.repository.CoFoodItemRepository;
import com.gg.gpos.menu.repository.FeatureRepository;
import com.gg.gpos.menu.specification.FeatureSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class FeatureManager {
	private FeatureRepository featureRepository;
	@Autowired
	public void setFeatureRepository(FeatureRepository featureRepository) {
		this.featureRepository = featureRepository;
	}
	private FeatureMapper featureMapper;
	@Autowired
	public void setFeatureMapper(FeatureMapper featureMapper) {
		this.featureMapper = featureMapper;
	}
	@Autowired
	private FeatureSpecification featureSpecification;
	@Autowired
	private CoFoodItemRepository coFoodItemRepository;
	
	public Page<FeatureDto> gets(FeatureDto criteria){
		log.debug("PROCESS: GETS FEATURE, FEATURE_DTO: {}", criteria);
		Specification<Feature> specs = Specification.where(featureSpecification.search(criteria.getCode(), criteria.getNameVn(), criteria.getStatus()));
		Page<Feature> page = featureRepository.findAll(specs, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(featureMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public FeatureDto get(Long id) {
		log.debug("PROCESS: GET FEATURE BY ID, FEATURE_ID: {}", id);
		return featureRepository.findById(id).map(featureMapper::entityToDto).orElse(null);
	}
	
	public boolean isUsedCode(FeatureDto featureDto) {
		log.debug("PROCESS: CHECK FEATURE_CODE IS EXISTING, FEATURE_CODE: {}", featureDto.getCode());
		List<FeatureDto> featureDtos = featureRepository.findByCodeAndCheckStatus(featureDto.getCode()).stream().map(featureMapper::entityToDto).collect(Collectors.toList());
		return !featureDtos.isEmpty();
	}
	
	public FeatureDto save(FeatureDto featureDto) {
		log.debug("PROCESS: SAVE FEATURE, FEATURE_DTO: {}", featureDto);
		Feature feature = Optional.ofNullable(featureDto).map(featureMapper::dtoToEntity).orElse(null);
		if (feature != null) {
			return Optional.ofNullable(featureRepository.save(feature)).map(featureMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public void changeStatus(Long id) {
		log.debug("PROCESS: CHANGE STATUS FEATURE BY ID (STATUS = 0), FEATURE_ID: {}", id);
		Feature feature = new Feature();
		feature.setId(id);
		featureRepository.changeStatus(id);
	}
	
	//
	public List<FeatureDto> getsByStatus(){
		return featureRepository.findByStatus(FeatureStatusEnum.ACTIVE.status).stream().map(featureMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FeatureDto> gets(Long cId){
		if(cId != null) {
			CoFoodItem coFoodItem = coFoodItemRepository.getOne(cId);
			List<Feature> features = featureRepository.findByStatus(FeatureStatusEnum.ACTIVE.status);
			List<Feature> featureSelecteds = coFoodItem.getFeatures();
			return features.stream().map(f ->{
				FeatureDto featureDto = featureMapper.entityToDto(f);
				featureSelecteds.stream().forEach(fs ->{
					if(featureDto.getId().equals(fs.getId())) {
						featureDto.setSelected(true);
					}
				});
				return featureDto;
			}).collect(Collectors.toList());
		} else {
			return featureRepository.findByStatus(FeatureStatusEnum.ACTIVE.status).stream().map(featureMapper::entityToDto).collect(Collectors.toList());
		}
	}
	
	public List<FeatureDto> gets() {
		return featureRepository.findAll().stream().map(featureMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FeatureDto> findByCode(String code){
		return featureRepository.findByCodeAndCheckStatus(code.trim()).stream().map(featureMapper::entityToDto).collect(Collectors.toList());
	}
	
	public void save(List<FeatureDto> featureDtos) {
		log.debug("Entering 'save' method...");
		if (!featureDtos.isEmpty()) {
			featureDtos.stream().forEach(f -> {
				Feature feature = Optional.ofNullable(f).map(featureMapper::dtoToEntity).orElse(null);
				if (feature != null) {
					featureRepository.save(feature);
				}
			});
		}
	}
	
	public void delFeature(FeatureDto featureDto) {
		Feature feature = Optional.ofNullable(featureDto).map(featureMapper::dtoToEntity).orElse(null);
		if(feature != null) {
			featureRepository.delete(feature);
		}
	}
	
	public List<FeatureDto> findByResCode(Integer resCode){
		return featureRepository.findByRestaurantCode(resCode).stream().map(featureMapper::entityToDto).collect(Collectors.toList());
	}
}