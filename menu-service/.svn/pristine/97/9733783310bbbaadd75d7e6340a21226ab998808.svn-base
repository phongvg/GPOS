package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.gg.gpos.menu.dto.MenuTypeDto;
import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.MenuType;
import com.gg.gpos.menu.mapper.MenuTypeMapper;
import com.gg.gpos.menu.repository.FoodGroupRepository;
import com.gg.gpos.menu.repository.MenuTypeRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class MenuTypeManager {
	@Autowired
	private MenuTypeRepository menuTypeRepository;
	@Autowired
	private MenuTypeMapper menuTypeMapper;
	@Autowired
	private FoodGroupRepository foodGroupRepository;
	
	public MenuTypeDto get(Long id) {
		log.debug("PROCESS: GET MENU_TYPE BY ID, MENU_TYPE_ID: {}", id);
		return menuTypeRepository.findById(id).map(menuTypeMapper::entityToDto).orElse(null);
	}
	
	public Page<MenuTypeDto> gets(MenuTypeDto criteria){
		log.debug("PROCESS: GETS MENU_TYPE, MENU_TYPE_DTO: {}", criteria);
		Page<MenuType> page = menuTypeRepository.findAll(PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(menuTypeMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public boolean isUsedCode(Integer code) {
		log.debug("PROCESS: CHECK MENU_TYPE_CODE IS EXISTING, MENU_TYPE_CODE: {}", code);
		return menuTypeRepository.findByCode(code) != null;
	}
	
	public MenuTypeDto save(MenuTypeDto menuTypeDto) {
		log.debug("PROCESS: SAVE MENU_TYPE, MENU_TYPE: {}", menuTypeDto);
		MenuType menuType = Optional.ofNullable(menuTypeDto).map(menuTypeMapper::dtoToEntity).orElse(null);
		return Optional.ofNullable(menuTypeRepository.save(menuType)).map(menuTypeMapper::entityToDto).orElse(null);
	}
	
	public void delete(Long id) {
		log.debug("PROCESS: DELETE MENU_TYPE, MENU_TYPE_ID: {}", id);
		MenuType menuType = new MenuType();
		menuType.setId(id);
		menuTypeRepository.delete(menuType);
	}
	
	public boolean isUsingInFoodGroup(Long id) {
		log.debug("PROCESS: CHECK MENU_TYPE USING IN FOOD_GROUP, MENU_TYPE_ID: {}", id);
		MenuType menuType = new MenuType();
		menuType.setId(id);
		List<FoodGroup> list = foodGroupRepository.findByMenuType(menuType);
		return (list != null && !list.isEmpty());
	}
	
	//
	public List<MenuTypeDto> gets() {
		log.debug("Entering 'gets' method...");
		return menuTypeRepository.findAll().stream().map(menuTypeMapper::entityToDto).collect(Collectors.toList());
	}
	
	public MenuTypeDto findByCode(Integer code) {
		log.debug("Entering 'findByCode' method...");
		return Optional.ofNullable(menuTypeRepository.findByCode(code)).map(menuTypeMapper::entityToDto).orElse(null);
	}
}