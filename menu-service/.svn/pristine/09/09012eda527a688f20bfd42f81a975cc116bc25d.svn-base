package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.gg.gpos.common.constant.ErrorImportEnum;
import com.gg.gpos.common.constant.FeatureStatusEnum;
import com.gg.gpos.common.constant.FoodTypeEnum;
import com.gg.gpos.common.constant.FunctionTypeEnum;
import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.io.dto.IOCoFoodItemDto;
import com.gg.gpos.menu.dto.CoDto;
import com.gg.gpos.menu.dto.CoFoodItemDto;
import com.gg.gpos.menu.dto.CofoodItemModifierDto;
import com.gg.gpos.menu.dto.FeatureDto;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.dto.KaloGroupDto;
import com.gg.gpos.menu.dto.ModifierDto;
import com.gg.gpos.menu.dto.RelatedFoodItemDto;
import com.gg.gpos.menu.dto.ToppingFoodItemDto;
import com.gg.gpos.menu.entity.CatalogDataEdit;
import com.gg.gpos.menu.entity.Co;
import com.gg.gpos.menu.entity.CoFoodItem;
import com.gg.gpos.menu.entity.CoFoodItemModifier;
import com.gg.gpos.menu.entity.Feature;
import com.gg.gpos.menu.entity.FoodItem;
import com.gg.gpos.menu.entity.KaloGroup;
import com.gg.gpos.menu.entity.Modifier;
import com.gg.gpos.menu.entity.RelatedFoodItem;
import com.gg.gpos.menu.entity.ToppingFoodItem;
import com.gg.gpos.menu.mapper.CoFoodItemMapper;
import com.gg.gpos.menu.mapper.CoFoodItemModifierMapper;
import com.gg.gpos.menu.mapper.CoMapper;
import com.gg.gpos.menu.mapper.FeatureMapper;
import com.gg.gpos.menu.mapper.FoodItemMapper;
import com.gg.gpos.menu.mapper.KaloGroupMapper;
import com.gg.gpos.menu.mapper.ModifierMapper;
import com.gg.gpos.menu.mapper.RelatedFoodItemMapper;
import com.gg.gpos.menu.mapper.ToppingFoodItemMapper;
import com.gg.gpos.menu.repository.CatalogApplyToRestaurantRepository;
import com.gg.gpos.menu.repository.CatalogDataEditRepository;
import com.gg.gpos.menu.repository.CoFoodItemModifierRepository;
import com.gg.gpos.menu.repository.CoFoodItemRepository;
import com.gg.gpos.menu.repository.CoRepository;
import com.gg.gpos.menu.repository.FeatureRepository;
import com.gg.gpos.menu.repository.FoodItemRepository;
import com.gg.gpos.menu.repository.KaloGroupRepository;
import com.gg.gpos.menu.repository.ModifierRepository;
import com.gg.gpos.menu.repository.RelatedFoodItemRepository;
import com.gg.gpos.menu.repository.ToppingFoodItemRepository;
import com.gg.gpos.menu.specification.ReferenceObjectSpecification;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.entity.Attachment;
import com.gg.gpos.reference.mapper.AttachmentMapper;
import com.gg.gpos.reference.repository.AttachmentRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class CoFoodItemManager {
	@Autowired
	private CoFoodItemRepository coFoodItemRepository;
	@Autowired
	private CoFoodItemMapper coFoodItemMapper;
	@Autowired 
	private CoMapper coMapper;
	@Autowired
	private CoRepository coRepository;
	@Autowired
	private ModifierRepository modifierRepository;
	@Autowired
	private FeatureRepository featureRepository;
	@Autowired
	private RelatedFoodItemRepository relatedFoodItemRepository;
	@Autowired
	private FoodItemRepository foodItemRepository;
	@Autowired
	private ReferenceObjectSpecification<CoFoodItem> referenceObjectSpecification;
	@Autowired
	private FeatureMapper featureMapper;
	@Autowired
	private ToppingFoodItemRepository toppingFoodItemRepository; 
	@Autowired
	private FoodItemMapper foodItemMapper;
	@Autowired
	private CoFoodItemModifierRepository coFoodItemModifierRepository;
	@Autowired
	private CoFoodItemModifierMapper coFoodItemModifierMapper;
	@Autowired
	private AttachmentRepository attachmentRepository;
	@Autowired
	private KaloGroupMapper kaloGroupMapper;
	@Autowired
	private KaloGroupRepository kaloGroupRepository;
	@Autowired
	private RelatedFoodItemMapper relatedFoodItemMapper;
	@Autowired
	private ToppingFoodItemMapper toppingFoodItemMapper;
	@Autowired
	private AttachmentMapper attachmentMapper;
	@Autowired
	private CatalogApplyToRestaurantRepository catalogApplyToRestaurantRepository;
	@Autowired
	private ModifierMapper modifierMapper;
	@Autowired
	private CatalogDataEditRepository catalogDataEditRepository;
	
	public CoFoodItemDto get(Long id) {
		return coFoodItemRepository.findById(id).map(coFoodItemMapper::entityToDto).orElse(null);
	}
	
	public List<CoFoodItemDto> gets() {
		return coFoodItemRepository.findAll().stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public FoodItemDto getFoodItemByCFId(Long cfId){
		CoFoodItem coFoodItem = coFoodItemRepository.getOne(cfId);
		return Optional.ofNullable(coFoodItem.getFoodItem()).map(foodItemMapper::entityToDto).orElse(null);
	}
	
	public List<CoFoodItemDto> getByRestaurantCodes(Integer restaurantCode){
		return coFoodItemRepository.findByRestaurantCode(restaurantCode).stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public void delCoFoodItem(CoFoodItemDto coFoodItemDto) {
		CoFoodItem coFoodItem = Optional.ofNullable(coFoodItemDto).map(coFoodItemMapper::dtoToEntity).orElse(null);
		if(coFoodItem != null) {
			relatedFoodItemRepository.deleteByCoFoodItem(coFoodItem);
			toppingFoodItemRepository.deleteByCoFoodItem(coFoodItem);
			coFoodItemModifierRepository.deleteByCoFoodItem(coFoodItem);
			coFoodItemRepository.delete(coFoodItem);
		}
	}
	
	public List<CoFoodItemDto> gets(Integer resCode){
		log.debug("entering 'gets' method...");
		return coFoodItemRepository.findByRestaurantCodeAndSoIdIsNotNull(resCode).stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList());
		
	}
	
	private List<CoFoodItem> getOneByResCode(Integer resCode){
		List<CoFoodItem> coFoodItems = coFoodItemRepository.findByRestaurantCodeAndSoIdIsNotNull(resCode);
		if(coFoodItems != null && !coFoodItems.isEmpty()) {
			return coFoodItems;
		}else {
			coFoodItems = coFoodItemRepository.findByRestaurantCode(resCode);
			return coFoodItems;
		}
		
	}
	
	public void delete(List<CoFoodItemDto> coFoodItems) {
		if(coFoodItems != null) {
			coFoodItems.stream().forEach(c -> coFoodItemRepository.delete(Optional.ofNullable(c).map(coFoodItemMapper::dtoToEntity).orElse(null)));
		}
	}
	
	
	public CoFoodItemDto save(CoFoodItemDto coFoodItemDto) {
		log.debug("entering 'save' method...");
	    List<Long> featureIdsNews = new ArrayList<>();
	    List<String> relatedFoodItemCodes = new ArrayList<>();
	    List<Feature> features = null;
	    List<CofoodItemModifierDto> cofoodItemModifierDtos = coFoodItemDto.getCoFoodItemModifiers();
	    Long soId = null;
	    if(coFoodItemDto.getCo().getId() != null) {
	    	Co co = coRepository.getOne(coFoodItemDto.getCo().getId());
	    	soId = co.getSoId();
	    }
	    Integer resCode = coFoodItemDto.getRestaurantCode();
		if(resCode != null) {
			coFoodItemDto.setSoId(null);
		}else {
			coFoodItemDto.setSoId(soId);
		}
    	if(coFoodItemDto.getListFeatureIds() != null) {
	    	Set<String> featureIds = org.springframework.util.StringUtils.commaDelimitedListToSet(coFoodItemDto.getListFeatureIds());
	    	List<String> featureIdsKey = featureIds.stream().filter(key -> {
	    		return !key.contains(SymbolEnum.COMMA.val);
	    	}).collect(Collectors.toList());
	    	featureIdsKey.stream().forEach(f ->{
	    		featureIdsNews.add(Long.parseLong(f));
	    	});
    	}
    	// get size foodItem
    	List<RelatedFoodItemDto> sizeFoodItems = coFoodItemDto.getRelatedFoodItems(); 
    	// get topping foodItem
    	List<ToppingFoodItemDto> toppingFoodItems = coFoodItemDto.getToppingFoodItems();
    	
    	// get related foodItem name and code
    	if(coFoodItemDto.getRelatedFCodes() != null && !coFoodItemDto.getRelatedFCodes().isEmpty()) {
	    	Set<String> relatedFoodItems = org.springframework.util.StringUtils.commaDelimitedListToSet(coFoodItemDto.getRelatedFCodes());
	    	List<String> relatedFoodItemKeys = relatedFoodItems.stream().filter(key -> {
	    		return !key.contains(SymbolEnum.COMMA.val);
	    	}).collect(Collectors.toList());
	    	relatedFoodItemKeys.stream().forEach(f ->{
	    		relatedFoodItemCodes.add(f);
	    	});
    	}
    	
		if(!featureIdsNews.isEmpty()) {
			features = featureIdsNews.stream().map(fId -> featureRepository.getOne(fId)).collect(Collectors.toList());
		}
		CoFoodItem coFoodItem = Optional.ofNullable(coFoodItemDto).map(coFoodItemMapper::dtoToEntity).orElse(null);
		if (coFoodItem != null) {
			/*coFoodItem.setNameVn(foodItem.getName());*/
			coFoodItem.setFeatures(features);
			CoFoodItem c = coFoodItemRepository.save(coFoodItem);
			
			//delete and insert coFoodItemModifier
			coFoodItemModifierRepository.deleteByCoFoodItem(c);
			if(cofoodItemModifierDtos != null && !cofoodItemModifierDtos.isEmpty()) {
				cofoodItemModifierDtos.stream().forEach(item ->{
					if(item != null && item.getModifierId() != null) {
						Modifier modifier = modifierRepository.findById(item.getModifierId()).get();
						if(modifier != null) {
							CoFoodItemModifier coFoodItemModifier = new CoFoodItemModifier();
							coFoodItemModifier.setCoFoodItem(c);
							coFoodItemModifier.setModifier(modifier);
							coFoodItemModifier.setType(item.getType());
							coFoodItemModifier.setNumberOfChili(item.getNumberOfChili());
							coFoodItemModifierRepository.save(coFoodItemModifier);
						}
					}
				});
			}
			
			//delete and insert related fooditem
			relatedFoodItemRepository.deleteByCoFoodItemAndType(c,FoodTypeEnum.RELATED_FOODITEM.val);
			if(relatedFoodItemCodes != null && !relatedFoodItemCodes.isEmpty()) {
				relatedFoodItemCodes.stream().forEach(fiCode ->{
					FoodItem foodItem = foodItemRepository.findByCode(fiCode);
					if(foodItem != null) {
						RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
						relatedFoodItem.setCoFoodItem(c);
						relatedFoodItem.setFoodItemCode(fiCode);
						relatedFoodItem.setFoodItemName(foodItem.getName());
						relatedFoodItem.setSapCode(foodItem.getSapCode());
						relatedFoodItem.setType(FoodTypeEnum.RELATED_FOODITEM.val);
						relatedFoodItemRepository.save(relatedFoodItem);
					}
				});
			}
			
			//delete and insert size fooditem
			relatedFoodItemRepository.deleteByCoFoodItemAndType(c,FoodTypeEnum.SIZE_FOODITEM.val);
			if(sizeFoodItems != null && !sizeFoodItems.isEmpty()) {
				sizeFoodItems.stream().forEach(r ->{
					if(r.getFoodItemCode() != null && !r.getFoodItemCode().isEmpty() && r.getFoodItemName() != null && !r.getFoodItemName().isEmpty()) {
						RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
						relatedFoodItem.setCoFoodItem(c);
						relatedFoodItem.setFoodItemCode(r.getFoodItemCode());
						relatedFoodItem.setFoodItemName(r.getFoodItemName());
						relatedFoodItem.setSapCode(r.getSapCode());
						relatedFoodItem.setNameDisplay(r.getNameDisplay());
						relatedFoodItem.setType(FoodTypeEnum.SIZE_FOODITEM.val);
						relatedFoodItemRepository.save(relatedFoodItem);
					}
				});
			}
			
			//delete and insert topping fooditem
			toppingFoodItemRepository.deleteByCoFoodItem(c);
			if(toppingFoodItems != null && !toppingFoodItems.isEmpty()) {
				toppingFoodItems.stream().forEach(tp ->{
					if(tp.getFoodItemCode() != null && !tp.getFoodItemCode().isEmpty() && tp.getModifierCode() != null && !tp.getModifierCode().isEmpty()) {
						ToppingFoodItem toppingFoodItem = new ToppingFoodItem();
						toppingFoodItem.setCoFoodItem(c);
						toppingFoodItem.setFoodItemCode(tp.getFoodItemCode());
						toppingFoodItem.setFoodItemName(tp.getFoodItemName());
						toppingFoodItem.setSapCode(tp.getSapCode());
						toppingFoodItem.setModifierCode(tp.getModifierCode());
						toppingFoodItem.setModifierName(tp.getModifierName());
						toppingFoodItemRepository.save(toppingFoodItem);
					}
				});
			}
			return Optional.ofNullable(c).map(coFoodItemMapper::entityToDto).orElse(null);
		} else {
			return null;	
		}
	}
	
	public Page<CoFoodItemDto> getLists(CoFoodItemDto criteria){
		log.debug("Entering 'gets(criateria)' method");
		Page<CoFoodItem> page = coFoodItemRepository.findByRestaurantCode(criteria.getRestaurantCode(), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()),page.getTotalElements());
	}

	public Page<CoFoodItemDto> gets(CoFoodItemDto criteria){
		log.debug("Entering 'gets(criateria)' method");
		Co co = Optional.ofNullable(criteria.getCo()).map(coMapper::dtoToEntity).orElse(null);
		Page<CoFoodItem> page = coFoodItemRepository.findByCoAndRestaurantCode(co,null, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()),page.getTotalElements());
	}
	
	public Page<CoFoodItemDto> search(CoFoodItemDto criteria){
		log.debug("Entering 'gets(criateria)' method");
		Specification<CoFoodItem> spec = referenceObjectSpecification.searchCoFoodItem(criteria);
		Page<CoFoodItem> page = coFoodItemRepository.findAll(spec, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()),page.getTotalElements());
	}
	
	public Page<CoFoodItemDto> getCFIChanged(CoFoodItemDto criteria){
		log.debug("Entering 'gets(criateria)' method");
		Page<CoFoodItem> page = coFoodItemRepository.findByRestaurantCodeAndSoIdIsNull(criteria.getRestaurantCode(), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()),page.getTotalElements());
	}
	
	public List<Integer> getAppliedRestaurantCodes(Long coId) {
		log.debug("entering 'getAppliedRestaurantCodes' method...");
		return coFoodItemRepository.findRestaurantCodes(coId);
	}

	public String[] getInfoCoFoodItem(Long id){
		String[] infoFoodItem = null;
		CoFoodItem coFoodItem = coFoodItemRepository.findById(id).get();
		if(coFoodItem != null && coFoodItem.getInfoFoodItem() != null && !coFoodItem.getInfoFoodItem().isEmpty()) {
			infoFoodItem = coFoodItem.getInfoFoodItem().split("&&");
		}
		return infoFoodItem;
	}
	
	public List<CofoodItemModifierDto> getExistingCofoodItemModifiers(Long coId) {
		log.debug("Entering 'getExistingCofoodItemModifiers("+coId+")' method...");
		if(coId != null) {
			CoFoodItem coFoodItem = coFoodItemRepository.findById(coId).get();
			List<CofoodItemModifierDto> cofoodItemModifierDtos = coFoodItemModifierRepository.findByCoFoodItem(coFoodItem).stream().map(coFoodItemModifierMapper::entityToDto).collect(Collectors.toList());
			if(!cofoodItemModifierDtos.isEmpty() ) {
				cofoodItemModifierDtos.stream().forEach(item ->{
					String modifierCode = item.getModifier().getCode();
					String modifierName = item.getModifier().getName();
					item.setModifierId(item.getModifier().getId());
					item.setModifierName(modifierName);
					item.setModifierCode(modifierCode);
				});
			}
			return cofoodItemModifierDtos;
		} else {
			return new ArrayList<>();
		}
	}
	
	/*
	 * lấy dữ liệu CO_FOODITEM theo CO_ID hoặc RESTAURANT_CODE để export
	 */
	public List<IOCoFoodItemDto> getIOCoFoodItemDtosByCoIdOrResCode(Long coId, Integer resCode) {
		log.debug("PROCESS: GET IO_CO_FOODITEM_DTO BY CO_ID OR RESTAURANT_CODE, CO_ID: {}, RESTAURANT_CODE: {}",coId, resCode);
		// Khai báo một số biến thường dùng 
		String AMPERSAND = new StringBuilder(SymbolEnum.AMPERSAND.val).append(SymbolEnum.AMPERSAND.val).toString();
		String relatedType = FoodTypeEnum.RELATED_FOODITEM.val;
		String sizeType = FoodTypeEnum.SIZE_FOODITEM.val;
		String moduleTypeImage = ModuleTypeEnum.CO_FOOD_ITEM.val;
		
		List<IOCoFoodItemDto> ioCoFoodItemDtos = new ArrayList<>();
		List<CoFoodItemDto> coFoodItemExistingDtos = new ArrayList<>();
		// trường hợp CO_ID khác null thì export CO_FOOFITEM của danh mục
		if(coId != null) {
			coFoodItemExistingDtos.addAll(coFoodItemRepository.findByCoIdAndRestaurantCodeNull(coId).stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList()));
		}
		// trường hợp RESTAURANT_CODE khác null thì export CO_FOOFITEM của nhà hàng
		if(resCode != null) {
			coFoodItemExistingDtos.addAll(coFoodItemRepository.findByRestaurantCode(resCode).stream().map(coFoodItemMapper::entityToDto).collect(Collectors.toList()));
		}
		
		if(!CollectionUtils.isEmpty(coFoodItemExistingDtos)) {
			coFoodItemExistingDtos.stream().forEach(coFoodItemExistingDto -> {
				IOCoFoodItemDto ioCoFoodItemDto = new IOCoFoodItemDto();
				CoFoodItem coFoodItemExisting = Optional.ofNullable(coFoodItemExistingDto).map(coFoodItemMapper::dtoToEntity).orElse(null);
				FoodItemDto foodItemDto = coFoodItemExistingDto.getFoodItem();
				BeanUtils.copyProperties(coFoodItemExistingDto, ioCoFoodItemDto);
				if(StringUtils.isNotBlank(foodItemDto.getCode())) {
					ioCoFoodItemDto.setFoodItemCode(foodItemDto.getCode());
				}
				if(coFoodItemExistingDto.getMaxPerTransaction() != null) {
					ioCoFoodItemDto.setMaxPerTransaction(Double.valueOf(coFoodItemExistingDto.getMaxPerTransaction()));
				}
				if(coFoodItemExistingDto.getMaxForKitchen() != null) {
					ioCoFoodItemDto.setMaxForKitchen(Double.valueOf(coFoodItemExistingDto.getMaxForKitchen()));
				}
				if(coFoodItemExistingDto.getKalo() != null) {
					ioCoFoodItemDto.setKalo(Double.valueOf(coFoodItemExistingDto.getKalo()));
				}
				if(coFoodItemExistingDto.getKaloGroupId() != null) {
					KaloGroupDto kaloGroupDto = kaloGroupRepository.findById(coFoodItemExistingDto.getKaloGroupId()).map(kaloGroupMapper::entityToDto).orElse(null);
					StringBuilder builder = new StringBuilder();
					if(kaloGroupDto != null) {
						builder.append(kaloGroupDto.getCode()).append(SymbolEnum.HYPHEN.val).append(kaloGroupDto.getName());
						ioCoFoodItemDto.setKaloGroup(builder.toString());
					}
				}
				if(coFoodItemExistingDto.getPositionNumber() != null) {
					ioCoFoodItemDto.setPositionNumber(Double.valueOf(coFoodItemExistingDto.getPositionNumber()));
				}
				if(coFoodItemExistingDto.getCoImageSize() != null) {
					ioCoFoodItemDto.setCoImageSize(Double.valueOf(coFoodItemExistingDto.getCoImageSize()));
				}
				if(coFoodItemExistingDto.getViewType() != null) {
					ioCoFoodItemDto.setViewType(Double.valueOf(coFoodItemExistingDto.getViewType()));
				}
				if(coFoodItemExistingDto.getNumberOfPeopleEat() != null) {
					ioCoFoodItemDto.setNumberOfPeopleEat(Double.valueOf(coFoodItemExistingDto.getNumberOfPeopleEat()));
				}
				if(coFoodItemExistingDto.getHideIcon() != null) {
					ioCoFoodItemDto.setHideIcon(Double.valueOf(coFoodItemExistingDto.getHideIcon()));
				}
				List<RelatedFoodItemDto> relatedFoodItemExistingDtos = relatedFoodItemRepository.findByCoFoodItemAndType(coFoodItemExisting, relatedType).stream().map(relatedFoodItemMapper::entityToDto).collect(Collectors.toList());
				if(!CollectionUtils.isEmpty(relatedFoodItemExistingDtos)) {
					StringBuilder builder = new StringBuilder();
					relatedFoodItemExistingDtos.stream().forEach(item ->{
						builder.append(item.getFoodItemCode()).append(AMPERSAND);
					});
					if(builder.length() >= 3) {
						ioCoFoodItemDto.setRelatedFoodItem(builder.toString().substring(0, builder.toString().length()-2));
					}
				}
				List<RelatedFoodItemDto> sizeFoodItemExistingDtos = relatedFoodItemRepository.findByCoFoodItemAndType(coFoodItemExisting, sizeType).stream().map(relatedFoodItemMapper::entityToDto).collect(Collectors.toList());
				if(!CollectionUtils.isEmpty(sizeFoodItemExistingDtos)) {
					StringBuilder builder = new StringBuilder();
					sizeFoodItemExistingDtos.stream().forEach(item ->{
						if(item.getNameDisplay() != null) {
							builder.append(item.getFoodItemCode()).append(SymbolEnum.HYPHEN.val).append(item.getNameDisplay()).append(AMPERSAND);
						} else {
							builder.append(item.getFoodItemCode()).append(AMPERSAND);
						}
					});
					if(builder.length() >= 3) {
						ioCoFoodItemDto.setSizeFoodItem(builder.toString().substring(0, builder.toString().length()-2));
					}
				}
				
				List<ToppingFoodItemDto> toppingFoodItemExistingDtos = toppingFoodItemRepository.findByCoFoodItem(coFoodItemExisting).stream().map(toppingFoodItemMapper::entityToDto).collect(Collectors.toList());;
				if(!CollectionUtils.isEmpty(toppingFoodItemExistingDtos)) {
					StringBuilder builder = new StringBuilder();
					toppingFoodItemExistingDtos.stream().forEach(item ->{
						builder.append(item.getFoodItemCode()).append(SymbolEnum.HYPHEN.val).append(item.getModifierCode()).append(AMPERSAND);
					});
					if(builder.length() >= 3) {
						ioCoFoodItemDto.setToppingFoodItem(builder.toString().substring(0, builder.toString().length()-2));
					}
				}
				List<CofoodItemModifierDto> coFoodItemModifierExistingDtos = coFoodItemModifierRepository.findByCoFoodItem(coFoodItemExisting).stream().map(coFoodItemModifierMapper::entityToDto).collect(Collectors.toList());;
				if(!CollectionUtils.isEmpty(coFoodItemModifierExistingDtos)) {
					StringBuilder builder = new StringBuilder();
					coFoodItemModifierExistingDtos.stream().forEach(item ->{
						if(item.getNumberOfChili() != null) {
							builder.append(item.getModifier().getCode()).append(SymbolEnum.HYPHEN.val).append(item.getType()).append(SymbolEnum.HYPHEN.val).append(item.getNumberOfChili()).append(AMPERSAND);
						} else {
							builder.append(item.getModifier().getCode()).append(SymbolEnum.HYPHEN.val).append(item.getType()).append(AMPERSAND);
						}
					});
					if(builder.length() >= 3) {
						ioCoFoodItemDto.setModifier(builder.toString().substring(0, builder.toString().length()-2));
					}
				}
				List<FeatureDto> featureExistingDtos = coFoodItemExistingDto.getFeatures();
				if(!CollectionUtils.isEmpty(featureExistingDtos)) {
					StringBuilder builder = new StringBuilder();
					featureExistingDtos.stream().forEach(item ->{
						builder.append(item.getCode()).append(AMPERSAND);
					});
					if(builder.length() >= 3) {
						ioCoFoodItemDto.setFeature(builder.toString().substring(0, builder.toString().length()-2));
					}
				}
				
				List<AttachmentDto> attachmentExistingDtos = attachmentRepository.findByModuleIdAndModuleType(coFoodItemExistingDto.getId(), moduleTypeImage).stream().map(attachmentMapper::entityToDto).collect(Collectors.toList());
				if(!CollectionUtils.isEmpty(attachmentExistingDtos)) {
					StringBuilder builder = new StringBuilder();
					attachmentExistingDtos.stream().forEach(attachmentExistingDto -> {
						String functionType = attachmentExistingDto.getFunctionType();
						//String urlImage = attachmentExistingDto.getUrl().substring(10, attachmentExistingDto.getUrl().length());
						String urlImage = attachmentExistingDto.getUrl();
						switch (functionType) {
						case "avatar":
							ioCoFoodItemDto.setAvatarUrl(urlImage);
							break;
						case "half_image":
							ioCoFoodItemDto.setHalfPhotoUrl(urlImage);
							break;
						case "topping_image":
							ioCoFoodItemDto.setToppingPhotoUrl(urlImage);
							break;
						case "group_image":
							ioCoFoodItemDto.setGroupPhotoUrl(urlImage);
							break;
						case "group_hidden_image":
							ioCoFoodItemDto.setGroupHiddenPhotoUrl(urlImage);
							break;
						case "horizontal_image":
							ioCoFoodItemDto.setHorizontalPhotoUrl(urlImage);
							break;
						case "vertical_image":
							ioCoFoodItemDto.setVerticalPhotoUrl(urlImage);
							break;
						case "quarter_image":
							ioCoFoodItemDto.setQuarterPhotoUrl(urlImage);
							break;
						case "drink_image":
							ioCoFoodItemDto.setDrinkPhotoUrl(urlImage);
							break;
						case "qr_order_image":
							ioCoFoodItemDto.setQrOrderPhotoUrl(urlImage);
							break;
						default:
							builder.append(urlImage).append(AMPERSAND);
							break;
						}
					});
					if(builder.length() >= 3) {
						ioCoFoodItemDto.setThumbnailUrl(builder.toString().substring(0, builder.toString().length()-2));
					}
				}
				ioCoFoodItemDto.setStatus(true);
				ioCoFoodItemDtos.add(ioCoFoodItemDto);
			});
		}
		return ioCoFoodItemDtos;
	}
	
	
	public List<IOCoFoodItemDto> importCoFoodItem (List<IOCoFoodItemDto> ioCoFoodItemDtos, Boolean isOverride, Long coId, String attachmentPath) {
		log.debug("PROCESS: IMPORT CO_FOODITEM, IO_CO_FOODITEM_DTO: {}, IS_OVERRIDE: {}, CO_ID: {}", ioCoFoodItemDtos, isOverride, coId);
		List<IOCoFoodItemDto> ioCoFoodItemErrs = new ArrayList<>();
		// Khai báo một số biến thường dùng
		final String AMPERSAND = new StringBuffer(SymbolEnum.AMPERSAND.val).append(SymbolEnum.AMPERSAND.val).toString();
		String relatedType = FoodTypeEnum.RELATED_FOODITEM.val;
		String sizeType = FoodTypeEnum.SIZE_FOODITEM.val;
		String moduleTypeImage = ModuleTypeEnum.CO_FOOD_ITEM.val;
		String avatarFunctionType = FunctionTypeEnum.AVATAR.val;
		String imagesFunctionType = FunctionTypeEnum.IMAGES.val;
		String halfPhotoFunctionType = FunctionTypeEnum.HALF_PHOTO.val;
		String toppingPhotoFunctionType = FunctionTypeEnum.TOPPING_PHOTO.val;
		String groupPhotoFunctionType = FunctionTypeEnum.GROUP.val;
		String groupHiddenPhotoFunctionType = FunctionTypeEnum.GROUP_HIDDEN.val;
		String horizontalPhotoFunctionType = FunctionTypeEnum.HORIZONTAL_PHOTO.val;
		String verticalPhotoFunctionType = FunctionTypeEnum.VERTICAL_PHOTO.val;
		String quarterPhotoFunctionType = FunctionTypeEnum.QUARTER_PHOTO.val;
		String drinkPhotoFunctionType = FunctionTypeEnum.DRINK_PHOTO.val;
		String qrOrderPhotoFunctionType = FunctionTypeEnum.QR_ORDER_PHOTO.val;
		String catalogDataEditType = TypeRestaurantDataEditEnum.CO_FOODITEM.val;
		// Value của attachmentPath = /opt/gpos/resources/ nhưng do url import từ file excel đã có resources nên chỉ lấy attachmentPath = /opt/gpos/
		String splitAttachmentPath = attachmentPath.substring(0, attachmentPath.length()-11); 
		
		// Lấy danh sách nhà hàng đang được áp dụng danh mục CO này
		List<Integer> restaurantCodeApplies = catalogApplyToRestaurantRepository.findByCoId(coId).stream().map(item -> item.getRestaurantCode()).collect(Collectors.toList());		
		List<Long> newCoFoodItemIds = new ArrayList<>();
		// Lấy thông tin danh mục CO và các CO_FOOD_ITEM có trong danh mục
		CoDto coExistingDto = coRepository.findById(coId).map(coMapper::entityToDto).orElse(null);
		if(!CollectionUtils.isEmpty(ioCoFoodItemDtos) && coExistingDto != null) {
			ioCoFoodItemDtos.stream().forEach(ioCoFoodItemDto -> {
				if(ioCoFoodItemDto.getError() != null && !ioCoFoodItemDto.getError().isEmpty()) {
					ioCoFoodItemDto.setStatus(false);
					ioCoFoodItemErrs.add(ioCoFoodItemDto);
	    		} else {
	    			try {
	    				FoodItemDto foodItemDto = Optional.ofNullable(foodItemRepository.findByCode(ioCoFoodItemDto.getFoodItemCode())).map(foodItemMapper::entityToDto).orElse(null);
	    				if(foodItemDto != null) {
	    					CoFoodItemDto coFoodItemExistingDto = Optional.ofNullable(coFoodItemRepository.findByCoIdAndFoodItemId(coId, foodItemDto.getId())).map(coFoodItemMapper::entityToDto).orElse(null);
	    					if(coFoodItemExistingDto == null) {
	    						coFoodItemExistingDto = new CoFoodItemDto();
	    						coFoodItemExistingDto.setCo(coExistingDto);
	    						coFoodItemExistingDto.setFoodItem(foodItemDto);
	        	    		}
	    					coFoodItemExistingDto.setSoId(coExistingDto.getSoId());
	    					BeanUtils.copyProperties(ioCoFoodItemDto, coFoodItemExistingDto);
	    					if(ioCoFoodItemDto.getMaxPerTransaction() != null) {
	    						coFoodItemExistingDto.setMaxPerTransaction((int) Math.round(ioCoFoodItemDto.getMaxPerTransaction()));
	    					}
	        	    		if(ioCoFoodItemDto.getMaxForKitchen() != null) {
	        	    			coFoodItemExistingDto.setMaxForKitchen((int) Math.round(ioCoFoodItemDto.getMaxForKitchen()));
	    					}
	        	    		if(ioCoFoodItemDto.getKalo() != null) {
	        	    			coFoodItemExistingDto.setKalo((int) Math.round(ioCoFoodItemDto.getKalo()));
	    					}
	        	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getKaloGroup())) {
	        	    			String[] arr = StringUtils.split(ioCoFoodItemDto.getKaloGroup(), SymbolEnum.HYPHEN.val);
	        	    			if (arr.length >= 2) {
	        	    				KaloGroupDto kaloGroupDto = Optional.ofNullable(kaloGroupRepository.findByCode(arr[0])).map(kaloGroupMapper::entityToDto).orElse(null);
	        	    				if(kaloGroupDto == null) {
	            	    				kaloGroupDto = new KaloGroupDto();
	            	    				kaloGroupDto.setCode(arr[0]);
	            	    				kaloGroupDto.setName(arr[1]);
	            	    				KaloGroup kaloGroup = Optional.ofNullable(kaloGroupDto).map(kaloGroupMapper::dtoToEntity).orElse(null);
	            	    				kaloGroupDto = Optional.ofNullable(kaloGroupRepository.save(kaloGroup)).map(kaloGroupMapper::entityToDto).orElse(null);
	            	    			}
	        	    				coFoodItemExistingDto.setKaloGroupId(kaloGroupDto.getId());
	        	    			}
	        	    		}
	        	    		if(ioCoFoodItemDto.getPositionNumber() != null) {
	        	    			coFoodItemExistingDto.setPositionNumber((int) Math.round(ioCoFoodItemDto.getPositionNumber()));
	    					}
	        	    		if(ioCoFoodItemDto.getCoImageSize() != null) {
	        	    			coFoodItemExistingDto.setCoImageSize((int) Math.round(ioCoFoodItemDto.getCoImageSize()));
	    					}
	        	    		if(ioCoFoodItemDto.getViewType() != null) {
	        	    			coFoodItemExistingDto.setViewType((int) Math.round(ioCoFoodItemDto.getViewType()));
	        	    		}
	        	    		if(ioCoFoodItemDto.getNumberOfPeopleEat() != null) {
	        	    			coFoodItemExistingDto.setNumberOfPeopleEat((int) Math.round(ioCoFoodItemDto.getNumberOfPeopleEat()));
	        	    		}
	        	    		if(ioCoFoodItemDto.getHideIcon() != null) {
	        	    			coFoodItemExistingDto.setHideIcon((int) Math.round(ioCoFoodItemDto.getHideIcon()));
	        	    		}
	        	    		List<FeatureDto> featureDtos = new ArrayList<>();
	        	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getFeature())) {
	        	    			String[] arr = StringUtils.split(ioCoFoodItemDto.getFeature(), AMPERSAND);
	        	    			if (arr.length >= 1) {
	        	    				Set<String> featureCodes = new LinkedHashSet<>(Arrays.asList(arr));
	        	    				featureCodes.stream().forEach(code ->{
	        	    					List<FeatureDto> existingFeatures = featureRepository.findByCodeAndCheckStatus(code.trim()).stream().map(featureMapper::entityToDto).collect(Collectors.toList());
	        	    					if(CollectionUtils.isEmpty(existingFeatures)) {
	        	    						FeatureDto newFeatureDto = new FeatureDto();
	        	    						newFeatureDto.setCode(code.trim());
	        	    						newFeatureDto.setStatus(FeatureStatusEnum.ACTIVE.status);
	                	    				Feature feature = Optional.ofNullable(newFeatureDto).map(featureMapper::dtoToEntity).orElse(null);
	                	    				featureDtos.add(Optional.ofNullable(featureRepository.save(feature)).map(featureMapper::entityToDto).orElse(null));
	        	    					}
	        	    					featureDtos.addAll(existingFeatures);
	        	    				});
	        	    			}
	        	    		}
	        	    		List<Feature> features = featureDtos.stream().map(featureMapper::dtoToEntity).collect(Collectors.toList());
	        	    		CoFoodItem coFoodItemExisting = Optional.ofNullable(coFoodItemExistingDto).map(coFoodItemMapper::dtoToEntity).orElse(null);
	        	    		if(!CollectionUtils.isEmpty(features)) {
	        	    			coFoodItemExisting.setFeatures(features);
	        	    		}
	        	    		CoFoodItem newCoFoodItem = coFoodItemRepository.save(coFoodItemExisting);
	        	    		
	        	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getRelatedFoodItem())) {
	        	    			relatedFoodItemRepository.deleteByCoFoodItemAndType(newCoFoodItem, relatedType);
	        	    			String[] arr = StringUtils.split(ioCoFoodItemDto.getRelatedFoodItem(), AMPERSAND);
	        	    			if (arr.length >= 1) {
	        	    				Set<String> codes = new LinkedHashSet<>(Arrays.asList(arr));
	        	    				codes.stream().forEach(code ->{
	        	    					FoodItemDto foodItemExistingDto = Optional.ofNullable(foodItemRepository.findByCode(code)).map(foodItemMapper::entityToDto).orElse(null);
	        	    					if(foodItemExistingDto != null) {
	                		    			RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
	                		    			relatedFoodItem.setCoFoodItem(newCoFoodItem);
	                		    			relatedFoodItem.setFoodItemCode(code);
	                		    			relatedFoodItem.setFoodItemName(foodItemExistingDto.getName());
	                		    			relatedFoodItem.setType(FoodTypeEnum.RELATED_FOODITEM.val);
	            		    				relatedFoodItemRepository.save(relatedFoodItem);
	                	    			}
	        	    				});
	        	    			}
	        	    		}
	        	    		
	        	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getSizeFoodItem())) {
	        	    			relatedFoodItemRepository.deleteByCoFoodItemAndType(newCoFoodItem, sizeType);
	        	    			//format size in template: 13-M&&14-M (13,14: Code fooditem, M: tên size)
	        	    			String[] arrSize = StringUtils.split(ioCoFoodItemDto.getSizeFoodItem(), AMPERSAND);
	        	    			if (arrSize.length >= 1) {
	        	    				Set<String> sizes = new LinkedHashSet<>(Arrays.asList(arrSize));
	        	    				sizes.stream().forEach(size ->{
	        	    					String[] arr = StringUtils.split(size, SymbolEnum.HYPHEN.val);
	        	    					if (arrSize.length >= 1) {
	        	    						FoodItemDto foodItemExistingDto = Optional.ofNullable(foodItemRepository.findByCode(arr[0].trim())).map(foodItemMapper::entityToDto).orElse(null);
	            	    					if(foodItemExistingDto != null) {
	            	    						RelatedFoodItem relatedFoodItem = new RelatedFoodItem();
		                		    			relatedFoodItem.setCoFoodItem(newCoFoodItem);
		                		    			relatedFoodItem.setFoodItemCode(arr[0].trim());
		                		    			relatedFoodItem.setFoodItemName(foodItemExistingDto.getName());
		                		    			relatedFoodItem.setType(FoodTypeEnum.SIZE_FOODITEM.val);
		                		    			if(arrSize.length >= 2) {
	                		    					relatedFoodItem.setNameDisplay(arr[1].trim());
	                		    				} else {
	                		    					relatedFoodItem.setNameDisplay(null);
	                		    				}
		                		    			relatedFoodItemRepository.save(relatedFoodItem);
	                    	    			}
	        	    					}
	        	    				});
	        	    			}
	        	    		}
	        	    		
	        	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getToppingFoodItem())) {
	        	    			toppingFoodItemRepository.deleteByCoFoodItem(newCoFoodItem);
	        	    			//format topping in template: 15-16112&&17-17828 (15,17: Code fooditem  && 16112,17828: Code Modifier)
	        	    			String[] arrTopping = StringUtils.split(ioCoFoodItemDto.getToppingFoodItem(), AMPERSAND);
	        	    			if (arrTopping.length >= 1) {
	        	    				Set<String> toppings = new LinkedHashSet<>(Arrays.asList(arrTopping));
	        	    				toppings.stream().forEach(topping ->{
	        	    					String[] arr = StringUtils.split(topping, SymbolEnum.HYPHEN.val);
	        	    					if (arr.length >= 2) {
	        	    						FoodItemDto foodItemExistingDto = Optional.ofNullable(foodItemRepository.findByCode(arr[0].trim())).map(foodItemMapper::entityToDto).orElse(null);
	        	    						List<ModifierDto> modifierDtos = modifierRepository.findByCode(arr[1].trim()).stream().map(modifierMapper::entityToDto).collect(Collectors.toList());
	            	    					if(foodItemExistingDto != null && !CollectionUtils.isEmpty(modifierDtos)) {
	            	    						ModifierDto modifierDto = modifierDtos.get(0);
	            	    						ToppingFoodItem toppingFoodItem = new ToppingFoodItem();
	            	    						toppingFoodItem.setCoFoodItem(newCoFoodItem);
	            	    						toppingFoodItem.setFoodItemCode(foodItemDto.getCode());
	            	    						toppingFoodItem.setFoodItemName(foodItemDto.getName());
	            	    						toppingFoodItem.setSapCode(foodItemDto.getSapCode());
	            	    						toppingFoodItem.setModifierCode(modifierDto.getCode());
	            	    						toppingFoodItem.setModifierName(modifierDto.getName());
	            	    						toppingFoodItemRepository.save(toppingFoodItem);
	                    	    			}
	        	    					}
	        	    				});
	        	    			}
	        	    		}
	        	    		
	        	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getModifier())) {
	        	    			coFoodItemModifierRepository.deleteByCoFoodItem(newCoFoodItem);
	        	    			//format modifier in template: 1467,1,8&&19374,0 (1467,19374: Code Modifier && 0,1: Loại [1: Cay, 0: thường] && 8: cấp độ cay)
	        	    			String[] arrModifier = StringUtils.split(ioCoFoodItemDto.getModifier(), AMPERSAND);
	        	    			if (arrModifier.length >= 1) {
	        	    				Set<String> modifiers = new LinkedHashSet<>(Arrays.asList(arrModifier));
	        	    				modifiers.stream().forEach(modifier ->{
	        	    					String[] arr = StringUtils.split(modifier, SymbolEnum.HYPHEN.val);
	        	    					if (arr.length >= 2) {
	        	    						List<ModifierDto> modifierDtos = modifierRepository.findByCode(arr[0].trim()).stream().map(modifierMapper::entityToDto).collect(Collectors.toList());
	            	    					if(!CollectionUtils.isEmpty(modifierDtos)) {
	            	    						Modifier modifierExisting = Optional.ofNullable(modifierDtos.get(0)).map(modifierMapper::dtoToEntity).orElse(null);
	            	    						CoFoodItemModifier coFoodItemModifier = new CoFoodItemModifier();
	            								coFoodItemModifier.setCoFoodItem(newCoFoodItem);
	            								coFoodItemModifier.setModifier(modifierExisting);
	            								coFoodItemModifier.setType(Integer.parseInt(arr[1].trim()));
	            								if(arr.length >= 3) {
	            									coFoodItemModifier.setNumberOfChili(Integer.parseInt(arr[2].trim()));
	                		    				} else {
	                		    					coFoodItemModifier.setNumberOfChili(null);
	                		    				}
	            								coFoodItemModifierRepository.save(coFoodItemModifier);
	                    	    			}
	        	    					}
	        	    				});
	        	    			}
	        	    		}
	        	    		
	        	    		// Lưu thông tin CO_FOOD_ITEM_ID vào mảng
	        	    		Long moduleId = newCoFoodItem.getId();
	        	    		newCoFoodItemIds.add(moduleId);
	        	    		
	        	    		// trường hợp IMPORT-UPDATE thì không cập nhật URL của ảnh
	        	    		if(isOverride) {
	        	    			// lưu thông tin ảnh đại diện
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getAvatarUrl())) {
	            	    			String url = ioCoFoodItemDto.getAvatarUrl();
									String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
									String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, avatarFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		// lưu thông tin ảnh Thumbnail
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getThumbnailUrl())) {
	            	    			String[] arr = StringUtils.split(ioCoFoodItemDto.getThumbnailUrl(), AMPERSAND);
	            	    			if (arr.length >= 1) {
	            	    				// Xóa dữ liệu ảnh cũ trước khi tạo mới
	            	    				attachmentRepository.deleteByModuleIdAndModuleTypeAndFunctionType(moduleId, moduleTypeImage, imagesFunctionType);
	            	    				Set<String> urls = new LinkedHashSet<>(Arrays.asList(arr));
	            	    				urls.stream().forEach(url ->{
	            	    					String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    					String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
	        								String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
	        								String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
	        								if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
	        									saveAttachmentDto(moduleId, moduleTypeImage, imagesFunctionType, fileName, fileType, url, absolutePath);
	        								} else {
	        									ioCoFoodItemDto.setStatus(false);
	    										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
	    										ioCoFoodItemErrs.add(ioCoFoodItemDto);
	        								}
	            	    				});
	            	    			}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh một nửa
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getHalfPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getHalfPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, halfPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh topping
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getToppingPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getToppingPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, toppingPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    	
	            	    		// lưu thông tin ảnh group
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getGroupPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getGroupPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, groupPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh group-hidden
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getGroupHiddenPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getGroupHiddenPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, groupHiddenPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh 2x ngang
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getHorizontalPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getHorizontalPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, horizontalPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh 2x doc
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getVerticalPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getVerticalPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, verticalPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh 1/4
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getQuarterPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getQuarterPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, quarterPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh đồ uống
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getDrinkPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getDrinkPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, drinkPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	            	    		
	            	    		// lưu thông tin ảnh QR-ORDER
	            	    		if(StringUtils.isNotBlank(ioCoFoodItemDto.getQrOrderPhotoUrl())) {
	            	    			String url = ioCoFoodItemDto.getQrOrderPhotoUrl();
	            	    			String fileType = url.substring(url.lastIndexOf(SymbolEnum.DOT.val) + 1);
	            	    			String fileUrl = url.substring(url.lastIndexOf(SymbolEnum.SLASH.val) + 1);
									String fileName = fileUrl.substring(fileUrl.lastIndexOf(SymbolEnum.BACKSLASH.val) + 1);
									String absolutePath = new StringBuilder(splitAttachmentPath).append(url).toString();
									if(!checkImageUrlErr(fileName) && fileType.length() < 6) {
										saveAttachmentDto(moduleId, moduleTypeImage, qrOrderPhotoFunctionType, fileName, fileType, url, absolutePath);
									} else {
										ioCoFoodItemDto.setStatus(false);
										ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_ATTACHMENT_FORMAT.val);
										ioCoFoodItemErrs.add(ioCoFoodItemDto);
									}
	            	    		}
	        	    		}
	    				} else {
	    					ioCoFoodItemDto.setStatus(false);
	    					ioCoFoodItemDto.setError(ErrorImportEnum.ERROR_FOODITEM_NOT_EXIST.val);
	    					ioCoFoodItemErrs.add(ioCoFoodItemDto);
	    				}
	    			} catch (Exception e) {
	    				log.error("ERROR: IMPORT CO_FOODITEM EXCEPTION, EXCEPTION: {}", e);
	    				ioCoFoodItemDto.setStatus(false);
    					ioCoFoodItemDto.setError(e.getMessage());
    					ioCoFoodItemErrs.add(ioCoFoodItemDto);
					}
	    		}
			});
			
			//Check xem nếu restaurantCodeApplies != null thì lưu vào bảng để đánh dấu item này đã chỉnh sửa => Dùng cho việc đồng bộ update
    		if(!CollectionUtils.isEmpty(restaurantCodeApplies) && !CollectionUtils.isEmpty(newCoFoodItemIds)) {
    			newCoFoodItemIds.stream().forEach(id ->{
    				// Xóa dữ liệu cũ trước khi lưu data
    				catalogDataEditRepository.deleteByCatalogIdAndTypeAndValue(coId, catalogDataEditType, id.toString());
    				CatalogDataEdit catalogDataEdit = new CatalogDataEdit();
    				catalogDataEdit.setCatalogId(coId);
    				catalogDataEdit.setValue(id.toString());
    				catalogDataEdit.setType(catalogDataEditType);
    				catalogDataEditRepository.save(catalogDataEdit);
    			});
    		}
		}
		return ioCoFoodItemErrs;
	}
	
	/*
	 * Function check đường dẫn của ảnh
	 */
	private Boolean checkImageUrlErr(String fileName) {
		String regex = "^[a-zA-Z0-9._-]$";
		Pattern pattern = Pattern.compile(regex); 
		boolean check = false;
		if(fileName.contains(" ")) {
			check = true;
		} else {
			for(char text: fileName.toCharArray()) {
				if(!pattern.matcher(String.valueOf(text)).matches()) {
					check = true;
					break;
				} 
			}
		}
		return check;
	}
	
	/*
	 * Function tạo mới đường dẫn của ảnh
	 */
	private AttachmentDto saveAttachmentDto(Long moduleId, String moduleType, String functionType, String  fileName, String fileType, String url, String absolutePath) {
		log.debug("PROCESS: SAVE ATTACHMENT, MODULE_ID: {}, MODULE_TYPE: {}, FUNCTION_TYPE: {}, URL: {}, ABSOLUTE_PATH: {}", moduleId, moduleType, functionType, url, absolutePath);
		
		/*
		 * MODULE_ID: ID của CO_FOOD_ITEM
		 * MODULE_TYPE: Loại ảnh, ví dụ: ảnh Cateogry, ảnh CoFoodItem
		 * FUNCTION_TYPE: Chức năng của ảnh để hiển thị, ví dụ: ảnh đại diện, ảnh đồ uống, ảnh 1/4
		 */
		
		try {
			// Xóa data cũ trước khi tạo mới || với functionType có giá trị "Images" thì không xóa ở function này
			if(!functionType.equals(FunctionTypeEnum.IMAGES.val)) {
				attachmentRepository.deleteByModuleIdAndModuleTypeAndFunctionType(moduleId, moduleType, functionType);
			}
			// tạo mới data
			Attachment attachment = new Attachment();
			attachment.setModuleId(moduleId);
			attachment.setModuleType(moduleType);
			attachment.setFunctionType(functionType);
			attachment.setUrl(url);
			attachment.setAbsolutePath(absolutePath);
			attachment.setFileName(fileName);
			attachment.setFileType(fileType);
			return Optional.ofNullable(attachmentRepository.save(attachment)).map(attachmentMapper::entityToDto).orElse(null);
		} catch (Exception e) {
			log.debug("ERROR SAVE ATTACHMENT EXCEPTION: {}", e);
			return null;
		}
	}
}