package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import com.gg.gpos.menu.dto.HallplanDto;
import com.gg.gpos.menu.entity.Hallplan;
import com.gg.gpos.menu.entity.KdsPlace;
import com.gg.gpos.menu.entity.Kitchen;
import com.gg.gpos.menu.entity.RestaurantMaster;
import com.gg.gpos.menu.mapper.HallplanMapper;
import com.gg.gpos.menu.repository.HallplanRepository;
import com.gg.gpos.menu.repository.KdsPlaceRepository;
import com.gg.gpos.menu.repository.KitchenRepository;
import com.gg.gpos.menu.repository.RestaurantMasterRepository;
import com.gg.gpos.menu.specification.ReferenceObjectSpecification;
import com.gg.gpos.res.dto.RestaurantDto;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class HallplanManager {
	@Autowired
	private HallplanRepository hallplanRepository;
	@Autowired
	private HallplanMapper hallplanMapper;
	@Autowired
	private RestaurantMasterRepository restaurantMasterRepository;
	@Autowired
	private ReferenceObjectSpecification<Hallplan> referenceObjectSpecification;
	@Autowired
	private KitchenRepository kitchenRepository;
	@Autowired
	private KdsPlaceRepository kdsPlaceRepository;
	
	public HallplanDto get(Long id) {
		return hallplanRepository.findById(id).map(hallplanMapper::entityToDto).orElse(null);
	}
	
	public void save(List<HallplanDto> hallplanDtos) {
		log.debug("PROCESS: SAVE HALLPLAN_DTOS, HALLPLAN_DTOS: {}", hallplanDtos);
		if (!hallplanDtos.isEmpty()) {
			hallplanDtos.stream().forEach(f -> {
				Hallplan hallplan = Optional.ofNullable(f).map(hallplanMapper::dtoToEntity).orElse(null);
				if (hallplan != null) {
					hallplanRepository.save(hallplan);
				}
			});
		}
	}
	
	public Page<HallplanDto> gets(HallplanDto criteria) {
		log.debug("PROCESS: GETS HALLPLAN, HALLPLAN_DTO: {}", criteria);
		Specification<Hallplan> spec = Specification.where(referenceObjectSpecification.search(criteria.getCode(), criteria.getName(), criteria.getStatus()));
		Page<Hallplan> page = hallplanRepository.findAll(spec, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(hallplanMapper::entityToDto).collect(Collectors.toList()), PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public List<HallplanDto> gets(RestaurantDto restaurantDto) {
		Integer resCode = restaurantDto.getCode();
		RestaurantMaster restaurantMaster = restaurantMasterRepository.findByCode(resCode.toString());
		if(restaurantMaster != null) {
			return hallplanRepository.findByRestaurantId(restaurantMaster.getId()).stream().map(hallplanMapper::entityToDto).collect(Collectors.toList());
		}
		return new ArrayList<>();
	}

	public List<HallplanDto> getByKitchenIdAndResCodes(Long kitchenId,Integer resCode) {
		List<HallplanDto> hallplanDtos = new ArrayList<>();
		RestaurantMaster restaurantMaster = restaurantMasterRepository.findByCode(resCode.toString());
		if(restaurantMaster != null && kitchenId != null) {
				Kitchen kitchen = kitchenRepository.getOne(kitchenId);
				List<Hallplan> hallplans = hallplanRepository.findByRestaurantId(restaurantMaster.getId());
				List<Hallplan> hallplanselected = kitchen.getHallplans();
				return hallplans.stream().map(h ->{
					HallplanDto hallplanDto = hallplanMapper.entityToDto(h);
					hallplanselected.stream().forEach(hs ->{
						if(hallplanDto.getId().equals(hs.getId())) {
							hallplanDto.setSelected(true);
						}
					});
					return hallplanDto;
				}).collect(Collectors.toList());
		}else {
			return hallplanDtos;
		}
	}
	
	public List<HallplanDto> getByKdsPlaceIdAndResCodes(Long kdsPlaceId,Integer resCode) {
		RestaurantMaster restaurantMaster = restaurantMasterRepository.findByCode(resCode.toString());
		if(restaurantMaster != null && kdsPlaceId != null) {
				KdsPlace kdsPlace = kdsPlaceRepository.getOne(kdsPlaceId);
				List<Hallplan> hallplans = hallplanRepository.findByRestaurantId(restaurantMaster.getId());
				List<Hallplan> hallplanselected = kdsPlace.getHallplans();
				return hallplans.stream().map(h ->{
					HallplanDto hallplanDto = hallplanMapper.entityToDto(h);
					hallplanselected.stream().forEach(hs ->{
						if(hallplanDto.getId().equals(hs.getId())) {
							hallplanDto.setSelected(true);
						}
					});
					return hallplanDto;
				}).collect(Collectors.toList());
		}else {
			return hallplanRepository.findByRestaurantId(restaurantMaster.getId()).stream().map(hallplanMapper::entityToDto).collect(Collectors.toList());
		}
	}
}