package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import com.gg.gpos.common.constant.ErrorImportEnum;
import com.gg.gpos.io.dto.IOPrintGroupDto;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.dto.PrintGroupDto;
import com.gg.gpos.menu.entity.FoodItem;
import com.gg.gpos.menu.entity.Kds;
import com.gg.gpos.menu.entity.KitchenType;
import com.gg.gpos.menu.entity.PrintGroup;
import com.gg.gpos.menu.mapper.FoodItemMapper;
import com.gg.gpos.menu.mapper.KdsMapper;
import com.gg.gpos.menu.mapper.PrintGroupMapper;
import com.gg.gpos.menu.repository.FoodItemRepository;
import com.gg.gpos.menu.repository.KdsRepository;
import com.gg.gpos.menu.repository.KitchenRepository;
import com.gg.gpos.menu.repository.KitchenTypeRepository;
import com.gg.gpos.menu.repository.PrintGroupRepository;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class PrintGroupManager {
	@Autowired
	private PrintGroupRepository printGroupRepository;
	@Autowired
	private PrintGroupMapper printGroupMapper;
	@Autowired
	private KdsRepository kdsRepository;
	@Autowired
	private KdsMapper kdsMapper;
	@Autowired
	private FoodItemRepository foodItemRepository;
	@Autowired
	private FoodItemMapper foodItemMapper;
	@Autowired
	private KitchenTypeRepository kitchenTypeRepository;
	@Autowired
	private KitchenRepository kitchenRepository;
	
	public PrintGroupDto get(Long id) {
		return printGroupRepository.findById(id).map(printGroupMapper::entityToDto).orElse(null);
	}
	
	public PrintGroupDto getByKdsId(Long id, Long kId) {
		Kds kds = kdsRepository.getOne(kId);
		return Optional.ofNullable(printGroupRepository.findByIdAndKds(id,kds)).map(printGroupMapper::entityToDto).orElse(null);
	}
	
	public List<PrintGroupDto> gets() {
		return printGroupRepository.findAll().stream().map(printGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public PrintGroupDto save(PrintGroupDto printGroupDto) {
		log.debug("Entering 'save' method...");
		List<FoodItem> foodItems = new ArrayList<>();
		Set<String> keys = org.springframework.util.StringUtils.commaDelimitedListToSet(printGroupDto.getFoodItemIds());
		if(!keys.isEmpty()) {
			foodItems = keys.stream().map(k -> foodItemRepository.getOne(Long.valueOf(k))).collect(Collectors.toList());
		}
		PrintGroup printGroup = Optional.ofNullable(printGroupDto).map(printGroupMapper::dtoToEntity).orElse(null);
		if (printGroup != null) {
			printGroup.setFoodItems(foodItems);
			return Optional.ofNullable(printGroupRepository.save(printGroup)).map(printGroupMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<PrintGroupDto> gets(PrintGroupDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Page<PrintGroup> page = printGroupRepository.findByRestaurantCode(criteria.getRestaurantCode(),PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(printGroupMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public Page<PrintGroupDto> getCatalogs(PrintGroupDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Kds kds = Optional.ofNullable(criteria.getKds()).map(kdsMapper::dtoToEntity).orElse(null);
		Page<PrintGroup> page = printGroupRepository.findByKdsAndRestaurantCodeIsNull(kds, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(printGroupMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public void delete(PrintGroupDto printGroupDto) {
		PrintGroup printGroup = Optional.ofNullable(printGroupDto).map(printGroupMapper::dtoToEntity).orElse(null);
		if(printGroup != null) {
			printGroupRepository.delete(printGroup);
		}
	}
	
	public void delete(List<PrintGroupDto> printGroups) {
		if(printGroups != null) {
			printGroups.stream().forEach(a -> printGroupRepository.delete(Optional.ofNullable(a).map(printGroupMapper::dtoToEntity).orElse(null)));
		}
	}
	
	public List<PrintGroupDto> getByResCode(Integer rCode) {
		return printGroupRepository.findByRestaurantCode(rCode).stream().map(printGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<PrintGroupDto> getByResCode(Long kId, Integer rCode) {
		Kds kds = kdsRepository.getOne(kId);
		return printGroupRepository.findByKdsAndRestaurantCode(kds, rCode).stream().map(printGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public PrintGroupDto getOneByRestaurantCode(Integer restaurantCode) {
		List<PrintGroup> printGroups = printGroupRepository.findByRestaurantCodeAndKdsIsNotNull(restaurantCode);
		if(printGroups != null && !printGroups.isEmpty()) {
			return Optional.ofNullable(printGroups.get(0)).map(printGroupMapper::entityToDto).orElse(null);
		}else {
			return null;
		}
	}
	
	public List<Integer> getAppliedRestaurantCodes(Long kdsId) {
		log.debug("entering 'getAppliedRestaurantCodes' method...");
		
		return printGroupRepository.findRestaurantCodes(kdsId);
	}

	public List<IOPrintGroupDto> getIOPrintGroupsByRestaurantCode (Integer restaurantCode) {
		log.debug("PROCESS: GETS IO_PRINT_GROUP BY RESTAURANT_CODE, RESTAURANT_CODE: {}", restaurantCode);
		List<IOPrintGroupDto> ioPrintGroupDtos = new ArrayList<>();
		List<PrintGroupDto> printGroupDtos = printGroupRepository.findByRestaurantCode(restaurantCode).stream().map(printGroupMapper::entityToDto).collect(Collectors.toList());
		if(!CollectionUtils.isEmpty(printGroupDtos)) {
			printGroupDtos.stream().forEach(printGroup ->{
				List<FoodItemDto> foodItemDtos = printGroup.getFoodItems();
				String printGroupCode = printGroup.getCode();
				String kitchenType = printGroup.getKitchenType();
				if(!CollectionUtils.isEmpty(foodItemDtos)) {
					foodItemDtos.stream().forEach(foodItem ->{
						IOPrintGroupDto ioPrintGroupDto = new IOPrintGroupDto();
						ioPrintGroupDto.setPrintGroupCode(printGroupCode);
						ioPrintGroupDto.setKitchenType(kitchenType);
						ioPrintGroupDto.setFoodItemCode(foodItem.getCode());
						ioPrintGroupDto.setFoodItemName(foodItem.getName());
						ioPrintGroupDto.setStatus(true);
						ioPrintGroupDtos.add(ioPrintGroupDto);
					});
				}
			});
		}
		return ioPrintGroupDtos;
	}
	
	public List<IOPrintGroupDto> importPrintGroup (List<IOPrintGroupDto> ioPrintGroupDtos, Integer restaurantCode) {
		log.debug("PROCESS: IMPORT PRINT_GROUP, RESTAURANT_CODE: {}, IO_PRINT_GROUP_DTOS: {}", restaurantCode, ioPrintGroupDtos);
		List<IOPrintGroupDto> ioPrintGroupErrs = new ArrayList<>();
		// List FoodExisting có tác dụng không phải query lại với những FoodItemCode đã tìm kiếm rồi. Sử dụng filter để get ra từ list theo FoodItemCode
		List<FoodItemDto> foodItemExistingDtos = new ArrayList<>();
		Set<PrintGroupDto> printGroupDtos = new HashSet<>();
		if(!CollectionUtils.isEmpty(ioPrintGroupDtos)) {
			// Lặp để lấy được list PrintGroup trong đó mỗi PrintGroup chứa 1 list FoodItem
			ioPrintGroupDtos.stream().forEach(ioPG ->{
				// Loại bỏ các bản ghi bị lỗi không đọc được từ file excel
				if(StringUtils.isNotBlank(ioPG.getError())) {
					ioPG.setStatus(false);
					ioPrintGroupErrs.add(ioPG);
				} else {
				// Các trường hợp không bị lỗi khi đọc file excel
				
					String printGroupCode = ioPG.getPrintGroupCode();
					// trường hợp printGroupCode không có value thì add vào list lỗi luôn và k xử lý
					if(StringUtils.isBlank(printGroupCode)) {
						ioPG.setStatus(false);
						ioPG.setError(ErrorImportEnum.ERROR_PRINTGROUP_NOT_EXIST.val);
						ioPrintGroupErrs.add(ioPG);
					} else {
						// trường hợp foodItemCode không có value thì add vào list lỗi luôn và k xử lý
						String foodItemCode = ioPG.getFoodItemCode();
						if(StringUtils.isBlank(foodItemCode)) {
							ioPG.setStatus(false);
							ioPG.setError(ErrorImportEnum.ERROR_FOODITEM_NOT_EXIST.val);
							ioPrintGroupErrs.add(ioPG);
						} else {
						// trường hợp còn lại => check xem FoodItem có tồn tại không (Có 2 trường hợp check. Check xem FoodItem đã được add trong foodItemExistingDtos chưa hoặc là check trong database theo FoodItemCode)
							FoodItemDto foodItemDto = foodItemExistingDtos.stream().filter(m -> foodItemCode.equals(m.getCode())).findAny().orElse(null);
							PrintGroupDto printGroupDto = printGroupDtos.stream().filter(m -> printGroupCode.equals(m.getCode())).findAny().orElse(null);
							if(foodItemDto != null) {
								if(printGroupDto != null) {
									List<FoodItemDto> foodItemDtos = printGroupDto.getFoodItems();
									if(CollectionUtils.isEmpty(foodItemDtos)) {
										foodItemDtos = new ArrayList<>();
									}
									foodItemDtos.add(foodItemDto);
									printGroupDto.setFoodItems(foodItemDtos);
								} else {
									PrintGroupDto newPrintGroupDto = new PrintGroupDto();
									newPrintGroupDto.setCode(printGroupCode);
									newPrintGroupDto.setKitchenType(ioPG.getKitchenType());
									newPrintGroupDto.setRestaurantCode(restaurantCode);
									List<FoodItemDto> foodItemDtos = new ArrayList<>();
									foodItemDtos.add(foodItemDto);
									newPrintGroupDto.setFoodItems(foodItemDtos);
									printGroupDtos.add(newPrintGroupDto);
								}
							} else {
								FoodItemDto foodItemExistingDto = Optional.ofNullable(foodItemRepository.findByCode(foodItemCode)).map(foodItemMapper::entityToDto).orElse(null);
								if(foodItemExistingDto != null) {
									if(printGroupDto != null) {
										List<FoodItemDto> foodItemDtos = printGroupDto.getFoodItems();
										if(CollectionUtils.isEmpty(foodItemDtos)) {
											foodItemDtos = new ArrayList<>();
										}
										foodItemDtos.add(foodItemExistingDto);
										printGroupDto.setFoodItems(foodItemDtos);
									} else {
										PrintGroupDto newPrintGroupDto = new PrintGroupDto();
										newPrintGroupDto.setCode(printGroupCode);
										newPrintGroupDto.setKitchenType(ioPG.getKitchenType());
										newPrintGroupDto.setRestaurantCode(restaurantCode);
										List<FoodItemDto> foodItemDtos = new ArrayList<>();
										foodItemDtos.add(foodItemExistingDto);
										newPrintGroupDto.setFoodItems(foodItemDtos);
										printGroupDtos.add(newPrintGroupDto);
									}
								} else {
								// trường hợp query trong db mà Fooditem không tồn tại
									ioPG.setStatus(false);
									ioPG.setError(ErrorImportEnum.ERROR_FOODITEM_NOT_EXIST.val);
									ioPrintGroupErrs.add(ioPG);
								}
							}
						}
					}
				}
			});
			
			// Lặp các bản ghi PrintGroupDto để lưu
			if(!CollectionUtils.isEmpty(printGroupDtos)) {
				printGroupDtos.stream().forEach(printGroupDto ->{
					String kitchenType = printGroupDto.getKitchenType();
					String printGroupCode = printGroupDto.getCode();
					
					// Lấy danh sách tên KitchenType theo restaurantCode và Kiểm tra xem KitchenType đã được thêm vào chưa (Phần này được hiểu là tạo mới thông tin trong bảng KitchenType)
					List<String> kitchenTypeExistings = kitchenTypeRepository.findByRestaurantCode(restaurantCode).stream().map(r -> r.getName()).collect(Collectors.toList());
					if(StringUtils.isNotBlank(kitchenType) && !kitchenTypeExistings.contains(kitchenType)) {
						KitchenType newKitchenType = new KitchenType();
						newKitchenType.setRestaurantCode(restaurantCode);
						newKitchenType.setName(kitchenType);
						kitchenTypeRepository.save(newKitchenType);
					}
					
					// Lấy danh sách các KitchenTypeName đã được khai báo ở bảng Kitchen (Chỉ có những KitchenTypeName được khai báo ở bảng này mới được hiển thị trong phần select field Bếp)
					List<String> kitchenTypeNames = kitchenRepository.findByRestaurantCode(restaurantCode).stream().map(k -> k.getKitchenType()).collect(Collectors.toList());
					// Tìm kiếm các KitchenTypeName đã được cấu hình trong phần "Cấu hình khu vực bếp"
					List<String> kitchenTypeNameExistings = kitchenTypeRepository.findByRestaurantCodeAndNameIn(restaurantCode,kitchenTypeNames).stream().map(r -> r.getName()).collect(Collectors.toList());
					// Check xem đã có bản ghi PrintGroup theo printGroupCode và restaurantCode
					PrintGroupDto printGroupExisting = Optional.ofNullable(printGroupRepository.findByCodeAndRestaurantCode(printGroupCode,restaurantCode)).map(printGroupMapper::entityToDto).orElse(null);
					if(printGroupExisting != null) {
						printGroupDto.setId(printGroupExisting.getId());
					} 
					if(CollectionUtils.isEmpty(kitchenTypeNameExistings) || !kitchenTypeNameExistings.contains(kitchenType)) {
						printGroupDto.setKitchenType(null);
					}
					List<FoodItemDto> foodItemDtos = printGroupDto.getFoodItems();
					try {
						List<FoodItem> foodItems = foodItemDtos.stream().map(foodItemMapper::dtoToEntity).collect(Collectors.toList());
						PrintGroup printGroup = Optional.ofNullable(printGroupDto).map(printGroupMapper::dtoToEntity).orElse(null);
						printGroup.setFoodItems(foodItems);
						printGroupRepository.save(printGroup);
					} catch (Exception e) {
						log.error("ERROR: IMPORT PRINT_GROUP EXCEPTION, PRINT_GROUP_CODE: {}, FOOD_ITEM_DOTS: {}, EXCEPTION: {}", printGroupCode, foodItemDtos, e);
						// trường hợp khi lưu có lỗi thì revert lại tất cả các bản ghi
						if(!CollectionUtils.isEmpty(foodItemDtos)) {
							foodItemDtos.stream().forEach(r ->{
								IOPrintGroupDto ioPrintGroupDto = new IOPrintGroupDto();
								ioPrintGroupDto.setError(e.getMessage());
								ioPrintGroupDto.setFoodItemCode(r.getCode());
								ioPrintGroupDto.setFoodItemName(r.getName());
								ioPrintGroupDto.setStatus(false);
								ioPrintGroupDto.setPrintGroupCode(printGroupCode);
								ioPrintGroupDto.setKitchenType(kitchenType);
								ioPrintGroupErrs.add(ioPrintGroupDto);
							});
						}
					}
				});
			}
		}
		return ioPrintGroupErrs;
	}
	
}