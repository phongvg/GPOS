package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import com.gg.gpos.common.constant.RK7ItemStatusEnum;
import com.gg.gpos.menu.dto.OrderCategoryDto;
import com.gg.gpos.menu.entity.OrderCategory;
import com.gg.gpos.menu.mapper.OrderCategoryMapper;
import com.gg.gpos.menu.repository.OrderCategoryRepository;
import com.gg.gpos.menu.specification.ReferenceObjectSpecification;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class OrderCategoryManager {
	@Autowired
	private OrderCategoryRepository orderCategoryRepository;
	@Autowired
	private OrderCategoryMapper orderCategoryMapper;
	@Autowired
	private ReferenceObjectSpecification<OrderCategory> referenceObjectSpecification;
	
	public OrderCategoryDto get(Long id) {
		return orderCategoryRepository.findById(id).map(orderCategoryMapper::entityToDto).orElse(null);
	}
	
	public List<OrderCategoryDto> gets() {
		return orderCategoryRepository.findActives().stream().map(orderCategoryMapper::entityToDto).collect(Collectors.toList());
	}

	public List<OrderCategoryDto> gets(Long soId) {
		if (soId != null) {
			return orderCategoryRepository.filterNotInSo(soId).stream().map(orderCategoryMapper::entityToDto).collect(Collectors.toList());
		} else {
			return orderCategoryRepository.findByStatusOrderByNameAsc(RK7ItemStatusEnum.ACTIVE.getStatus()).stream().map(orderCategoryMapper::entityToDto).collect(Collectors.toList());
		}
	}
	
	public List<OrderCategoryDto> gets(Integer resCode) {
		return orderCategoryRepository.filterNotInRestaurant(resCode).stream().map(orderCategoryMapper::entityToDto).collect(Collectors.toList());
	}
	
	public void save(List<OrderCategoryDto> orderCategoryDtos) {
		log.debug("PROCESS: SAVE ORDER_CATEGORIES, ORDER_CATEGORY_DTOS: {}", orderCategoryDtos);
		if (!orderCategoryDtos.isEmpty()) {
			orderCategoryDtos.stream().forEach(f -> {
				OrderCategory orderCategory = Optional.ofNullable(f).map(orderCategoryMapper::dtoToEntity).orElse(null);
				if (orderCategory != null) {
					orderCategoryRepository.save(orderCategory);
				}
			});
		}
	}
	
	public Page<OrderCategoryDto> gets(OrderCategoryDto criteria) {
		log.debug("PROCESS: GETS ORDER_CATEGORY, ORDER_CATEGORY_DTO: {}", criteria);
		Specification<OrderCategory> spec = Specification.where(referenceObjectSpecification.search(criteria.getCode(), criteria.getName(), criteria.getStatus()));
		Page<OrderCategory> page = orderCategoryRepository.findAll(spec, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(orderCategoryMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
}