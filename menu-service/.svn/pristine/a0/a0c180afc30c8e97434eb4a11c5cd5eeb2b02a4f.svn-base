package com.gg.gpos.menu.repository;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.gg.gpos.menu.entity.CoCategory;
import com.gg.gpos.menu.entity.SoCategory;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface CoCategoryRepository extends JpaRepository<CoCategory, Long>, JpaSpecificationExecutor<CoCategory> {
	Page<CoCategory> findByCoIdAndRestaurantCodeIsNull(Long cId,Pageable pageable);
	Page<CoCategory> findByRestaurantCode(Integer resCode,Pageable pageable);
	List<CoCategory> findByCoIdAndRestaurantCodeIsNull(Long cId);
	List<CoCategory> findByRestaurantCode(Integer resCode);
	List<CoCategory> findByRestaurantCodeAndCoIdIsNull(Integer resCode);
	Page<CoCategory> findByRestaurantCodeAndCoIdIsNull(Integer resCode,Pageable pageable);
	@Query("from CoCategory cc where cc.soCategory.id = :scId")
	List<CoCategory> findByScId(Long scId);
	CoCategory findBySoCategoryAndRestaurantCode(SoCategory soCategory, Integer restaurantCode);
	@Query("from CoCategory cc where cc.soCategory.id = :scId and cc.coId = :coId and cc.restaurantCode is null")
	CoCategory findBySoCategoryIdAndCoIdAndResCodeIsNull(@Param("scId")Long scId,@Param("coId")Long coId);
	List<CoCategory> findByIdIn(List<Long> ids);
	List<CoCategory> findBySoCategoryAndRestaurantCodeIsNull(SoCategory soCategory);
	
	@Query("from CoCategory cc where cc.soCategory.orderCategory.code = :orderCode and cc.restaurantCode = :restaurantCode")
	CoCategory findByorderCategoryCodeAndResCode(@Param("orderCode")String orderCode,@Param("restaurantCode")Integer restaurantCode);
	List<CoCategory> findBySoCategory_Id(Long scId);
	CoCategory findBySoCategoryAndCoId(SoCategory soCategory, Long coId);
	@Query("from CoCategory cc where cc.restaurantCode = :resCode and cc.soCategory.orderCategory.code in :codes and cc.coId is not null")
	List<CoCategory> findByResCodeAndCoIdIsNotNullAndOrderCategoryCodeIn(@Param("resCode") Integer resCode,@Param("codes")List<String> codes);
	@Query("select cc.soCategory.orderCategory.code from CoCategory cc where cc.restaurantCode = :restaurantCode and cc.coId is null")
	List<String> findOrderCateCodes(@Param("restaurantCode") Integer resCode);
	@Query("from CoCategory cc where cc.soCategory.orderCategory.code = :orderCode and cc.coId =:coId and cc.restaurantCode is null")
	CoCategory findByorderCategoryCodeAndCoId(@Param("orderCode")String orderCode,@Param("coId")Long coId);
}