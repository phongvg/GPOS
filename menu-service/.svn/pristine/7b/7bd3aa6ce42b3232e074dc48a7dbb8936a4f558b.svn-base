package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.gg.gpos.menu.dto.FoodGroupDto;
import com.gg.gpos.menu.dto.SoCategoryDto;
import com.gg.gpos.menu.dto.SoCategoryFoodGroupDto;
import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.SoCategory;
import com.gg.gpos.menu.entity.SoCategoryFoodGroup;
import com.gg.gpos.menu.mapper.FoodGroupMapper;
import com.gg.gpos.menu.mapper.SoCategoryFoodGroupMapper;
import com.gg.gpos.menu.mapper.SoCategoryMapper;
import com.gg.gpos.menu.repository.SoCategoryFoodGroupRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class SoCategoryFoodGroupManager {
	@Autowired
	private SoCategoryFoodGroupRepository soCategoryFoodGroupRepository;
	@Autowired
	private SoCategoryFoodGroupMapper soCategoryFoodGroupMapper;
	@Autowired
	private SoCategoryMapper soCategoryMapper;
	@Autowired
	private FoodGroupMapper foodGroupMapper;
	
	public SoCategoryFoodGroupDto get(Long id) {
		log.debug("Entering 'get' method...");
		return soCategoryFoodGroupRepository.findById(id).map(soCategoryFoodGroupMapper::entityToDto).orElse(null);
	}
	
	public List<SoCategoryFoodGroupDto> gets() {
		return soCategoryFoodGroupRepository.findAll().stream().map(soCategoryFoodGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public SoCategoryFoodGroupDto save(SoCategoryFoodGroupDto soCategoryFoodGroupDto) {
		SoCategoryFoodGroup soCategoryFoodGroup = Optional.ofNullable(soCategoryFoodGroupDto).map(soCategoryFoodGroupMapper::dtoToEntity).orElse(null);
		if (soCategoryFoodGroup != null) {
			return Optional.ofNullable(soCategoryFoodGroupRepository.save(soCategoryFoodGroup)).map(soCategoryFoodGroupMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public SoCategoryFoodGroupDto getBySoCategoryAndFoodGroupAndRestaurantCodeIsNull(SoCategoryDto soCategoryDto,FoodGroupDto foodGroupDto) {
		FoodGroup foodGroup = Optional.ofNullable(foodGroupDto).map(foodGroupMapper::dtoToEntity).orElse(null);
		SoCategory soCategory = Optional.ofNullable(soCategoryDto).map(soCategoryMapper	::dtoToEntity).orElse(null);
		return Optional.ofNullable(soCategoryFoodGroupRepository.findBySoCategoryAndFoodGroupAndRestaurantCodeIsNull(soCategory, foodGroup)).map(soCategoryFoodGroupMapper::entityToDto).orElse(null);
	}
	
	public SoCategoryFoodGroupDto saveSCFG(SoCategoryFoodGroupDto soCategoryFoodGroupDto) {
		FoodGroup foodGroup = Optional.ofNullable(soCategoryFoodGroupDto.getFoodGroup()).map(foodGroupMapper::dtoToEntity).orElse(null);
		SoCategory soCategory = Optional.ofNullable(soCategoryFoodGroupDto.getSoCategory()).map(soCategoryMapper	::dtoToEntity).orElse(null);
		SoCategoryFoodGroup soCategoryFoodGroup = Optional.ofNullable(soCategoryFoodGroupDto).map(soCategoryFoodGroupMapper::dtoToEntity).orElse(null);
		if (soCategoryFoodGroup != null) {
			soCategoryFoodGroup.setFoodGroup(foodGroup);
			soCategoryFoodGroup.setSoCategory(soCategory);
			return Optional.ofNullable(soCategoryFoodGroupRepository.save(soCategoryFoodGroup)).map(soCategoryFoodGroupMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public void deleteSoCategoryIfHasFoodGroupNull() {
		log.debug("PROCESS FUNCTION: DELETE SO_CATEGORY IF HAS FOOD_GROUP IS NULL");
		try {
			List<Long> soCategoryFoodGroupIds = soCategoryFoodGroupRepository.findSoCategoryFoodGroupIds();
			if(!CollectionUtils.isEmpty(soCategoryFoodGroupIds)) {
				soCategoryFoodGroupRepository.deleteByIdIn(soCategoryFoodGroupIds);			}
		} catch (Exception e) {
			log.error("ERROR PROCESS FUNCTION: DELETE SO_CATEGORY IF HAS FOOD_GROUP IS NULL EXCEPTION: {}", e);
		}
	}
	
}