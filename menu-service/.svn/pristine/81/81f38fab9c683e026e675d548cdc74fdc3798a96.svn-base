package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.gg.gpos.menu.dto.ModifierDto;
import com.gg.gpos.menu.entity.Modifier;
import com.gg.gpos.menu.mapper.ModifierMapper;
import com.gg.gpos.menu.repository.ModifierRepository;
import com.gg.gpos.menu.specification.ReferenceObjectSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class ModifierManager {
	@Autowired
	private ModifierRepository modifierRepository;
	@Autowired
	private ModifierMapper modifierMapper;
	@Autowired
	private ReferenceObjectSpecification<Modifier> referenceObjectSpecification;
	
	public ModifierDto get(Long id) {
		return modifierRepository.findById(id).map(modifierMapper::entityToDto).orElse(null);
	}
	
	public void save(List<ModifierDto> modifierDtos) {
		log.debug("PROCESS: SAVE MODIFIED, MODIFIED_DTOS: {}", modifierDtos);
		if (!modifierDtos.isEmpty()) {
			modifierDtos.stream().forEach(f -> {
				Modifier modifier = Optional.ofNullable(f).map(modifierMapper::dtoToEntity).orElse(null);
				if (modifier != null) {
					modifierRepository.save(modifier);
				}
			});
		}
	}
	
	public Page<ModifierDto> gets(ModifierDto criteria){
		log.debug("PROCESS: GETS MODIFIED, MODIFIED_DTO: {}", criteria);
		Specification<Modifier> spec = Specification.where(referenceObjectSpecification.search(criteria.getCode(), criteria.getName(), criteria.getStatus()));
		Page<Modifier> page = modifierRepository.findAll(spec, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(modifierMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public List<ModifierDto> getByCode(String code) {
		return modifierRepository.findByCode(code).stream().map(modifierMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<ModifierDto> gets(String query) {
		log.debug("Entering 'gets("+query+")' method...");
		return modifierRepository.findByUnsignedNameStartingWithOrCodeStartingWith(query,query).stream().map(modifierMapper::entityToDto).collect(Collectors.toList());
	}
}