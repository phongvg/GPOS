package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.gg.gpos.menu.dto.AreaDto;
import com.gg.gpos.menu.entity.Area;
import com.gg.gpos.menu.mapper.AreaMapper;
import com.gg.gpos.menu.repository.AreaRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class AreaManager {
	private AreaRepository areaRepository;
	@Autowired
	public void setAreaRepository(AreaRepository areaRepository) {
		this.areaRepository = areaRepository;
	}
	private AreaMapper areaMapper;
	@Autowired
	public void setAreaMapper(AreaMapper areaMapper) {
		this.areaMapper = areaMapper;
	}
	
	public AreaDto get(Long id) {
		return areaRepository.findById(id).map(areaMapper::entityToDto).orElse(null);
	}
	
	public List<AreaDto> gets() {
		return areaRepository.findAll().stream().map(areaMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<AreaDto> gets(Integer rCode) {
		return areaRepository.findByRestaurantCode(rCode).stream().map(areaMapper::entityToDto).collect(Collectors.toList());
	}
	
	public AreaDto save(AreaDto areaDto) {
		Area area = Optional.ofNullable(areaDto).map(areaMapper::dtoToEntity).orElse(null);
		if (area != null) {
			return Optional.ofNullable(areaRepository.save(area)).map(areaMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<AreaDto> getCatalogs(AreaDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Page<Area> page = areaRepository.findByRestaurantCode(null, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(areaMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public Page<AreaDto> gets(AreaDto criteria) {
		log.debug("Entering 'gets(criteria)' method...");
		Page<Area> page = areaRepository.findByRestaurantCode(criteria.getRestaurantCode(), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(areaMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public void delete(AreaDto areaDto) {
		Area area = Optional.ofNullable(areaDto).map(areaMapper::dtoToEntity).orElse(null);
		if(area != null) {
			areaRepository.delete(area);
		}
	}
	public List<AreaDto> getByResCode(Integer rCode) {
		return areaRepository.findByRestaurantCode(rCode).stream().map(areaMapper::entityToDto).collect(Collectors.toList());
	}
	
	public AreaDto getOneByRestaurantCode(Integer restaurantCode) {
		List<Area> areas = areaRepository.findByRestaurantCode(restaurantCode);
		if(areas != null && !areas.isEmpty()) {
			return Optional.ofNullable(areas.get(0)).map(areaMapper::entityToDto).orElse(null);
		}else {
			return null;
		}
	}
}