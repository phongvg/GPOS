package com.gg.gpos.menu.specification;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.gg.gpos.menu.dto.FoodGroupDto;
import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.So;
import com.gg.gpos.menu.entity.SoCategory;
import com.gg.gpos.menu.entity.SoCategoryFoodGroup;

@Component
public class FoodGroupSpecification {
	public Specification<FoodGroup> filter(final FoodGroupDto criteria){
		return (root, cq, cb) -> {
			List<Predicate> predicates = new ArrayList<>();
			
			if (criteria.getSoId() != null) {
				Join<FoodGroup, SoCategoryFoodGroup> soCategoryFoodGroupRoot = root.join("soCategoryFoodGroups");
				predicates.add(cb.isNull(soCategoryFoodGroupRoot.get("restaurantCode")));
				Join<SoCategoryFoodGroup, SoCategory> soCategoryRoot = soCategoryFoodGroupRoot.join("soCategory");
				predicates.add(cb.isNull(soCategoryRoot.get("restaurantCode")));
				Join<SoCategory, So> soRoot = soCategoryRoot.join("so");
				predicates.add(cb.equal(soRoot.get("id"), criteria.getSoId()));
			}
			
			if (!StringUtils.isEmpty(criteria.getNameVn())) {
				predicates.add(cb.like(root.get("nameVn"), "%"+ criteria.getNameVn() +"%"));
			}
			
			return cb.and(predicates.stream().toArray(Predicate[]::new));
		};
	}
}
