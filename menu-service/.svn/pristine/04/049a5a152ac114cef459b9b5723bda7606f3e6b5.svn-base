package com.gg.gpos.menu.manager;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.gg.gpos.menu.dto.CurrencyRateDto;
import com.gg.gpos.menu.entity.CurrencyRate;
import com.gg.gpos.menu.mapper.CurrencyRateMapper;
import com.gg.gpos.menu.repository.CurrencyRateRepository;
import com.gg.gpos.menu.specification.CurrencyRateSpecification;
import com.gg.gpos.menu.specification.ReferenceObjectSpecification;


/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Service
public class CurrencyRateManager {
	private CurrencyRateRepository currencyRateRepository;
	@Autowired
	public void setCurrencyRateRepository(CurrencyRateRepository currencyRateRepository) {
		this.currencyRateRepository = currencyRateRepository;
	}
	private CurrencyRateMapper currencyRateMapper;
	@Autowired
	public void setCurrencyRateMapper(CurrencyRateMapper currencyRateMapper) {
		this.currencyRateMapper = currencyRateMapper;
	}
	
	@Autowired
	private CurrencyRateSpecification<CurrencyRate> currencyRateSpecification;
	
	public CurrencyRateDto get(Long id) {
		return currencyRateRepository.findById(id).map(currencyRateMapper::entityToDto).orElse(null);
	}
	
	public CurrencyRateDto save(CurrencyRateDto currencyRateDto) {
		CurrencyRate currencyRate = Optional.ofNullable(currencyRateDto).map(currencyRateMapper::dtoToEntity).orElse(null);
		if (currencyRate != null) {
			return Optional.ofNullable(currencyRateRepository.save(currencyRate)).map(currencyRateMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public void save(List<CurrencyRateDto> currencyDtos) {
		if (!currencyDtos.isEmpty()) {
			currencyDtos.stream().forEach(cr -> {
				CurrencyRate currencyRate = Optional.ofNullable(cr).map(currencyRateMapper::dtoToEntity).orElse(null);
				if ( currencyRate != null) {
					currencyRateRepository.save(currencyRate);
				}
			});
		}
	}
	
	public Page<CurrencyRateDto> gets(CurrencyRateDto criteria) {
		Specification<CurrencyRate> spec = Specification.where(currencyRateSpecification.search(criteria.getRate(), criteria.getStatus()));
		
		Page<CurrencyRate> page = currencyRateRepository.findAll(spec, PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(currencyRateMapper::entityToDto).collect(Collectors.toList()), PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
}