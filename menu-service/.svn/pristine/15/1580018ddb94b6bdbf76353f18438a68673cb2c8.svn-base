package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.menu.dto.KdsDto;
import com.gg.gpos.menu.entity.FoodItem;
import com.gg.gpos.menu.entity.Kds;
import com.gg.gpos.menu.entity.KitchenType;
import com.gg.gpos.menu.entity.PrintGroup;
import com.gg.gpos.menu.mapper.KdsMapper;
import com.gg.gpos.menu.repository.KdsRepository;
import com.gg.gpos.menu.repository.KitchenTypeRepository;
import com.gg.gpos.menu.repository.PrintGroupRepository;
import com.gg.gpos.menu.specification.KdsSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class KdsManager {
	private KdsRepository kdsRepository;
	@Autowired
	public void setKdsRepository(KdsRepository kdsRepository) {
		this.kdsRepository = kdsRepository;
	}
	private KdsMapper kdsMapper;
	@Autowired
	public void setKdsMapper(KdsMapper kdsMapper) {
		this.kdsMapper = kdsMapper;
	}
	@Autowired
	private KdsSpecification kdsSpecification;
	
	@Autowired
	private PrintGroupRepository printGroupRepository;
	@Autowired
	private KitchenTypeRepository kitchenTypeRepository;
	
	public KdsDto get(Long id) {
		return kdsRepository.findById(id).map(kdsMapper::entityToDto).orElse(null);
	}
	
	public KdsDto getByCode(Integer resCode) {
		return Optional.ofNullable(kdsRepository.findByRestaurantCode(resCode)).map(kdsMapper::entityToDto).orElse(null);
	}
	
	public List<KdsDto> gets() {
		return kdsRepository.findByStatusIsTrue().stream().map(kdsMapper::entityToDto).collect(Collectors.toList());
	}
	
	public KdsDto save(KdsDto kdsDto) {
		Kds kds = Optional.ofNullable(kdsDto).map(kdsMapper::dtoToEntity).orElse(null);
		if (kds != null) {
			return Optional.ofNullable(kdsRepository.save(kds)).map(kdsMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<KdsDto> gets(KdsDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Specification<Kds> specs = Specification.not(null);
		if (!StringUtils.isEmpty(criteria.getName())) {
			specs = Specification.where(kdsSpecification.codeLike(criteria.getName()));
		}
		Page<Kds> page = kdsRepository.findAll(specs,PageRequest.of(criteria.getPage(), criteria.getSize(), Sort.by(Sort.Direction.DESC, "createdDate")));
		return new PageImpl<>(page.getContent().stream().map(kdsMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public void apply(KdsDto kdsDto) {
		log.debug("Entering 'apply' method...");
		Set<String> keys = StringUtils.commaDelimitedListToSet(kdsDto.getSelectedRestaurantCodes());
        List<String> filterKey = keys.stream().filter(key -> !key.contains(SymbolEnum.UNDERSCORE.val)).collect(Collectors.toList());

        Kds kds = kdsRepository.getOne(kdsDto.getId());
        kds.setStatus(true);
        kdsRepository.save(kds);
        
        //Delete old data
        List<Integer> restaurantCodes = printGroupRepository.findRestaurantCodes(kdsDto.getId());
        if(restaurantCodes != null && !restaurantCodes.isEmpty()) {
	        restaurantCodes.stream().forEach(resCode -> {
	        	deletePrintGroupData(resCode, kdsDto.isOverride());
	        });
        }
        // apply new data
        List<PrintGroup> printGroups = printGroupRepository.findByKdsAndRestaurantCodeIsNull(kds);
        filterKey.stream().forEach(resCode -> {
        	//Delete old data
        	deletePrintGroupData(Integer.valueOf(resCode), kdsDto.isOverride());
        	printGroups.stream().forEach(pg -> {
        		
        		List<FoodItem> newFoodItems = new ArrayList<>(pg.getFoodItems());
        		PrintGroup newPrintGroup = new PrintGroup();
        		newPrintGroup.setCode(pg.getCode());
        		newPrintGroup.setFoodItems(newFoodItems);
        		newPrintGroup.setKds(pg.getKds());
        		newPrintGroup.setKitchenType(pg.getKitchenType());
        		newPrintGroup.setRestaurantCode(Integer.valueOf(resCode));
        		printGroupRepository.save(newPrintGroup);
        	});
        });
	}
	
	public void applyFromRestaurant(KdsDto kdsDto) {
		log.debug("Entering 'apply' method...");
		deletePrintGroupData(kdsDto.getRestaurantCode(), kdsDto.isOverride());
		
		Kds kds = new Kds();
        kds.setId(kdsDto.getId());
		List<PrintGroup> printGroups = printGroupRepository.findByKdsAndRestaurantCodeIsNull(kds);
		if (!printGroups.isEmpty()) {
			printGroups.stream().forEach(pg -> {
        		
        		List<FoodItem> newFoodItems = new ArrayList<>(pg.getFoodItems());
        		PrintGroup newPrintGroup = new PrintGroup();
        		newPrintGroup.setCode(pg.getCode());
        		newPrintGroup.setFoodItems(newFoodItems);
        		newPrintGroup.setKds(pg.getKds());
        		newPrintGroup.setKitchenType(pg.getKitchenType());
        		newPrintGroup.setRestaurantCode(kdsDto.getRestaurantCode());
        		printGroupRepository.save(newPrintGroup);
        	});
		}
	}
	
	public void copy(KdsDto kdsDto) {
		log.debug("Entering 'copy' method...");
		List<PrintGroup> printGroups = printGroupRepository.findByRestaurantCode(kdsDto.getRestaurantCode());
		List<KitchenType> kitchenTypes = kitchenTypeRepository.findByRestaurantCode(kdsDto.getRestaurantCode());
		if(kitchenTypes != null && !kitchenTypes.isEmpty()) {
			kdsDto.getResCodes().stream().forEach(resCode ->{
				kitchenTypeRepository.deleteByRestaurantCode(resCode);
				kitchenTypes.stream().forEach(kt ->{
					KitchenType kitchenType = new KitchenType();
					kitchenType.setRestaurantCode(resCode);
					kitchenType.setName(kt.getName());
					kitchenTypeRepository.save(kitchenType);
				});
			});
		}
		if (!printGroups.isEmpty()) {
			kdsDto.getResCodes().stream().forEach(resCode -> {
				deletePrintGroupData(resCode, kdsDto.isOverride());
				
				printGroups.stream().forEach(pg -> {
	    		
	        		List<FoodItem> newFoodItems = new ArrayList<>(pg.getFoodItems());
	        		PrintGroup newPrintGroup = new PrintGroup();
	        		newPrintGroup.setCode(pg.getCode());
	        		newPrintGroup.setFoodItems(newFoodItems);
	        		newPrintGroup.setKds(pg.getKds());
	        		newPrintGroup.setKitchenType(pg.getKitchenType());
	        		newPrintGroup.setRestaurantCode(resCode);
	        		printGroupRepository.save(newPrintGroup);
	        	});
			});
		}
	}
	
	
	private void deletePrintGroupData(Integer resCode, boolean isFull) {
		log.debug("Entering 'deletePrintGroupData' method...");
		if (isFull) {
			printGroupRepository.deleteByRestaurantCode(resCode);
		} else {
			printGroupRepository.deleteByRestaurantCodeAndKdsIsNotNull(resCode);
		}
		
	}
	
	public void off(KdsDto kdsDto) {
		log.debug("Entering 'off' method...");
		Kds kds = new Kds();
		kds.setId(kdsDto.getId());
		
		List<Integer> restaurantCodes = printGroupRepository.findRestaurantCodes(kdsDto.getId());
		restaurantCodes.stream().forEach(resCode -> {
			List<PrintGroup> printGroups = printGroupRepository.findByRestaurantCodeAndKdsIsNotNull(resCode);
			if(printGroups != null && !printGroups.isEmpty()) {
				printGroups.stream().forEach(pg -> printGroupRepository.delete(pg));
			}
		});
	
	}
	
	public boolean checkDataCatalog(KdsDto kdsDto) {
		log.debug("Entering 'checkDataCatalog' method...");
		Kds kds = Optional.ofNullable(kdsDto).map(kdsMapper::dtoToEntity).orElse(null);
		if(kds != null) {
			List<PrintGroup> printGroups = printGroupRepository.findByKdsAndRestaurantCodeIsNull(kds);
			if(printGroups != null && !printGroups.isEmpty()) {
				return true;
			}
		}
		return false;
	}
}