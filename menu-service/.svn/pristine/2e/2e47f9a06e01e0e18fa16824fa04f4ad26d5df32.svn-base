package com.gg.gpos.menu.repository;

import java.util.List;
import java.util.Set;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.FoodGroupItem;
import com.gg.gpos.menu.entity.FoodItem;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface FoodGroupItemRepository extends JpaRepository<FoodGroupItem, Long>, JpaSpecificationExecutor<FoodGroupItem> {
	FoodGroupItem findByFoodGroupAndFoodItemAndRestaurantCodeNull(FoodGroup foodGroup, FoodItem foodItem);
	FoodGroupItem findByFoodGroupAndFoodItem_codeAndRestaurantCodeNull(FoodGroup foodGroup, String foodItemCode);
	FoodGroupItem findByFoodGroupAndFoodItemAndRestaurantCode(FoodGroup foodGroup, FoodItem foodItem, Integer resCode);
	FoodGroupItem findByFoodGroupAndFoodItemAndRestaurantCodeAndChanged(FoodGroup foodGroup, FoodItem foodItem, Integer resCode,Integer changed);
	
	List<FoodGroupItem> findByFoodGroupAndRestaurantCode(FoodGroup foodGroup, Integer restaurantCode);
	List<FoodGroupItem> findByFoodGroupAndRestaurantCodeIsNull(FoodGroup foodGroup);
	List<FoodGroupItem> findByFoodGroup(FoodGroup foodGroup);
	List<FoodGroupItem> findByFoodGroupAndChanged(FoodGroup foodGroup,Integer changed);
	List<FoodGroupItem> findByFoodGroupAndChangedAndRestaurantCode(FoodGroup foodGroup,Integer changed,Integer resCode);
	

	void deleteByFoodGroupAndRestaurantCode(FoodGroup foodGroup, Integer restaurantCode);
	void deleteByFoodGroupAndRestaurantCodeIsNull(FoodGroup foodGroup);
	void deleteByFoodGroupAndFoodItemAndRestaurantCode(FoodGroup foodGroup, FoodItem foodItem, Integer restaurantCode);
	void deleteByFoodGroupAndFoodItemAndRestaurantCodeIsNull(FoodGroup foodGroup, FoodItem foodItem);
	void deleteByRestaurantCode(Integer restaurantCode);
	
	@Query("from FoodGroupItem fgi where fgi.foodGroup.id = :fgId order by fgi.itemOrder ASC")
	List<FoodGroupItem> findByFoodGroupId(@Param("fgId") Long fgId);

	@Query("select distinct fgi.foodItem.id from FoodGroupItem fgi where fgi.foodGroup.id in :foodGroupIds")
	Set<Long> findFoodItemIds(List<Long> foodGroupIds);
	
	@Query("select distinct fgi.foodItem.id from FoodGroupItem fgi where fgi.foodGroup.id = :foodGroupId")
	Set<Long> findFoodItemId(Long foodGroupId);
	
	long countByFoodItem_Id(Long foodItemId);
	
	@Query("from FoodGroupItem fgi where fgi.foodGroup.id = :fgId and fgi.foodItem.code = :fiCode and fgi.restaurantCode is null")
	FoodGroupItem findByFoodGroupAndFoodItemCode(Long fgId, String fiCode);
	
	@Query("select count(fi) from FoodItem fi inner join fi.foodGroupItems fgi inner join fgi.foodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc inner join sc.so so where so.id = :soId and fi.id = :fId")
	Long coutBySoIdAndFoodItemId(@Param("soId") Long soId,@Param("fId") Long fId);
	
	@Query("select count(fi) from FoodItem fi inner join fi.foodGroupItems fgi inner join fgi.foodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where sc.restaurantCode = :restaurantCode and fi.id = :fId")
	Long coutByResCodeAndFoodItemId(@Param("restaurantCode") Integer restaurantCode,@Param("fId") Long fId);
	
	List<FoodGroupItem> findByFoodGroupAndRestaurantCodeOrderByItemOrderAsc(FoodGroup foodGroup, Integer restaurantCode);
	List<FoodGroupItem> findByFoodGroupAndRestaurantCodeIsNullOrderByItemOrderAsc(FoodGroup foodGroup);
	
	void deleteByFoodGroupAndChangedAndRestaurantCode(FoodGroup foodGroup, Integer changed, Integer restaurantCode);
	
	@Query("from FoodGroupItem fgi where fgi.foodGroup.id = :fgId and fgi.restaurantCode =:restaurantCode and (fgi.changed !=:changed or fgi.changed is null)")
	List<FoodGroupItem> findByFoodGroupIdAndResCodeAndChanged(@Param("fgId")Long foodGroupId,@Param("restaurantCode") Integer restaurantCode,@Param("changed") Integer changed);
	
	@Query("from FoodGroupItem fgi where fgi.foodGroup.id = :fgId and fgi.restaurantCode =:restaurantCode and (fgi.changed =:changed or fgi.changed is null)")
	List<FoodGroupItem> findByFGroupIdAndResCodeAndChanged(@Param("fgId")Long foodGroupId,@Param("restaurantCode") Integer restaurantCode,@Param("changed") Integer changed);
	
	@Query("from FoodGroupItem fgi inner join fgi.foodItem fi inner join fgi.foodGroup fg where (fi.code like %:keyword% or fi.unsignedName like %:keyword%) and  fi.status=3 and fgi.restaurantCode is null and (fg.code like %:keywordFg% or fg.unsignedName like %:keywordFg%) and fg.restaurantCode is null and (fg.changed !=:changed or fg.changed is null)")
	List<FoodGroupItem> findByFiCodeorNameAndFgCodeorNameAndChanged(@Param("keyword")String keyword,@Param("changed") Integer changed,@Param("keywordFg") String keywordFg);
	
	@Query("from FoodGroupItem fgi inner join fgi.foodItem fi inner join fgi.foodGroup fg where (fi.code like %:keyword% or fi.unsignedName like %:keyword%) and  fi.status=3 and fgi.restaurantCode is null and fg.restaurantCode is null and (fg.changed !=:changed or fg.changed is null)")
	List<FoodGroupItem> findByFiCodeorNameAndChanged(@Param("keyword")String keyword,@Param("changed") Integer changed);
	
	@Query("from FoodGroupItem fgi inner join fgi.foodItem fi inner join fgi.foodGroup fg where (fi.code = :code) and  fi.status=3 and fgi.restaurantCode is null and fg.code =:fgCode and fg.restaurantCode is null and (fg.changed !=:changed or fg.changed is null)")
	FoodGroupItem findByFiCodeAndFgCodeAndChanged(@Param("code")String code,@Param("fgCode")String fgCode,@Param("changed") Integer changed);
	
	void deleteByIdIn(List<Long> ids);

}