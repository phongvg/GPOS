package com.gg.gpos.menu.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.MenuType;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface FoodGroupRepository extends JpaRepository<FoodGroup, Long>, JpaSpecificationExecutor<FoodGroup> {
	List<FoodGroup> findByCodeStartingWith(String code);
	FoodGroup findByCodeAndRestaurantCodeIsNull(String code);
	FoodGroup findByCodeAndRestaurantCode(String code, Integer restaurantCode);
	List<FoodGroup> findByMenuType(MenuType menuType);
	List<FoodGroup> findByParent(FoodGroup parent);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.so.id=:soId and fg.restaurantCode is null and fg.code=:groupCode and fg.parent is not null")
	FoodGroup findParent(String groupCode, Long soId);
	@Query("from FoodGroup fg where fg.code=:groupCode and fg.restaurantCode=:restaurantCode and fg.parent is not null")
	FoodGroup findParent(String groupCode, Integer restaurantCode);
	List<FoodGroup> findByRestaurantCode(Integer restaurantCode);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.so.id=:soId and fg.restaurantCode is null")
	List<FoodGroup> findBySoId(Long soId);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg where scfg.id = :scfgId")
	FoodGroup findBySoCategoryFoodGroupId(@Param("scfgId") Long scfgId);
	List<FoodGroup> findByCode(String code);
	List<FoodGroup> findByParentAndRestaurantCode(FoodGroup parent, Integer restaurantCode);
    @Query("select count(fg) from FoodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where sc.so.id=:soId and fg.code=:groupCode")
  	long countBySoAndCode(Long soId, String groupCode);
  	@Query("select count(fg) from FoodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where sc.restaurantCode=:resCode and fg.code=:groupCode")
  	long countByRestaurantAndCode(Integer resCode, String groupCode);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg where scfg.soCategory.id = :scId and scfg.foodGroup.code = :fgCode")
	FoodGroup findBySoCategoryIdAndFoodGroupCode(@Param("scId") Long scId, @Param("fgCode") String fgCode);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.id=:scId and fg.restaurantCode is null")
	List<FoodGroup> findBySoCategoryId( @Param("scId")Long scId);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.so.id=:soId and sc.id=:scId and fg.restaurantCode is null")
	List<FoodGroup> findBySoIdAndScId(@Param("soId") Long soId,@Param("scId") Long scId);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.id=:scId and fg.restaurantCode=:resCode")
	List<FoodGroup> findByScIdAndResCode(@Param("scId") Long scId,@Param("resCode") Integer resCode);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.so.id=:soId and sc.id=:scId and fg.restaurantCode is null and fg.code != :groupCode")
	List<FoodGroup> findBySoIdAndScIdAndCodeNot(@Param("soId") Long soId,@Param("scId") Long scId,@Param("groupCode") String groupCode);
	@Query("from FoodGroup fg join fetch fg.soCategoryFoodGroups scfg join fetch scfg.soCategory sc where sc.id=:scId and fg.restaurantCode=:resCode and fg.code != :groupCode")
	List<FoodGroup> findByScIdAndRestaurantCodeAndCodeNot(@Param("scId") Long scId,@Param("resCode") Integer resCode,@Param("groupCode") String groupCode);
	@Query("select fg.code from FoodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where sc.id =:scId and fg.restaurantCode=:restaurantCode and fg.changed =:changed")
	List<String> findFCodeByResCodeAndScIdAndChanged(@Param("restaurantCode") Integer restaurantCode,@Param("scId") Long scId,@Param("changed") Integer changed);
	@Query("from FoodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where sc.id =:scId and fg.restaurantCode is null and (fg.changed !=:changed or fg.changed is null)")
	List<FoodGroup> findByRCodeIsNullAndScIdAndChanged(@Param("scId") Long scId,@Param("changed") Integer changed);
	@Query("from FoodGroup fg where (fg.code like %:keyword% or fg.unsignedName like %:keyword%) and fg.restaurantCode is null and (fg.changed !=:changed or fg.changed is null)")
	List<FoodGroup> findByCodeOrNameVn(@Param("keyword") String keyword,@Param("changed") Integer changed);
	@Query("from FoodGroup fg where fg.restaurantCode is null and (fg.changed !=:changed or fg.changed is null) and fg.code in :codes")
	List<FoodGroup> findByFGCodeIn(@Param("codes") List<String> codes,@Param("changed") Integer changed);
}