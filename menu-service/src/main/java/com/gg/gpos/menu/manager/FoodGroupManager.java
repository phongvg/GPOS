package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import com.gg.gpos.menu.dto.FoodGroupDto;
import com.gg.gpos.menu.entity.CoCategory;
import com.gg.gpos.menu.entity.CoFoodGroupDisplay;
import com.gg.gpos.menu.entity.FoodGroup;
import com.gg.gpos.menu.entity.SoCategoryFoodGroup;
import com.gg.gpos.menu.mapper.FoodGroupMapper;
import com.gg.gpos.menu.repository.CoCategoryRepository;
import com.gg.gpos.menu.repository.CoFoodGroupDisplayRepository;
import com.gg.gpos.menu.repository.FoodGroupRepository;
import com.gg.gpos.menu.repository.SoCategoryFoodGroupRepository;
import com.gg.gpos.menu.specification.FoodGroupSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class FoodGroupManager {
	@Autowired
	private FoodGroupRepository foodGroupRepository;
	@Autowired
	private FoodGroupMapper foodGroupMapper;
	@Autowired
	private FoodGroupSpecification foodGroupSpecification;
	@Autowired
	private CoCategoryRepository coCategoryRepository;
	@Autowired
	private CoFoodGroupDisplayRepository coFoodGroupDisplayRepository;
	@Autowired
	private SoCategoryFoodGroupRepository soCategoryFoodGroupRepository;

	
	public List<FoodGroupDto> gets(Long soId) {
		return foodGroupRepository.findBySoId(soId).stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodGroupDto> gets() {
		return foodGroupRepository.findAll().stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodGroupDto> getFoodGroups(Long coCategoryId,Long soCategoryId,Integer restaurantCode) {
		List<SoCategoryFoodGroup> soCategoryFoodGroups = null;
		if (restaurantCode != null) {
			soCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCode(soCategoryId, restaurantCode);
		} else {
			soCategoryFoodGroups = soCategoryFoodGroupRepository.findBySoCategoryAndRestaurantCodeIsNull(soCategoryId);
		}
		List<FoodGroupDto> foodGroupDtos = new ArrayList<>();
		if(coCategoryId != null) {
			CoCategory coCategory = coCategoryRepository.getOne(coCategoryId);
			List<String> foodGroupCodes = new ArrayList<>();
			List<CoFoodGroupDisplay> coFoodGroupDisplays = coFoodGroupDisplayRepository.findByCoCategory(coCategory);
			if(soCategoryFoodGroups != null && !soCategoryFoodGroups.isEmpty()) {
				
				if(coFoodGroupDisplays != null && !coFoodGroupDisplays.isEmpty()) {
					foodGroupCodes = coFoodGroupDisplays.stream().map(cc -> cc.getFoodGroupCode()).collect(Collectors.toList());
				}
				List<String> foodGroupCode = foodGroupCodes;
				int j=0;
				
				soCategoryFoodGroups.stream().forEach(scfg ->{
					
					FoodGroupDto foodGroup = foodGroupMapper.entityToDto(scfg.getFoodGroup());
					if(foodGroupCode != null && !foodGroupCode.isEmpty() && foodGroupCode.contains(foodGroup.getCode())) {
						foodGroup.setSelected(true);
						for(int i=0 ;i < foodGroupCode.size(); i++) {
							if(foodGroup.getCode().equals(foodGroupCode.get(i))) {
								foodGroup.setSortIndex(i);
								break;
							}
						}
					}else {
						foodGroup.setSortIndex(j);
					}
					foodGroupDtos.add(foodGroup);
				});
			}
			Collections.sort(foodGroupDtos,new Comparator<FoodGroupDto>() {

				@Override
				public int compare(FoodGroupDto f0, FoodGroupDto f1) {

						return f0.getSortIndex() - f1.getSortIndex();
					
				}
			});
			return foodGroupDtos;
		}else {
			if(soCategoryFoodGroups != null && !soCategoryFoodGroups.isEmpty()) {
				soCategoryFoodGroups.stream().forEach(scfg ->{
					FoodGroupDto foodGroup = foodGroupMapper.entityToDto(scfg.getFoodGroup());
					foodGroupDtos.add(foodGroup);
				});
			}
			return foodGroupDtos;
		}
	}

	public List<FoodGroupDto> gets(Integer restaurantCode) {
		return foodGroupRepository.findByRestaurantCode(restaurantCode).stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodGroupDto> getParents(Long soId, Integer restaurantCode, String groupCode, Long scId) {
		log.info("Entering 'getParents(soId, restaurantCode, groupCode)' method...");
		log.debug("Params: soId: " + soId + ", restaurantCode: " + restaurantCode + ", groupCode: " + groupCode + ", soCategoryId: " + scId);
		
		List<FoodGroupDto> parents = new ArrayList<>();
		if(scId != null) {
			if (StringUtils.isNotBlank(groupCode)) {
				FoodGroup currentGroupWithParent = null;
				List<FoodGroup> parentList = null;
				
				if (restaurantCode != null) {
					currentGroupWithParent = foodGroupRepository.findParent(groupCode, restaurantCode);
					parentList = foodGroupRepository.findByScIdAndRestaurantCodeAndCodeNot(scId,restaurantCode, groupCode);
				} else {
					currentGroupWithParent = foodGroupRepository.findParent(groupCode, soId);
					parentList = foodGroupRepository.findBySoIdAndScIdAndCodeNot(soId,scId, groupCode);
				}
				
				final FoodGroup foodGroup = currentGroupWithParent;
				parents = parentList.stream().map(p -> {
					FoodGroupDto parent = new FoodGroupDto();
					if (foodGroup != null) {
						parent = foodGroupMapper.entityToDto(p);
						if (p.getId().equals(foodGroup.getParent().getId())) {
							parent.setSelected(true);
						}
					} else {
						parent = foodGroupMapper.entityToDto(p);
					}
					return parent;
				}).collect(Collectors.toList());
			} else {
				if (restaurantCode != null) {
					parents = foodGroupRepository.findByScIdAndResCode(scId,restaurantCode).stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList());
				} else {
					parents = foodGroupRepository.findBySoIdAndScId(soId,scId).stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList());
				}
			}
		}
		log.debug("parents.size(): " + parents.size());
		
		return parents;
	}
	
	
	public FoodGroupDto get(Long id) {
		return foodGroupRepository.findById(id).map(foodGroupMapper::entityToDto).orElse(null);
	}
	
	public FoodGroupDto save(FoodGroupDto foodGroupDto) {
		FoodGroup foodGroup = Optional.ofNullable(foodGroupDto).map(foodGroupMapper::dtoToEntity).orElse(null);
		if(foodGroup != null) {
			return Optional.ofNullable(foodGroupRepository.save(foodGroup)).map(foodGroupMapper::entityToDto).orElse(null);
		}else {
			return null;
		}
		
	}

	public Page<FoodGroupDto> gets(FoodGroupDto criteria) {
		log.info("Entering 'gets(criteia)' method...");
		
		Page<FoodGroup> page = foodGroupRepository.findAll(foodGroupSpecification.filter(criteria), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList()), PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}

	public List<FoodGroupDto> findByCode(String code){
		return foodGroupRepository.findByCode(code.trim()).stream().map(foodGroupMapper::entityToDto).collect(Collectors.toList());
	}
	
	public boolean checkCode(Long soId, Integer resCode, String code) {
		log.info("Entering 'checkCode(soId, resCode, code)' method...");
		log.debug("Param: soId: " + soId + ", resCode: " + resCode + ", code: " + code);
		
		long count = 0;
		if (resCode != null) {
			count = foodGroupRepository.countByRestaurantAndCode(resCode, code);
		} else {
			count = foodGroupRepository.countBySoAndCode(soId, code);
		}
		
		log.debug("count: " + count);
		return count > 0;
	}
}