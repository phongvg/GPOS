package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.gg.gpos.common.constant.StatusEnum;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.entity.Co;
import com.gg.gpos.menu.entity.FoodItem;
import com.gg.gpos.menu.mapper.FoodItemMapper;
import com.gg.gpos.menu.repository.CoRepository;
import com.gg.gpos.menu.repository.FoodItemRepository;
import com.gg.gpos.menu.specification.FoodItemSpecification;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class FoodItemManager {
	@Autowired
	private FoodItemRepository foodItemRepository;
	@Autowired
	private FoodItemMapper foodItemMapper;
	@Autowired
	private FoodItemSpecification foodItemSpecification;
	@Autowired
	private CoRepository coRepository;
	
	public FoodItemDto get(Long id) {
		return foodItemRepository.findById(id).map(foodItemMapper::entityToDto).orElse(null);
	}
	
	public List<FoodItemDto> gets() {
		return foodItemRepository.findActives().stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public void save(List<FoodItemDto> foodItemDtos) {
		log.debug("PROCESS: SAVE FOOD_ITEM, FOOD_ITEM_DTOS: {}", foodItemDtos);
		if (!foodItemDtos.isEmpty()) {
			foodItemDtos.stream().forEach(i -> {
				FoodItem foodItem = Optional.of(i).map(foodItemMapper::dtoToEntity).get();
				foodItemRepository.save(foodItem);
			});
		}
	}
	
	public Page<FoodItemDto> gets(FoodItemDto criteria) {
		log.debug("PROCESS: GETS FOOD_ITEM, FOOD_ITEM_DTO: {}", criteria);
		Page<FoodItem> page = foodItemRepository.findAll(foodItemSpecification.filter(criteria), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(foodItemMapper::entityToDto).collect(Collectors.toList()), PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public List<FoodItemDto> getFoodItemsInSo(Long soId,Long cId) {
		return foodItemRepository.findBySoId(soId,cId).stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> getFoodItemsInSo(Integer rCode) {
		return foodItemRepository.findFoodItemByResCode(rCode).stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> gets(Long foodGroupId, Integer restaurantCode) {
		log.debug("Entering 'gets("+foodGroupId+", "+restaurantCode+")' method...");
		
		if (foodGroupId != null) {
			List<FoodItem> foodItems = foodItemRepository.findAll();
			List<FoodItem> foodItemsInGroup = null;
			if (restaurantCode != null) {
				foodItemsInGroup = foodItemRepository.findByGroupIdAndRestaurantCode(foodGroupId, restaurantCode);
			} else {
				foodItemsInGroup = foodItemRepository.findByGroupId(foodGroupId);
			}
			
			// using a final copy variable to avoid issue: Local variable ... defined in an enclosing scope must be final or effectively final
			final List<FoodItem> copyFoodItemsInGroup = foodItemsInGroup;
			return foodItems.stream().map(fi -> {
				FoodItemDto foodItemDto = foodItemMapper.entityToDto(fi);
				copyFoodItemsInGroup.stream().forEach(fig -> {
					if (foodItemDto.getId().equals(fig.getId())) {
						foodItemDto.setSelected(true);
					}
				});
				return foodItemDto;
			}).collect(Collectors.toList());
		} else {
			return foodItemRepository.findAll().stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());	
		}
	}
	
	
	public List<FoodItemDto> gets(String query) {
		log.debug("Entering 'gets("+query+")' method...");
		return foodItemRepository.findByUnsignedNameOrCodeOrSapCode(query).stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> getExistingFoodItems(Long foodGroupId) {
		log.debug("Entering 'getExistingFoodItems("+foodGroupId+")' method...");
		return foodItemRepository.findByGroupIdAndChanged(foodGroupId,StatusEnum.DELETE.status).stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> getFromLocalStorage(String selectedFoodItems) {
		log.debug("Entering 'getExistingFoodItems()' method...");
		Set<String> keys = StringUtils.commaDelimitedListToSet(selectedFoodItems);
		List<FoodItem> list = new ArrayList<>();
		keys.forEach(k -> {
			list.add(foodItemRepository.getOne(Long.valueOf(k)));
		});
		
		return list.stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> gets(String unsignedName,Long cId) {
		Co co = coRepository.findById(cId).get();
		String name = unsignedName + SymbolEnum.PERCENT.val;
		List<FoodItem> foodItems = foodItemRepository.findFoodItemRelatedByName(co.getSoId() ,name);
		return foodItems.stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> getFItemInCatalos(String unsignedName,Long cId) {
		String name = unsignedName + SymbolEnum.PERCENT.val;
		System.out.println("name : " + name);
		List<FoodItem> foodItems = foodItemRepository.findFoodItemInCatalogByName(cId ,name);
		return foodItems.stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> getFItemInRes(String unsignedName,Integer resCode) {
		String name = unsignedName + SymbolEnum.PERCENT.val;
		List<FoodItem> foodItems = foodItemRepository.findFoodItemInResCodeAndName(resCode ,name);
		return foodItems.stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
	
	public List<FoodItemDto> gets(String unsignedName,Integer resCode) {
		String name = unsignedName + SymbolEnum.PERCENT.val;
		List<FoodItem> foodItems = foodItemRepository.findFoodItemByResCodeAndName(resCode ,name);
		return foodItems.stream().map(foodItemMapper::entityToDto).collect(Collectors.toList());
	}
}
