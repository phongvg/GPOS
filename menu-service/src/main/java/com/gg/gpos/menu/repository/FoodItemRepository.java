package com.gg.gpos.menu.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.gg.gpos.menu.entity.FoodItem;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface FoodItemRepository extends JpaRepository<FoodItem, Long>, JpaSpecificationExecutor<FoodItem> {
	@Query("from FoodItem fi where fi.status=3 and fi.code=:code")
	FoodItem findByCode(String code);
	@Query("from FoodItem fi join fetch fi.foodGroupItems fifgi where fifgi.foodGroup.id = :foodGroupId order by fifgi.itemOrder ASC")
	List<FoodItem> findByGroupId(@Param("foodGroupId") Long foodGroupId);
	@Query("from FoodItem fi join fetch fi.foodGroupItems fgi where fgi.foodGroup.id = :foodGroupId and fgi.restaurantCode=:restaurantCode")
	List<FoodItem> findByGroupIdAndRestaurantCode(@Param("foodGroupId") Long foodGroupId, @Param("restaurantCode") Integer restaurantCode);
	@Query("select distinct fi from FoodItem fi inner join fi.foodGroupItems fgi inner join fgi.foodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc inner join sc.so so where so.id = :soId and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi inner join cofi.co co where co.soId = :soId and co.id = :cId) order by fi.id")
	List<FoodItem> findBySoId(@Param("soId") Long soId,@Param("cId") Long cId);
	@Query("select distinct fi from FoodItem fi inner join fi.foodGroupItems fgi inner join fgi.foodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where sc.restaurantCode = :restaurantCode and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi where cofi.restaurantCode = :restaurantCode) order by fi.id")
	List<FoodItem> findFoodItemByResCode(@Param("restaurantCode") Integer restaurantCode);
	@Query("from FoodItem fi where (fi.status=3 and fi.unsignedName like :keyword%) or (fi.status=3 and fi.code like :keyword%) or (fi.status=3 and fi.sapCode like :keyword%)")
	List<FoodItem> findByUnsignedNameOrCodeOrSapCode(@Param("keyword")String keyword);
	@Query("from FoodItem fi where fi.status=3 and fi.id in :ids")
	List<FoodItem> findByIdIn(List<Long> ids);
	@Query("select distinct fi from FoodItem fi inner join fi.foodGroupItems fgi inner join fgi.foodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc inner join sc.so so where (fi.status=3 and so.id = :soId and fi.unsignedName like :query) or (fi.status=3 and so.id = :soId and fi.code like :query) order by fi.id")
	List<FoodItem> findFoodItemRelatedByName(@Param("soId") Long soId,@Param("query") String query);
	@Query("select distinct fi from FoodItem fi inner join fi.foodGroupItems fgi inner join fgi.foodGroup fg inner join fg.soCategoryFoodGroups scfg inner join scfg.soCategory sc where (fi.status=3 and sc.restaurantCode = :restaurantCode and fi.unsignedName like :query) or (fi.status=3 and sc.restaurantCode = :restaurantCode and fi.code like :query) order by fi.id")
	List<FoodItem> findFoodItemByResCodeAndName(@Param("restaurantCode") Integer restaurantCode,@Param("query") String query);
	@Query("from FoodItem fi where fi.status=3")
	List<FoodItem> findActives();
	@Query("select distinct fi from FoodItem fi where (fi.status=3 and fi.sapCode like :query and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi inner join cofi.co co where co.id = :cId and cofi.restaurantCode is null)) or (fi.status=3 and fi.unsignedName like :query and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi inner join cofi.co co where co.id = :cId and cofi.restaurantCode is null)) or (fi.status=3 and fi.code like :query and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi inner join cofi.co co where co.id = :cId and cofi.restaurantCode is null)) order by fi.id")
	List<FoodItem> findFoodItemInCatalogByName(@Param("cId") Long cId,@Param("query") String query);
	@Query("select distinct fi from FoodItem fi where (fi.status=3 and fi.sapCode like :query and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi where cofi.restaurantCode = :restaurantCode)) or (fi.status=3 and fi.unsignedName like :query and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi where cofi.restaurantCode = :restaurantCode)) or (fi.status=3 and fi.code like :query and fi.id not in (select cofi.foodItem.id from CoFoodItem cofi where cofi.restaurantCode = :restaurantCode)) order by fi.id")
	List<FoodItem> findFoodItemInResCodeAndName(@Param("restaurantCode") Integer restaurantCode,@Param("query") String query);
	@Query("from FoodItem fi join fetch fi.foodGroupItems fifgi where fifgi.foodGroup.id = :foodGroupId and (fifgi.changed !=:changed or fifgi.changed is null) order by fifgi.itemOrder ASC")
	List<FoodItem> findByGroupIdAndChanged(@Param("foodGroupId") Long foodGroupId,@Param("changed") Integer changed);
}