package com.gg.gpos.menu.manager;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import com.gg.gpos.menu.dto.KitchenDto;
import com.gg.gpos.menu.entity.Hallplan;
import com.gg.gpos.menu.entity.Kitchen;
import com.gg.gpos.menu.mapper.KitchenMapper;
import com.gg.gpos.menu.repository.HallplanRepository;
import com.gg.gpos.menu.repository.KitchenRepository;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
@Transactional
public class KitchenManager {
	@Autowired
	private KitchenRepository kitchenRepository;
	
	@Autowired
	private KitchenMapper kitchenMapper;
	@Autowired
	private HallplanRepository hallplanRepository;
	
	public KitchenDto get(Long id) {
		return kitchenRepository.findById(id).map(kitchenMapper::entityToDto).orElse(null);
	}
	
	public List<KitchenDto> gets() {
		return kitchenRepository.findAll().stream().map(kitchenMapper::entityToDto).collect(Collectors.toList());
	}
	
	public KitchenDto save(KitchenDto kitchenDto) {
		log.debug("Entering 'save' method...");
		List<Hallplan> hallplans = new ArrayList<>();
		List<Long> hallplanIds = kitchenDto.getHallplanIds();
		if(hallplanIds != null && !hallplanIds.isEmpty()) {
			hallplans = hallplanIds.stream().map(k -> hallplanRepository.getOne(k)).collect(Collectors.toList());
		}
		Kitchen kitchen = Optional.ofNullable(kitchenDto).map(kitchenMapper::dtoToEntity).orElse(null);
		if (kitchen != null) {
			kitchen.setHallplans(hallplans);
			return Optional.ofNullable(kitchenRepository.save(kitchen)).map(kitchenMapper::entityToDto).orElse(null);
		} else {
			return null;
		}
	}
	
	public Page<KitchenDto> gets(KitchenDto criteria){
		log.debug("Entering 'gets(criteria)' method...");
		Page<Kitchen> page = kitchenRepository.findByRestaurantCode(criteria.getRestaurantCode(), PageRequest.of(criteria.getPage(), criteria.getSize()));
		return new PageImpl<>(page.getContent().stream().map(kitchenMapper::entityToDto).collect(Collectors.toList()),PageRequest.of(criteria.getPage(), criteria.getSize()), page.getTotalElements());
	}
	
	public void delete(KitchenDto kitchenDto) {
		Kitchen kitchen = Optional.ofNullable(kitchenDto).map(kitchenMapper::dtoToEntity).orElse(null);
		if(kitchen != null) {
			kitchenRepository.delete(kitchen);
		}
	}
	
	public void delete(List<KitchenDto> kitchens) {
		if(kitchens != null) {
			kitchens.stream().forEach(a -> kitchenRepository.delete(Optional.ofNullable(a).map(kitchenMapper::dtoToEntity).orElse(null)));
		}
	}
	
	public List<KitchenDto> getByResCode(Integer rCode) {
		return kitchenRepository.findByRestaurantCode(rCode).stream().map(kitchenMapper::entityToDto).collect(Collectors.toList());
	}
}