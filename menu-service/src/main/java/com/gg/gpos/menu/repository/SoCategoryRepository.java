package com.gg.gpos.menu.repository;

import java.util.List;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.gg.gpos.menu.entity.OrderCategory;
import com.gg.gpos.menu.entity.So;
import com.gg.gpos.menu.entity.SoCategory;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Repository
public interface SoCategoryRepository extends JpaRepository<SoCategory, Long>, JpaSpecificationExecutor<SoCategory> {
	@Query("from SoCategory sc join fetch sc.orderCategory where sc.id=:id")
	Optional<SoCategory> findSoCategory(@Param("id") Long id);
	List<SoCategory> findByRestaurantCode(Integer restaurantCode);
	List<SoCategory> findBySoAndRestaurantCodeIsNull(So so);
	List<SoCategory> findBySoAndRestaurantCodeIsNotNull(So so);
	List<SoCategory> findByRestaurantCodeAndSoIsNull(Integer resCode);
	Page<SoCategory> findByRestaurantCodeAndSoIsNull(Integer resCode,Pageable pageable);
	@Query("from SoCategory sc where sc.orderCategory.code =:orderCode and sc.so.id =:soId  and sc.restaurantCode is null")
	SoCategory findByOrderCategoryCodeAndSoIdAndResCodeIsNull(@Param("orderCode") String orderCode, @Param("soId") Long soId);
	@Query("select distinct sc.restaurantCode from SoCategory sc where sc.so.id = :soId and sc.restaurantCode is not null")
	List<Integer> findRestaurantCodes(@Param("soId") Long soId);
	@Query("select distinct sc.so.id from SoCategory sc where sc.restaurantCode = :resCode and sc.so.id is not null")
	Long findSoIdByRestaurantCode(@Param("resCode") Integer resCode);
	@Query("select sc from SoCategory sc where sc.so.id = :soId and sc.restaurantCode is null")
	Page<SoCategory> findBySoId(@Param("soId") Long soId,Pageable pageable);
	@Query("select distinct sc from SoCategory sc where sc.restaurantCode = :resCode and sc.id not in (select cc.soCategory.id from CoCategory cc where cc.restaurantCode = :resCode) order by sc.id")
	List<SoCategory> findByRCode(@Param("resCode")Integer resCode);
	@Query("select distinct sc from SoCategory sc where sc.so.id = :soId and sc.restaurantCode is null and sc.id not in (select cc.soCategory.id from CoCategory cc where cc.coId = :cId) order by sc.id")
	List<SoCategory> findBySoIdAndCId(@Param("soId") Long soId,@Param("cId")Long cId);
	@Query("from SoCategory sc where sc.so.id = :soId and sc.restaurantCode is null")
	List<SoCategory> findBySoId(@Param("soId") Long soId);
	@Query("from SoCategory sc where sc.so.id = :soId and sc.orderCategory.code = :ocCode and sc.restaurantCode is null")
	SoCategory findBySoIdAndOrderCategoryCode(@Param("soId") Long soId, @Param("ocCode") String ocCode);
	List<SoCategory> findByRestaurantCodeAndOrderCategory(Integer resCode, OrderCategory orderCategory);
	@Query("from SoCategory sc inner join sc.soCategoryFoodGroups scfg inner join scfg.foodGroup fg where fg.code = :foodGroupCode and fg.restaurantCode is null")
	SoCategory findByFoodGroupCodeAndResCodeIsNull(@Param("foodGroupCode")String foodGroupCode);
	List<SoCategory> findByIdIn(List<Long> ids);
	void deleteByRestaurantCode(Integer restaurantCode);
	@Query("from SoCategory sc where sc.orderCategory.code =:orderCode and sc.restaurantCode =:resCode")
	SoCategory findByOrderCategoryCodeAndResCode(@Param("orderCode") String orderCode, @Param("resCode") Integer resCode);
	@Query("from SoCategory sc where sc.orderCategory.code in :codes and sc.restaurantCode = :resCode and sc.so.id is not null")
	List<SoCategory> findByRestaurantCodeAndOrderCateCode(@Param("codes") List<String> codes, @Param("resCode") Integer resCode);
}