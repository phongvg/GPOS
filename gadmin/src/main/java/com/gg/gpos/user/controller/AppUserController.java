package com.gg.gpos.user.controller;

import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang3.RandomStringUtils;
/*import org.apache.commons.lang3.StringUtils;*/
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.MailEnum;
import com.gg.gpos.common.constant.ModelViewEnum;
import com.gg.gpos.common.util.UserContext;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.integration.dto.Mail;
import com.gg.gpos.integration.manager.MailService;
import com.gg.gpos.res.manager.RestaurantUserManager;
import com.gg.gpos.user.dto.AppUserDto;
import com.gg.gpos.user.dto.RoleDto;
import com.gg.gpos.user.dto.StaffDto;
import com.gg.gpos.user.manager.AppGroupManager;
import com.gg.gpos.user.manager.AppUserManager;
import com.gg.gpos.user.manager.RoleManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Controller
public class AppUserController extends BaseController {
	@Autowired
	public JavaMailSender emailSender;
	@Autowired
    private AppUserManager appUserManager;
	@Autowired
    private AppGroupManager appGroupManager;
	@Autowired
    private RoleManager roleManager;
	@Autowired
    private RestaurantUserManager restaurantUserManager;
	@Autowired
	private MailService mailService;
    
	@GetMapping("/system/user/list")
    public ModelAndView list() {
    	log.info("ENTERING 'LIST USER' METHOD...");
		ModelAndView modelAndView = new ModelAndView("system/user-list");
		AppUserDto criteria = new AppUserDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());	
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, appUserManager.gets(criteria));
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
	
    @PostMapping("/system/user/list")
    public ModelAndView search(@Valid AppUserDto criteria) {
    	log.info("ENTERING 'SEARCH USER' METHOD...");
    	ModelAndView modelAndView = new ModelAndView("system/user-list");
		if(criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());	
		}
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, appUserManager.gets(criteria));
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping(value="/system/user/reset")
    public ModelAndView resetPass(@RequestParam(value = "id", required = true)Long id,HttpServletRequest request) {
    	log.info("ENTERING 'RESET PASSWORD USER' METHOD...");
    	ModelAndView modelAndView = new ModelAndView("system/user-list");
    	AppUserDto appUserDto = appUserManager.getFull(id);
    	String logineduser = UserContext.getUsername();
    	String passWord = generateRandomPassword();
    	if(appUserDto != null) {
    		appUserDto.setPassword(passWord);
    		appUserDto.setModifiedBy(logineduser);
    		appUserDto.setPasswordChangedDate(null);
    		appUserDto = appUserManager.saveUser(appUserDto);
    		if (appProperties.isSendEmailEnabled()) {
            	StaffDto staff = appUserDto.getStaff();
        		if (!StringUtils.isEmpty(staff.getEmail())) {
        			try {
                    	Mail mail = new Mail();
                    	String msgContent = "Your password from GPOSADMIN is reset. Login information - username : <b>" + appUserDto.getUsername()+ "</b>"+ " password : " +"<b>" + passWord + " </b> .Do not share with everyone!";
                    	mail.setMailTo(staff.getEmail());
                    	mail.setSubject(MailEnum.EMAIL_SUBJECT.val);
                    	mail.setMailContent(msgContent);
                    	mailService.sendMail(mail);
                    	addMessage(request, getText("user.reset.success",request.getLocale() ));
        			} catch(Exception e) {
        				addError(request, e.toString());
        				log.error("ERROR SEND EMAIL: {}", e);
        			}
        		}else {
        			addError(request, getText("user.not.email",request.getLocale() ));
            	}
        	}
    	} else {
    		addError(request, getText("user.not.exist",request.getLocale() ));
    	}
    	modelAndView.setViewName("redirect:/system/user/list");
    	return modelAndView;
    }
    
    @GetMapping("/system/user/form")
    public ModelAndView show(@RequestParam(value="id", required=false) Long id, HttpServletRequest request) {
    	log.info("ENTERING 'SHOW USER' METHOD...");
    	ModelAndView modelAndView = new ModelAndView("system/user-form");
    	AppUserDto appUser = new AppUserDto();
    	List<RoleDto> roles = roleManager.gets();
    	if(id != null) {
    		appUser = appUserManager.getFull(id);
    		if(appUser != null) { 
    			List<RoleDto> selectedRoles = appUser.getRoles();	
    			roles.stream().forEach(role -> role.setSelected(selectedRoles.stream().anyMatch(selected -> selected.getId().equals(role.getId()))));
    		}
    	}
    	modelAndView.addObject("appGroups", appGroupManager.gets());
    	modelAndView.addObject("roles", roles);
    	modelAndView.addObject("appUser", appUser);
        return modelAndView;
    }
    
    @PostMapping("/system/user/save")
    public String save(@Valid AppUserDto appUserDto, BindingResult bindingResult, HttpServletRequest request) throws Exception {
    	log.info("ENTERING 'SAVE USER' METHOD...");
        String logineduser = UserContext.getUsername();
        Locale locale = request.getLocale();
        boolean isNew = (appUserDto.getId() == null);
        String view = "redirect:/system/user/form";
        String msg = null;
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        
        try {
        	if (request.getParameter("delete") != null) {
            	addMessage(request, getText("user.deleted", locale));
            } else if (request.getParameter("inactive") != null) {
            	if (appUserDto.getGroupId() != null) {
            		appUserDto.getAppGroups().add(appGroupManager.get(appUserDto.getGroupId()));
            	}
                addMessage(request, getText("user.disabled", locale));
            } else {
            	if(appUserManager.isExistedUsername(appUserDto)) {
                	bindingResult.rejectValue("username", "errors.unique", new Object[] { getText("user.username.existed", locale) }, "");
                	addError(request, getText("user.username.existed", locale));
                	if(appUserDto.getId()!= null) {
                		return "redirect:/system/user/form?id="+ appUserDto.getId();
                	} else {
                		return view;
                	}
                } 
            	// setpassword random
            	String passWord = generateRandomPassword();
            	if (isNew) {
            		log.debug("creating a new user...");
            		appUserDto.setPassword(passWord);
            		appUserDto.setCreatedBy(logineduser);
            		appUserDto.setModifiedBy(logineduser);
            		msg = getText("user.added", locale);
            	} else {
            		log.debug("updating user info...");
            		appUserDto.setModifiedBy(logineduser);
            		msg = getText("user.updated", locale);
            	}
                appUserDto = appUserManager.save(appUserDto);
                view = "redirect:/system/user/form?id=" + appUserDto.getId();
                // send mail
                if (isNew) {
                	if (appProperties.isSendEmailEnabled()) {
                    	StaffDto staff = appUserDto.getStaff();
                		if (!StringUtils.isEmpty(staff.getEmail())) {
                			try {
                            	Mail mail = new Mail();
                            	String msgContent = "Your account has been created successfully. Login information - username : <b>" + appUserDto.getUsername()+ "</b>" + " password : " +"<b>" + passWord + " </b> .Do not share with everyone!";
                            	mail.setMailTo(staff.getEmail());
                            	mail.setSubject(MailEnum.EMAIL_SUBJECT.val);
                            	mail.setMailContent(msgContent);
                            	
                            	mailService.sendMail(mail);
                			} catch(Exception e) {
                				addError(request, e.toString());
                				log.error("ERROR SEND EMAIL: {}", e);
                			}
                		}
                	} else {
                		Object[] args = {passWord};
                		addMessage(request, getText("user.password.created", args, locale));
                	}
                }
            	
            	addMessage(request, msg);
            }
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
        return view;
    }
    
    @GetMapping(value ="/system/user/apply")
    public ModelAndView applyView(@RequestParam Long Id, HttpServletRequest request) {  	
    	log.info("ENTERING 'SHOW APPLY-FORM' METHOD...");
		ModelAndView modelAndView = new ModelAndView("system/user-apply-form");
		if (Id != null) {
	    	AppUserDto appUserDto = appUserManager.findUserById(Id);
	    	modelAndView.addObject("appUser", appUserDto);
    	} else {
    		modelAndView.setViewName("redirect:/system/user/form");
    		addError(request, getText("so.not.created", request.getLocale()));
    	}
        return modelAndView;
    }
    
    @PostMapping(value="/system/user/saveRestaurantUser")
    public String saveRes(@Valid AppUserDto appUser, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception{
    	log.info("ENTERING 'SAVE RESTAURANT_USER' METHOD...");
    	if (bindingResult.hasErrors()) {
         	addError(request, bindingResult.getAllErrors().toString());
         	return "redirect:/system/user/apply?Id="+appUser.getId();
        }
    	try {
    		restaurantUserManager.save(appUser);
        	addMessage(request, getText("res.user.success",request.getLocale() ));
		} catch (Exception e) {
			addError(request, e.getMessage());
			log.error("ERROR SAVE RESTAURANT_USER: {}", e);
		}
    	return "redirect:/system/user/apply?Id="+appUser.getId();   		
    }
    
    private String generateRandomPassword() {
    	String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}\\|;:\'\",<.>/?";
    	return RandomStringUtils.random( 8, characters);
    }
}