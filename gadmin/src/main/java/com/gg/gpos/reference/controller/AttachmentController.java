package com.gg.gpos.reference.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.controller.BaseController;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.manager.AttachmentManager;
import com.gg.gpos.res.dto.RestaurantDto;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class AttachmentController extends BaseController {

    private AttachmentManager attachmentManager;

    @Autowired
    public void setAttachmentManager(AttachmentManager attachmentManager) {
        this.attachmentManager = attachmentManager;
    }
    
    @GetMapping("/sync/attchment-history")
    public ModelAndView list() {
    	log.debug("entering 'list' method...");
    	ModelAndView modelAndView = new ModelAndView("sync-attachment");
    	AttachmentDto criteria = new AttachmentDto();
    	criteria.setPage(appProperties.getDefaultPage());
    	criteria.setSize(appProperties.getDefaultPageSize());
    	Page<AttachmentDto> pages = attachmentManager.gets(criteria);
    	modelAndView.addObject("page", pages);
    	modelAndView.addObject("criteria", criteria);
    	
    	return modelAndView;
    }
    
    @PostMapping("/sync/attchment-history")
    public ModelAndView search(Model model, @Valid AttachmentDto criteria, BindingResult bindingResult) {
    	log.debug("entering 'search' method...");
    	ModelAndView modelAndView = new ModelAndView("sync-attachment");
    	if (criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
    	Page<AttachmentDto> pages = attachmentManager.gets(criteria);
    	modelAndView.addObject("page", pages);
    	modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping("/sync/attachment")
	public ModelAndView syncToRes() {
		ModelAndView modelAndView = new ModelAndView("sync-file");
		modelAndView.addObject("restaurant", new RestaurantDto());
		return modelAndView;
	}
    
}