
package com.gg.gpos.res.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.gg.gpos.common.constant.ModelViewEnum;
import com.gg.gpos.common.constant.StatusEnum;
import com.gg.gpos.common.constant.SystemParamEnum;
import com.gg.gpos.common.constant.TableNameEnum;
import com.gg.gpos.common.json.SyncResponse;
import com.gg.gpos.common.util.UserContext;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.integration.exception.IntegrationException;
import com.gg.gpos.menu.dto.VersionDto;
import com.gg.gpos.menu.manager.VersionManager;
import com.gg.gpos.reference.dto.SystemParameterDto;
import com.gg.gpos.res.dto.RestaurantDto;
import com.gg.gpos.res.manager.BrandManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@EnableScheduling
@Controller
public class RestaurantController extends BaseController {
	@Autowired
	private BrandManager brandManager;
    @Autowired
    private VersionManager versionManager;
    //------------------------------------//
    //---------- For Restaurant ----------//
    //------------------------------------//
    @GetMapping("/restaurant/list")
    public ModelAndView list(HttpServletRequest request) {
    	log.debug("entering 'list' method...");
    	
		ModelAndView modelAndView = new ModelAndView("restaurant-list");
		RestaurantDto criteria = new RestaurantDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		if (!UserContext.isAdminRole()) {
			criteria.setUsername(UserContext.getUsername());	
		}
		modelAndView.addObject("page", restaurantManager.gets(criteria));

        return modelAndView;
    }
    
    @PostMapping("/restaurant/list")
    public ModelAndView search(@Valid RestaurantDto criteria, HttpServletRequest request) {
    	log.debug("entering 'list' method...");
    	
		ModelAndView modelAndView = new ModelAndView("restaurant-list");
		
		if(criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		if (!UserContext.isAdminRole()) {
			criteria.setUsername(UserContext.getUsername());	
		}
		criteria.setRestaurantCodes(new ArrayList<>());
		Set<String> keys = StringUtils.commaDelimitedListToSet(criteria.getSelectedRestaurantCodes());
    	List<String> filterKey = keys.stream().filter(key -> !key.contains("_")).collect(Collectors.toList());
    	filterKey.stream().forEach(f -> criteria.getRestaurantCodes().add(Integer.parseInt(f)));
    	
		modelAndView.addObject("page", restaurantManager.gets(criteria));
		modelAndView.addObject(ModelViewEnum.MODEL_CRITERIA.mav, criteria);

        return modelAndView;
    }
    
    @GetMapping("/restaurant/form")
    public ModelAndView showByCode(@RequestParam(value="rCode",required=true) Integer rCode) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("restaurant/restaurant/restaurant-form");
    	modelAndView.addObject("from", "restaurant");
    	if (rCode != null) {
    		modelAndView.addObject("restaurant", restaurantManager.get(rCode));	
    	} else { 
    		modelAndView.addObject("restaurant", new RestaurantDto());
    	}
        return modelAndView;
    }

    @PostMapping("/restaurant/save")
    public String save(@Valid RestaurantDto restaurantDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'save' method...");

        Locale locale = request.getLocale();
        String view = "restaurant-form";
        
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }

        restaurantManager.save(restaurantDto);
        addMessage(request, getText("restaurant.updated", locale));
        view = "redirect:/restaurant/list";

        return view;
    }
    
    @GetMapping("/restaurant/create")
    public String showCreateForm(Model model) {
    	log.debug("entering 'showCreateForm' method...");
    	model.addAttribute(new RestaurantDto());
    	model.addAttribute("brands", brandManager.gets());
    	
        return "restaurant-create";
    }
 
    @PostMapping("/restaurant/create")
    public String saveCreateForm(@Valid RestaurantDto restaurantDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
    	log.debug("entering 'saveCreateForm' method...");
    
    	restaurantManager.save(restaurantDto);
    	addMessage(request, getText("restaurant.created", request.getLocale()));

        return "redirect:/restaurant/list";
    }
    
    @GetMapping("/res/sync-from-server")
    public String syncFromServer(Model model, HttpServletRequest request) throws IntegrationException {
    	log.debug("entering 'syncFromServer' method...");
    	try {
    		SystemParameterDto systemParameter = systemParameterManager.get(SystemParamEnum.REFERENCE_DATA_URL.param);
        	Map<String, Object> map = restaurantSyncManager.syncRestaurantFromServer(systemParameter.getParamValue());
    		restaurantManager.syncResFromServer(map);
    		addMessage(request, getText("restaurant.sync.success", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
        return "redirect:/restaurant/list";
    }
    
    @GetMapping("/res/sync-res-info-to-res")
    public String syncRestaurantInfoToRestaurant(Model model, HttpServletRequest request) throws IntegrationException {
    	log.debug("entering 'syncFromServer' method...");
    	
    	VersionDto versionDto = versionManager.getByTableName(TableNameEnum.RESTAURANT.tableName);
    	Integer versionNo;
    	if(versionDto != null && versionDto.getVersionNo() != null) {
    		versionNo = versionDto.getVersionNo() + 1;
    	} else {
    		versionDto = new VersionDto();
    		versionDto.setTableName(TableNameEnum.RESTAURANT.tableName);
    		versionNo = 1;
    	}
    	versionDto.setVersionNo(versionNo);

    	SyncResponse res = sendMasterData(SystemParamEnum.API_GATEWAY_URL.param, SystemParamEnum.API_MASTER_RESTAURANT_PATTERN.param, versionNo);
    	if(String.valueOf(HttpStatus.OK.value()).equals(res.getCode())) {
    		addMessage(request, getText("restaurant.sync.success", request.getLocale()));
    		versionManager.save(versionDto);
    	} else {
    		addError(request, getText("restaurant.sync.error", request.getLocale()));
    	}
    	
        return "redirect:/restaurant/list";
    }
    
    @GetMapping("restaurant/sync-to-res")
    public ModelAndView syncToRes(HttpServletRequest request) {
    	log.debug("entering 'syncToRes' method...");
    	
		ModelAndView modelAndView = new ModelAndView("restaurant-form-sync");
		modelAndView.addObject("restaurant", new RestaurantDto());
        return modelAndView;
    }
    
    
    @GetMapping("res/check-online-restaurant")
    public String checkOnlineRestaurant(HttpServletRequest request) {
    	log.debug("entering 'checkOnlineRestaurant' method ...");    

    	SystemParameterDto gatewayUrl = systemParameterManager.get(SystemParamEnum.API_GATEWAY_URL.param);
    	SystemParameterDto url = systemParameterManager.get(SystemParamEnum.API_BUSINESS_CHECK_STATUS_RESTAURANT_PATTERN.param);
    	String apiUrl = gatewayUrl.getParamValue() + url.getParamValue();
    	List<RestaurantDto> restaurantDtos = restaurantManager.gets();
    	if(restaurantDtos != null && !restaurantDtos.isEmpty()) {
    		restaurantDtos.stream().forEach(restaurant ->{
    			if(restaurant.getIp() != null && !restaurant.getIp().isEmpty() && restaurant.getPort() != null && !restaurant.getPort().isEmpty()) {
    				try {
    					restaurant = restaurantSyncManager.check(apiUrl, restaurant.getCode(),restaurant);
					} catch (JsonProcessingException e) {
						restaurant.setOnline(StatusEnum.INACTIVE.status);
					}
    				
    			}else {
    				restaurant.setOnline(StatusEnum.INACTIVE.status);
    			}
    			restaurantManager.save(restaurant);
    		});
    	}
    	addMessage(request, getText("restaurant.sync.online", request.getLocale()));
    	return "redirect:/restaurant/list";
    }
    
    //------------------------------------//
    //---------- For Ajax Call ----------//
    //------------------------------------//
    
    @GetMapping("/restaurant/check-online")
    @ResponseBody
    public List<RestaurantDto> getRestaurant() {
    	log.debug("entering 'getRestaurant' method...");
    	return restaurantManager.gets();
    }
    
}