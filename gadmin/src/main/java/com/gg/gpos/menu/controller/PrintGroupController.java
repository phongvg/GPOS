package com.gg.gpos.menu.controller;

import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.ModelViewEnum;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.dto.KdsDto;
import com.gg.gpos.menu.dto.PrintGroupDto;
import com.gg.gpos.menu.manager.FoodItemManager;
import com.gg.gpos.menu.manager.KdsManager;
import com.gg.gpos.menu.manager.KitchenTypeManager;
import com.gg.gpos.menu.manager.PrintGroupManager;
import com.gg.gpos.res.manager.SyncStatusManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class PrintGroupController extends BaseController {
	@Autowired
    private PrintGroupManager printGroupManager;
	
	@Autowired
	private KdsManager kdsManager;
	
	@Autowired
	private FoodItemManager foodItemManager;
	@Autowired
    private SyncStatusManager syncStatusManager;
	@Autowired
	private KitchenTypeManager kitchenTypeManager;
  
    @GetMapping("/printGroup/catalog-list")
    public ModelAndView listCatalog(@RequestParam(name="kId", required = true) Long kId) {
    	log.info("ENTERING 'LIST PRINT-GROUP' METHOD...");
		ModelAndView modelAndView = new ModelAndView("catalog-printGroup-list");
		PrintGroupDto criteria = new PrintGroupDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		criteria.setKds(kdsManager.get(kId));
		
		Page<PrintGroupDto> pages = printGroupManager.getCatalogs(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/printGroup/catalog-list")
    public ModelAndView searchCatalog(Model model, @Valid PrintGroupDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search PRINT-GROUP' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-printGroup-list");
		if(criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<PrintGroupDto> pages = printGroupManager.getCatalogs(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    
    @GetMapping("/printGroup/catalog-form")
    public ModelAndView showCatalogForm(@RequestParam(value="kId", required=true) Long kId, @RequestParam(name="id", required = false) Long id) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("catalog-printGroup-form");
    	
    	PrintGroupDto printGroup = new PrintGroupDto();
    	KdsDto kdsDto = kdsManager.get(kId);
    	if(id != null) {
    		printGroup = printGroupManager.getByKdsId(id, kId);
    	}
    	else {
    		printGroup.setKds(kdsDto);
    	}  
    	modelAndView.addObject("printGroup", printGroup);
    	modelAndView.addObject("kitchens", kdsDto.getKitchens());
    	
        return modelAndView;
    }
    
    @GetMapping("/printGroup/list")
    public ModelAndView list(@RequestParam(name="kId", required = false) Long kId,@RequestParam(name="rCode", required = true) Integer rCode) {
    	log.debug("entering 'list' method...");
		ModelAndView modelAndView = new ModelAndView("printGroup-list");
		PrintGroupDto criteria = new PrintGroupDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		if(kId != null) {
			criteria.setKds(kdsManager.get(kId));
		}else {
			criteria.setKds(null);
		}
		criteria.setRestaurantCode(rCode);
		
		Page<PrintGroupDto> pages = printGroupManager.gets(criteria);
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, pages);
		modelAndView.addObject(ModelViewEnum.MODEL_CRITERIA.mav,criteria);
        return modelAndView;
    }
    
    @PostMapping("/printGroup/list")
    public ModelAndView search(Model model, @Valid PrintGroupDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("printGroup-list");
		if(criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<PrintGroupDto> pages = printGroupManager.gets(criteria);
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, pages);
		modelAndView.addObject(ModelViewEnum.MODEL_CRITERIA.mav,criteria);
        return modelAndView;
    }
    
    
    @GetMapping("/printGroup/form")
    public ModelAndView showForm(@RequestParam(value="kId", required=false) Long kId, @RequestParam(value="rCode", required=true) Integer rCode, @RequestParam(name="id", required = false) Long id) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("printGroup-form");
    	
    	PrintGroupDto printGroup = new PrintGroupDto();
    	KdsDto kdsDto = null;
    	if(kId != null) {
    		kdsDto = kdsManager.get(kId);
    	}
    	if(id != null) {
    		printGroup = printGroupManager.get(id);
    	}
    	else {
    		printGroup.setKds(kdsDto);
    		printGroup.setRestaurantCode(rCode);
    	}  
    	modelAndView.addObject("printGroup", printGroup);
    	modelAndView.addObject("kitchenTypes", kitchenTypeManager.getByResCode(rCode));
    	
        return modelAndView;
    }
    
    @GetMapping("/foodItem/show")
    @ResponseBody
    public List<FoodItemDto> getFoodItems(@RequestParam(name="id", required = false) Long id) {
    	log.debug("entering 'getFoodItems' method...");
    	
    	PrintGroupDto printGroup = new PrintGroupDto();
    	if(id != null) {
    		printGroup = printGroupManager.get(id);
    	}

    	List<FoodItemDto> foodItems = foodItemManager.gets();
    	List<FoodItemDto> selectedFoodItems = printGroup.getFoodItems();
    	if(selectedFoodItems != null) {
    		foodItems.stream().forEach(f ->	f.setSelected(selectedFoodItems.stream().anyMatch(s -> s.getId().equals(f.getId()))));
    	}
    	
    	return foodItems;
    }
    
    @PostMapping("/printGroup/save")
    public String save(@Valid PrintGroupDto printGroupDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'save' method...");
        Locale locale = request.getLocale();
        String view;
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
        if(printGroupDto.getRestaurantCode() != null) {
        	printGroupDto.setKds(null);
        }
        try {
        	printGroupDto = printGroupManager.save(printGroupDto);
            addMessage(request, getText("printGroup.updated", locale));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
        if(printGroupDto.getRestaurantCode() != null) {
        	view = "redirect:/printGroup/list?rCode="+printGroupDto.getRestaurantCode();
        	syncStatusManager.saveSttAfterEditDataBusiness(printGroupDto.getRestaurantCode());
        }else {
        	view = "redirect:/printGroup/catalog-list?kId="+printGroupDto.getKds().getId();
        }
        return view;
    }
    
    @GetMapping("/printGroup/delete")
    public String delete(@RequestParam(name="id", required = true) Long id, HttpServletRequest request) {
    	log.debug("entering 'delete' method...");
    	Locale locale = request.getLocale();
    	String view;
    	PrintGroupDto printGroupDto = printGroupManager.get(id);
    	if(printGroupDto.getRestaurantCode() != null) {
        	view = "redirect:/printGroup/list?rCode="+printGroupDto.getRestaurantCode();
        }else {
        	view = "redirect:/printGroup/catalog-list?kId="+printGroupDto.getKds().getId();
        }
    	try {
    		printGroupManager.delete(printGroupDto);
        	addMessage(request, getText("printGroup.deleted", locale));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	return view;
    }
    
    
}