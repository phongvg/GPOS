 package com.gg.gpos.menu.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.CoFoodItemHideIConEnum;
import com.gg.gpos.common.constant.CoFoodItemModifierTypeEnum;
import com.gg.gpos.common.constant.FoodTypeEnum;
import com.gg.gpos.common.constant.FunctionTypeEnum;
import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.SizeImageEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.menu.dto.CoDto;
import com.gg.gpos.menu.dto.CoFoodItemDto;
import com.gg.gpos.menu.dto.CofoodItemModifierDto;
import com.gg.gpos.menu.dto.FeatureDto;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.dto.ModifierDto;
import com.gg.gpos.menu.dto.RelatedFoodItemDto;
import com.gg.gpos.menu.dto.ToppingFoodItemDto;
import com.gg.gpos.menu.manager.CatalogDataEditManager;
import com.gg.gpos.menu.manager.CoFoodItemManager;
import com.gg.gpos.menu.manager.CoManager;
import com.gg.gpos.menu.manager.FeatureManager;
import com.gg.gpos.menu.manager.FoodItemManager;
import com.gg.gpos.menu.manager.KaloGroupManager;
import com.gg.gpos.menu.manager.ModifierManager;
import com.gg.gpos.menu.manager.RelatedFoodItemManager;
import com.gg.gpos.menu.manager.RestaurantDataEditManager;
import com.gg.gpos.menu.manager.ToppingFoodItemManager;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.manager.AttachmentManager;
import com.gg.gpos.res.manager.SyncStatusManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class CoFoodItemController extends BaseController {

    private CoFoodItemManager coFoodItemManager;
    @Autowired
    public void setCoFoodItemManager(CoFoodItemManager coFoodItemManager) {
        this.coFoodItemManager = coFoodItemManager;
    }
    @Autowired
    private CoManager coManager;
    @Autowired
    private ModifierManager modifierManager;
    @Autowired
    private FeatureManager featureManager;
    @Autowired
    private AttachmentManager attachmentManager;
    @Autowired
    private FoodItemManager foodItemManager;
    @Autowired
    private RestaurantDataEditManager restaurantDataEditManager;
    @Autowired
    private SyncStatusManager syncStatusManager;
    @Autowired
    private ToppingFoodItemManager toppingFoodItemManager;
    @Autowired
    private RelatedFoodItemManager relatedFoodItemManager;
    @Autowired
    private CatalogDataEditManager catalogDataEditManager;
    @Autowired
    private KaloGroupManager kaloGroupManager;

    
    //============= catalog ===============//
    @GetMapping("/coFoodItem/catalog-form")
    public ModelAndView showForm(@RequestParam(value="cId",required = true) Long cId,@RequestParam(value="id",required=false)Long id) {
    	log.debug("entering 'coFoodItem show Form' method...");
    	ModelAndView modelAndView = new ModelAndView("catalog-coFoodItem-form");
    	CoFoodItemDto coFoodItem = new CoFoodItemDto();
    	if(id != null) {
    		coFoodItem = coFoodItemManager.get(id);
    	}else {
    		coFoodItem.setCo(coManager.get(cId));
    	}
    	modelAndView.addObject("kaloGroups", kaloGroupManager.gets());
    	modelAndView.addObject("coFoodItem",coFoodItem);
    	return modelAndView;
    }
    
    @GetMapping("/coFoodItem/catalog-list-foodItem")
    public ModelAndView listCatalog(@RequestParam(name="cId", required = true) Long cId,HttpServletRequest request) {
    	log.debug("entering 'listCoFoodItem' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-co-foodItem-list");
		if(cId != null) {
			CoFoodItemDto criteria = new CoFoodItemDto();
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			criteria.setCo(coManager.get(cId));
			Page<CoFoodItemDto> pages = coFoodItemManager.gets(criteria);
			pages.getContent().forEach(coFoodItem ->{
	            AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
	            if(avatar != null) {
	                coFoodItem.setAvatarUrl(avatar.getUrl());
	                coFoodItem.setAvatarName(avatar.getFileName());
	            }
	        });
			modelAndView.addObject("page", pages);
			modelAndView.addObject("criteria",criteria);
		} else {
    		modelAndView.setViewName("redirect:/co/catalog-form");
    		addError(request, getText("co.not.created", request.getLocale()));
		}
        return modelAndView;
    }
    
    @PostMapping("/coFoodItem/catalog-list-foodItem")
    public ModelAndView searchCatalog(Model model, @Valid CoFoodItemDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-co-foodItem-list");
		if(criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			criteria.setRestaurantCode(null);
		}
		Page<CoFoodItemDto> pages = coFoodItemManager.search(criteria);
        pages.getContent().forEach(coFoodItem ->{
            AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
            if(avatar != null) {
                coFoodItem.setAvatarUrl(avatar.getUrl());
                coFoodItem.setAvatarName(avatar.getFileName());
            }

        });
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping("/coFoodItem/add-foodItem-to-co")
    public ModelAndView showFormAddFoodItem(@RequestParam(value="id", required = false)Long id,@RequestParam(value="cId",required = true)Long cId) {
    	log.debug("entering 'showFoodItem' method...");
    	ModelAndView modelAndView = new ModelAndView("catalog-co-form-add-foodItem");
    	CoFoodItemDto coFoodItem = new CoFoodItemDto();
       	CoDto co = coManager.get(cId);
       	List<FoodItemDto> foodItems = foodItemManager.getFoodItemsInSo(co.getSoId(),cId);
       	if(id != null) {
    		coFoodItem = coFoodItemManager.get(id);
    		foodItems.add(coFoodItem.getFoodItem());
    		AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),  ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
    		String avatarUrl = avatar.getUrl();
    		coFoodItem.setAvatarUrl(avatarUrl);
    		
    		AttachmentDto toppingPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.TOPPING_PHOTO.val);
    		String toppingPhotoUrl = toppingPhoto.getUrl();
    		coFoodItem.setToppingPhotoUrl(toppingPhotoUrl);
            
            AttachmentDto halfPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HALF_PHOTO.val);
            String halfPhotoUrl = halfPhoto.getUrl();
    		coFoodItem.setHalfPhotoUrl(halfPhotoUrl);
            
            AttachmentDto groupPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP.val);
            String groupPhotoUrl = groupPhoto.getUrl();
    		coFoodItem.setGroupPhotoUrl(groupPhotoUrl);
            
            AttachmentDto groupHidden = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP_HIDDEN.val);
            String groupHiddenUrl = groupHidden.getUrl();
    		coFoodItem.setGroupHiddenPhotoUrl(groupHiddenUrl);
            
            AttachmentDto horizontalPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HORIZONTAL_PHOTO.val);
            String horizontalPhotoUrl = horizontalPhoto.getUrl();
    		coFoodItem.setHorizontalPhotoUrl(horizontalPhotoUrl);
            
            AttachmentDto verticalPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.VERTICAL_PHOTO.val);
            String verticalPhotoUrl = verticalPhoto.getUrl();
    		coFoodItem.setVerticalPhotoUrl(verticalPhotoUrl);
    		
    		AttachmentDto quarterPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QUARTER_PHOTO.val);
            String quarterPhotoUrl = quarterPhoto.getUrl();
    		coFoodItem.setQuarterPhotoUrl(quarterPhotoUrl);
    		
    		AttachmentDto drinkPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.DRINK_PHOTO.val);
            String drinkPhotoUrl = drinkPhoto.getUrl();
    		coFoodItem.setDrinkPhotoUrl(drinkPhotoUrl);
    		
    		AttachmentDto qrOrderPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QR_ORDER_PHOTO.val);
            String qrOrderPhotoUrl = qrOrderPhoto.getUrl();
    		coFoodItem.setQrOrderPhotoUrl(qrOrderPhotoUrl);
    	}else {
			coFoodItem.setCo(co);
		}
       	List<Integer> hideIconValues = new ArrayList<>();
    	Arrays.asList(CoFoodItemHideIConEnum.values()).forEach(item -> hideIconValues.add(item.val));
    	List<Integer> coFoodItemModifierTypes = new ArrayList<>();
    	Arrays.asList(CoFoodItemModifierTypeEnum.values()).forEach(item -> coFoodItemModifierTypes.add(item.val));
    	modelAndView.addObject("coFoodItemModifierTypes", coFoodItemModifierTypes);
    	modelAndView.addObject("hideIconValues", hideIconValues);
       	modelAndView.addObject("kaloGroups", kaloGroupManager.gets());
    	modelAndView.addObject("coFoodItem",coFoodItem);
    	modelAndView.addObject("foodItems",foodItems);
    	
    	return modelAndView;
    }
    
    @PostMapping("/coFoodItem/saveCatalog")
    public String saveCatalog(@Valid CoFoodItemDto coFoodItem,BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
    	log.debug("entering 'saveCoFoodItem catalog' method...");
        Locale locale = request.getLocale();
        String view = "catalog-co-form-add-foodItem";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
        if(coFoodItem.getPhotos().size() <= SizeImageEnum.FILE_SIZE.sizeImage) {
        	try {
        		CoFoodItemDto coFoodItemDtoNew = coFoodItemManager.save(coFoodItem);
        		catalogDataEditManager.save(TypeRestaurantDataEditEnum.CO_FOODITEM.val,coFoodItemDtoNew.getCo().getId(),coFoodItemDtoNew.getId().toString());
        		String code = coFoodItemDtoNew.getFoodItem().getCode();
        		Integer restaurantCode = coFoodItemDtoNew.getRestaurantCode();
            	if(coFoodItem.getAvatar() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getAvatar(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val, restaurantCode, code);
                }
            	if(coFoodItem.getPhotos() != null) {
                	attachmentManager.saveAttachments(coFoodItem.getPhotos(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.IMAGES.val, restaurantCode, code);
                }
            	if(coFoodItem.getToppingPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getToppingPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.TOPPING_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getHalfPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getHalfPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HALF_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getGroupPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getGroupPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP.val, restaurantCode, code);
                }
            	if(coFoodItem.getGroupHiddenPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getGroupHiddenPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP_HIDDEN.val, restaurantCode, code);
                }
            	if(coFoodItem.getHorizontalPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getHorizontalPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HORIZONTAL_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getVerticalPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getVerticalPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.VERTICAL_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getQuarterPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getQuarterPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QUARTER_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getDrinkPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getDrinkPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.DRINK_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getQrOrderPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getQrOrderPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QR_ORDER_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getCo().getId() != null) {
            		coManager.saveAfterChangeCatalog(coFoodItem.getCo().getId());
            	}
                addMessage(request, getText("coFoodItem.updated", locale));
                view = "redirect:/coFoodItem/catalog-list-foodItem?cId="+ coFoodItem.getCo().getId();
    		} catch (Exception e) {
    			log.error("ERROR:" ,e);
    			addError(request, e.getMessage());
    		}
        }else {
        	addError(request, getText("coFoodItem.update.image.fail", request.getLocale()));
    		if(coFoodItem.getId() != null) {
    			view = "redirect:/coFoodItem/add-foodItem-to-co?id="+ coFoodItem.getId() + "&cId=" + coFoodItem.getCo().getId() ;
    		}else {
    			view = "redirect:/coFoodItem/add-foodItem-to-co?cId="+ coFoodItem.getCo().getId();
    		}
        }
        
        return view;
    }
    
    //================== for Restaurant =================//
    @GetMapping("/coFoodItem/list")
    public ModelAndView list(@RequestParam(name="rCode", required = true) Integer rCode,@RequestParam(name="coId", required = false) Long coId) {
    	log.debug("entering 'showFoodItem' method...");
    	ModelAndView modelAndView = new ModelAndView("coFoodItem-list");
    	CoFoodItemDto criteria = new CoFoodItemDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		criteria.setRestaurantCode(rCode);
		Page<CoFoodItemDto> pages = coFoodItemManager.getLists(criteria);
		pages.getContent().forEach(coFoodItem ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coFoodItem.setAvatarUrl(avatar.getUrl());
				coFoodItem.setAvatarName(avatar.getFileName());
			}

            
		});
		modelAndView.addObject("coId",coId);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
		
       
		return modelAndView;
    }
    
    @PostMapping("/coFoodItem/list")
    public ModelAndView search(Model model, @Valid CoFoodItemDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("coFoodItem-list");
		if(criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<CoFoodItemDto> pages = coFoodItemManager.search(criteria);
		pages.getContent().forEach(coFoodItem ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coFoodItem.setAvatarUrl(avatar.getUrl());
				coFoodItem.setAvatarName(avatar.getFileName());
			}

          
		});
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping("/res/coFoodItem/changed")
    public ModelAndView listChanged(@RequestParam(name="rCode", required = true) Integer rCode,@RequestParam(name="coId", required = false) Long coId) {
    	log.debug("entering 'listChanged' method...");
    	ModelAndView modelAndView = new ModelAndView("res-co-food-item-changed");
    	CoFoodItemDto criteria = new CoFoodItemDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		criteria.setRestaurantCode(rCode);
		Page<CoFoodItemDto> pages = coFoodItemManager.getCFIChanged(criteria);
		pages.getContent().forEach(coFoodItem ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coFoodItem.setAvatarUrl(avatar.getUrl());
				coFoodItem.setAvatarName(avatar.getFileName());
			}
		});
		modelAndView.addObject("coId",coId);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
       
		return modelAndView;
    }
    
    @PostMapping("/res/coFoodItem/changed")
    public ModelAndView searchChanged(Model model, @Valid CoFoodItemDto criteria, BindingResult bindingResult){
    	log.debug("entering 'searchChanged' method...");
		ModelAndView modelAndView = new ModelAndView("res-co-food-item-changed");
		if(criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		criteria.setChanged(true);
		Page<CoFoodItemDto> pages = coFoodItemManager.search(criteria);
		pages.getContent().forEach(coFoodItem ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coFoodItem.setAvatarUrl(avatar.getUrl());
				coFoodItem.setAvatarName(avatar.getFileName());
			}
		});
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/res/coFoodItem/reset")
    public String resetCFI(@Valid CoFoodItemDto criteria, BindingResult bindingResult,HttpServletRequest request){
    	log.debug("entering 'resetCFI' method...");
		String view = "res-co-food-item-changed";
		Integer resCode = criteria.getRestaurantCode();
		if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
		try {
			coManager.resetCoFoodItems(resCode);
			addMessage(request, getText("reset.data.success", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
		view = "redirect:/res/coFoodItem/changed?rCode=" + resCode;
        return view;
    }
    
    @GetMapping("/coFoodItem/form")
    public ModelAndView showForm(@RequestParam(name="rCode", required = true) Integer rCode,
    @RequestParam(value ="id",required = false)Long id,@RequestParam(name="coId",required = false)Long coId) {
    	ModelAndView modelAndView = new ModelAndView("coFoodItem-form");
    	CoFoodItemDto coFoodItem = new CoFoodItemDto();
    	CoDto co = null;
    	if(coId != null) {
    		co = coManager.get(coId);
    	}
    	List<FoodItemDto> foodItems = foodItemManager.getFoodItemsInSo(rCode);
    	if(id != null) {
    		coFoodItem = coFoodItemManager.get(id);
    		foodItems.add(coFoodItem.getFoodItem());
    		AttachmentDto avatar = attachmentManager.getAttachmentDto(coFoodItem.getId(),  ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val);
    		String avatarUrl = avatar.getUrl();
    		coFoodItem.setAvatarUrl(avatarUrl);
    		coFoodItem.setAvatarName(avatar.getFileName());
    		
    		AttachmentDto toppingPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.TOPPING_PHOTO.val);
    		String toppingPhotoUrl = toppingPhoto.getUrl();
    		coFoodItem.setToppingPhotoUrl(toppingPhotoUrl);
            
            AttachmentDto halfPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HALF_PHOTO.val);
            String halfPhotoUrl = halfPhoto.getUrl();
    		coFoodItem.setHalfPhotoUrl(halfPhotoUrl);
            
            AttachmentDto groupPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP.val);
            String groupPhotoUrl = groupPhoto.getUrl();
    		coFoodItem.setGroupPhotoUrl(groupPhotoUrl);
            
            AttachmentDto groupHidden = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP_HIDDEN.val);
            String groupHiddenUrl = groupHidden.getUrl();
    		coFoodItem.setGroupHiddenPhotoUrl(groupHiddenUrl);
            
            AttachmentDto horizontalPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HORIZONTAL_PHOTO.val);
            String horizontalPhotoUrl = horizontalPhoto.getUrl();
    		coFoodItem.setHorizontalPhotoUrl(horizontalPhotoUrl);
            
            AttachmentDto verticalPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.VERTICAL_PHOTO.val);
            String verticalPhotoUrl = verticalPhoto.getUrl();
    		coFoodItem.setVerticalPhotoUrl(verticalPhotoUrl);
    		
    		AttachmentDto quarterPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QUARTER_PHOTO.val);
            String quarterPhotoUrl = quarterPhoto.getUrl();
    		coFoodItem.setQuarterPhotoUrl(quarterPhotoUrl);
    		
    		AttachmentDto drinkPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.DRINK_PHOTO.val);
            String drinkPhotoUrl = drinkPhoto.getUrl();
    		coFoodItem.setDrinkPhotoUrl(drinkPhotoUrl);
    		
    		AttachmentDto qrOrderPhoto = attachmentManager.getAttachmentDto(coFoodItem.getId(),ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QR_ORDER_PHOTO.val);
            String qrOrderPhotoUrl = qrOrderPhoto.getUrl();
    		coFoodItem.setQrOrderPhotoUrl(qrOrderPhotoUrl);
    	}else {
    		coFoodItem.setCo(co);
			coFoodItem.setRestaurantCode(rCode);
		}
    	List<Integer> hideIconValues = new ArrayList<>();
    	Arrays.asList(CoFoodItemHideIConEnum.values()).forEach(item -> hideIconValues.add(item.val));
    	List<Integer> coFoodItemModifierTypes = new ArrayList<>();
    	Arrays.asList(CoFoodItemModifierTypeEnum.values()).forEach(item -> coFoodItemModifierTypes.add(item.val));
    	modelAndView.addObject("coFoodItemModifierTypes", coFoodItemModifierTypes);
    	modelAndView.addObject("hideIconValues", hideIconValues);
    	modelAndView.addObject("kaloGroups", kaloGroupManager.gets());
    	modelAndView.addObject("coId",coId);
    	modelAndView.addObject("coFoodItem",coFoodItem);
    	modelAndView.addObject("foodItems",foodItems);
    	
    	return modelAndView;
    }
    
    @PostMapping("/coFoodItem/save")
    public String save(@Valid CoFoodItemDto coFoodItem,BindingResult bindingResult,@RequestParam(name="coId",required = false)Long coId, HttpServletRequest request, HttpServletResponse response) {
    	log.debug("entering 'saveCoFoodItem ' method...");
        Locale locale = request.getLocale();
        String view = "coFoodItem-form";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
        if(coFoodItem.getPhotos().size() <= SizeImageEnum.FILE_SIZE.sizeImage) {
        	try {
        		CoFoodItemDto coFoodItemDtoNew = coFoodItemManager.save(coFoodItem);
        		String code = coFoodItemDtoNew.getFoodItem().getCode();
        		Integer restaurantCode = coFoodItemDtoNew.getRestaurantCode();
        		restaurantDataEditManager.save(coFoodItemDtoNew.getId().toString(),TypeRestaurantDataEditEnum.CO_FOODITEM.val, restaurantCode);
            	syncStatusManager.saveSttAfterEditDataBusiness(restaurantCode);
        		if(coFoodItem.getAvatar() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getAvatar(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.AVATAR.val, restaurantCode, code);
                }
            	if(coFoodItem.getPhotos() != null) {
                	attachmentManager.saveAttachments(coFoodItem.getPhotos(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.IMAGES.val, restaurantCode, code);
                }
            	if(coFoodItem.getToppingPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getToppingPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.TOPPING_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getHalfPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getHalfPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HALF_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getGroupPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getGroupPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP.val, restaurantCode, code);
                }
            	if(coFoodItem.getGroupHiddenPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getGroupHiddenPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.GROUP_HIDDEN.val, restaurantCode, code);
                }
            	if(coFoodItem.getHorizontalPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getHorizontalPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.HORIZONTAL_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getVerticalPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getVerticalPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.VERTICAL_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getQuarterPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getQuarterPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QUARTER_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getDrinkPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getDrinkPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.DRINK_PHOTO.val, restaurantCode, code);
                }
            	if(coFoodItem.getQrOrderPhoto() != null) {
                	attachmentManager.saveAttachment(coFoodItem.getQrOrderPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coFoodItemDtoNew.getId(), ModuleTypeEnum.CO_FOOD_ITEM.val, FunctionTypeEnum.QR_ORDER_PHOTO.val, restaurantCode, code);
                }
            	
                addMessage(request, getText("coFoodItem.updated", locale));
                if(coId != null) {
                	view = "redirect:/coFoodItem/list?cId="+ coFoodItem.getCo().getId() +"&rCode=" + coFoodItem.getRestaurantCode() + "&coId=" +coId;
                }else {
                	view = "redirect:/coFoodItem/list?cId="+ coFoodItem.getCo().getId() +"&rCode=" + coFoodItem.getRestaurantCode() + "&coId=";
                }
                	
    		} catch (Exception e) {
    			log.error("ERROR:" ,e);
    			addError(request, e.getMessage());
    		}
        }else {
        	addError(request, getText("coFoodItem.update.image.fail", request.getLocale()));
        	if(coFoodItem.getId() != null) {
				view = "redirect:/coFoodItem/form?id="+ coFoodItem.getId() + "&rCode=" + coFoodItem.getRestaurantCode();
			}else {
				view = "redirect:/coFoodItem/form?cId="+ coFoodItem.getCo().getId() +"&rCode=" + coFoodItem.getRestaurantCode();
			}
        }
        return view;
    }
    
    @GetMapping("/res/coFoodItem/del/{id}")
    public String delCoFoodItem(@PathVariable(value="id")Long id,HttpServletRequest request) {
    	log.debug("entering 'del coFoodItem' method...");
    	String view = "coFoodItem-list";
    	CoFoodItemDto coFoodItem = coFoodItemManager.get(id);
    	coFoodItemManager.delCoFoodItem(coFoodItem);
    	attachmentManager.deleteByModuleIdAndModuleType(id,ModuleTypeEnum.CO_FOOD_ITEM.val);
    	Long cId = coFoodItem.getCo().getId();
    	if(coFoodItem.getRestaurantCode() != null) {
    		restaurantDataEditManager.save(coFoodItem.getFoodItem().getCode(),TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM_RES.val, coFoodItem.getRestaurantCode());
    		view = "redirect:/coFoodItem/list?cId="+ cId + "&rCode=" + coFoodItem.getRestaurantCode();
    	} else {
    		catalogDataEditManager.save(TypeRestaurantDataEditEnum.DELETE_CO_FOODITEM.val,cId,coFoodItem.getFoodItem().getCode());
    		coManager.saveAfterChangeCatalog(cId);
    		view = "redirect:/coFoodItem/catalog-list-foodItem?cId="+ cId;
    	}
    	Locale locale = request.getLocale();
    	addMessage(request, getText("item.deleted", locale));
    	
    	return view;
    }
    
    //=============== Call API =====================//
    
    @GetMapping("/coFoodItem/loadPhotos")
    @ResponseBody
    public List<AttachmentDto> loadPhotos(@RequestParam(value="id", required = false)Long cId) {
    	log.debug("entering 'loadPhotos' method...");
    	return attachmentManager.gets(cId);
    }
    
    @PostMapping("/del/photo")
    public ResponseEntity<String> delPhoto(@RequestParam(value="aId",required = true)Long attachmentId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delPhoto' method...");
    	attachmentManager.deleteById(attachmentId);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/avatar")
    public ResponseEntity<String> delAvatar(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delAvatar' method...");
    	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.AVATAR.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/drinkPhoto")
    public ResponseEntity<String> delDrink(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delDrink' method...");
    	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.DRINK_PHOTO.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/quarter")
    public ResponseEntity<String> delQuarterPhoto(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delQuarterPhoto' method...");
    	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.QUARTER_PHOTO.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @GetMapping("/cag/co/get-features")
    @ResponseBody
    public List<FeatureDto> getFeatures(@RequestParam(value="id", required = false)Long cId) {
    	log.debug("entering 'getFeatures' method...");
    	return featureManager.gets(cId);
    }
    
   @GetMapping("/cag/load-modifiers")
   @ResponseBody
   public List<ModifierDto> loadModifiers(@RequestParam(value="q", required=false) String query) {
   	log.info("entering 'loadModifiers("+query+")' method...");
   	return modifierManager.gets(query);
   }
   
   @GetMapping("/api/co/get-existing-modifiers")
   @ResponseBody
   public List<CofoodItemModifierDto> getExistingCofoodItemModifiers(@RequestParam("coId") Long coId) {
   	log.info("entering 'getExistingCofoodItemModifiers' method...");
   	return coFoodItemManager.getExistingCofoodItemModifiers(coId);
   }
   
   @GetMapping("/api/co/get-existing-related")
   @ResponseBody
   public List<RelatedFoodItemDto> getExistingRelateds(@RequestParam("coId") Long coId) {
   	log.info("entering 'getExistingRelateds' method...");
   	return relatedFoodItemManager.getByTypeAndCoFoodItemId(coId,FoodTypeEnum.RELATED_FOODITEM.val);
   }
   
   @GetMapping("/api/co/get-existing-size-foodItem")
   @ResponseBody
   public List<RelatedFoodItemDto> getExistingSizeFoods(@RequestParam("coId") Long coId) {
   	log.info("entering 'getExistingSizeFoods' method...");
   	return relatedFoodItemManager.getByTypeAndCoFoodItemId(coId,FoodTypeEnum.SIZE_FOODITEM.val);
   }
   
   /*@GetMapping("/cag/load-foodItem-related")
   @ResponseBody
   public List<FoodItemDto> loadFoodItemRelated(@RequestParam(value="q", required=false) String query,@RequestParam(value="cId", required=false) Long cId) {
   	log.info("entering 'loadFoodItemRelated("+query+")' method...");
   	return foodItemManager.gets(query,cId);
   }
   
   @GetMapping("/res/load-foodItem-related")
   @ResponseBody
   public List<FoodItemDto> loadRelatedF(@RequestParam(value="q", required=false) String query,@RequestParam(value="resCode", required=false) Integer resCode) {
   	log.info("entering 'loadRelatedF("+query+")' method...");
   	return foodItemManager.gets(query,resCode);
   }*/
   
   @GetMapping("/cag/co/load-food-items")
   @ResponseBody
   public List<FoodItemDto> loadFoodItemInCatalog(@RequestParam(value="q", required=false) String query,@RequestParam(value="cId", required=false) Long cId) {
   	log.info("entering 'loadFoodItemInCatalog("+query+")' method...");
   	return foodItemManager.getFItemInCatalos(query,cId);
   }
   
   @GetMapping("/res/co/load-food-items")
   @ResponseBody
   public List<FoodItemDto> loadFoodItemInRes(@RequestParam(value="q", required=false) String query,@RequestParam(value="resCode", required=false) Integer resCode) {
   	log.info("entering 'loadFoodItemInCatalog("+query+")' method...");
   	return foodItemManager.getFItemInRes(query,resCode);
   }
   
   /*@GetMapping("/api/co/get-existing-info-foodItem")
   @ResponseBody
   public List<String> getExistingInfoFoodItems(@RequestParam("coId") Long coId) {
   	log.info("entering 'getExistingInfoFoodItems' method...");
   	return coFoodItemManager.getInfoCoFoodItem(coId);
   }*/
   
   @GetMapping("/api/co/get-existing-info-foodItem")
   @ResponseBody
   public String[] getExistingInfoFoodItems(@RequestParam("coId") Long coId) {
   	log.info("entering 'getExistingInfoFoodItems' method...");
   	return coFoodItemManager.getInfoCoFoodItem(coId);
   }
   
   @PostMapping("/del/verticalPhoto")
   public ResponseEntity<String> deldelVerticalPhotoAvatar(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'delVerticalPhoto' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.VERTICAL_PHOTO.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
   
   @PostMapping("/del/horizontalPhoto")
   public ResponseEntity<String> delHorizontalPhoto(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'delHorizontalPhoto' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.HORIZONTAL_PHOTO.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
   
   @PostMapping("/del/groupHiddenPhoto")
   public ResponseEntity<String> delGroupHiddenPhoto(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'delGroupHiddenPhoto' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.GROUP_HIDDEN.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
   
   @PostMapping("/del/groupPhoto")
   public ResponseEntity<String> delGroupPhoto(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'delGroupPhoto' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.GROUP.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
   
   @PostMapping("/del/toppingPhoto")
   public ResponseEntity<String> delToppingPhoto(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'delToppingPhoto' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.TOPPING_PHOTO.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
   
   @PostMapping("/del/halfPhoto")
   public ResponseEntity<String> delHalfPhoto(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'delHalfPhoto' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.HALF_PHOTO.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
   
   @GetMapping("/api/get-existing-topping")
   @ResponseBody
   public List<ToppingFoodItemDto> getExistingToppingFoodItems(@RequestParam("coId") Long coId) {
   	log.info("entering 'getExistingInfoFoodItems' method...");
   	return toppingFoodItemManager.getToppingFoodItems(coId);
   }
   
   @GetMapping("/api/load-extraFoodItem")
   @ResponseBody
   public CoFoodItemDto getExtraFoodItem(@RequestParam("coFId") Long coFId) {
   	log.info("entering 'getExtraFoodItem' method...");
   	return coFoodItemManager.get(coFId);
   }
   
   @GetMapping("/api/load-foodItem-in-cfi")
   @ResponseBody
   public FoodItemDto getFoodItem(@RequestParam("coFId") Long coFId) {
   	log.info("entering 'getExtraFoodItem' method...");
   	return coFoodItemManager.getFoodItemByCFId(coFId);
   }
   
   @PostMapping("/del/qrOrderPhoto")
   public ResponseEntity<String> delqrOrder(@RequestParam(value="coFoodItemId",required = true)Long coFoodItemId,HttpServletRequest request)throws Exception{
   	log.debug("entering 'qrOrder' method...");
   	attachmentManager.deleteAttachment(coFoodItemId, ModuleTypeEnum.CO_FOOD_ITEM.val , FunctionTypeEnum.QR_ORDER_PHOTO.val);
   	return ResponseEntity.ok(HttpStatus.OK.toString());
   }
    
}