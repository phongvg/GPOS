package com.gg.gpos.user.controller;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.controller.BaseController;
import com.gg.gpos.user.dto.PositionDto;
import com.gg.gpos.user.manager.PositionManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class PositionController extends BaseController {

    private PositionManager positionManager;

    @Autowired
    public void setPositionManager(PositionManager positionManager) {
        this.positionManager = positionManager;
    }

    @GetMapping("/position/list")
    public ModelAndView list(){
    	log.debug("entering 'list position' method...");
    	
		ModelAndView modelAndView = new ModelAndView("position-list");
		PositionDto criteria = new PositionDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		modelAndView.addObject("page", positionManager.gets(criteria));
        return modelAndView;
    }
    
    @PostMapping("/position/list")
    public ModelAndView search(@Valid PositionDto criteria)throws Exception{
    	log.debug("entering 'search' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("position-list");
    	if(criteria != null && criteria.getSize() == null) {
    		criteria.setPage(appProperties.getDefaultPage());
    		criteria.setSize(appProperties.getDefaultPageSize());
    	}
    	modelAndView.addObject("page",positionManager.gets(criteria));
    	return modelAndView;	
    }
    
    @ModelAttribute
    @GetMapping("/position/form*")
    public ModelAndView show(@RequestParam(name="id",required = false)String id) throws Exception {
    	log.debug("entering 'show' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("position-form");
    	PositionDto positionDto = new PositionDto();
    	if(!StringUtils.isEmpty(id)) {
    		positionDto = positionManager.get(Long.parseLong(id));
    	}
        modelAndView.addObject("position",positionDto);
        return modelAndView;
    }

    @PostMapping("/position/save")
    public ModelAndView save(@Valid PositionDto positionDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
        log.debug("entering 'save' method...");

        Locale locale = request.getLocale();
        Boolean isNew = (positionDto.getId() == null);
        ModelAndView modelAndView = new ModelAndView();
        String msg = null;
        if (isNew) {
        	msg = getText("position.added", locale);
		}else {
			msg = getText("position.updated", locale);
		}
        positionManager.save(positionDto);
        addMessage(request, msg);
        modelAndView.setViewName("redirect:/position/list");
        
        return modelAndView;
    }
    
    @GetMapping("/position/delete/{id}")
    public ModelAndView delete(@PathVariable("id") String id) throws Exception{
    	log.debug("entering 'delete' method...");
    	ModelAndView modelAndView = new ModelAndView("redirect:/position/list");
    	if(!StringUtils.isEmpty(id)) {
    		PositionDto positionDto = positionManager.get(Long.parseLong(id));
    		positionManager.delete(positionDto);
    	}
    	return modelAndView;
    }
    
}