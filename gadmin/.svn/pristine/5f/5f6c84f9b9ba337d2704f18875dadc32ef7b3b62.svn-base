package com.gg.gpos.menu.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.FunctionTypeEnum;
import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.SizeImageEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.integration.manager.SyncManager;
import com.gg.gpos.menu.dto.CoCategoryDto;
import com.gg.gpos.menu.dto.CoDto;
import com.gg.gpos.menu.dto.FoodGroupDto;
import com.gg.gpos.menu.dto.SoCategoryDto;
import com.gg.gpos.menu.manager.CatalogDataEditManager;
import com.gg.gpos.menu.manager.CoCategoryManager;
import com.gg.gpos.menu.manager.CoManager;
import com.gg.gpos.menu.manager.FoodGroupManager;
import com.gg.gpos.menu.manager.OrderCategoryManager;
import com.gg.gpos.menu.manager.RestaurantDataEditManager;
import com.gg.gpos.menu.manager.SoCategoryManager;
import com.gg.gpos.menu.manager.SoManager;
import com.gg.gpos.reference.dto.AttachmentDto;
import com.gg.gpos.reference.manager.AttachmentManager;
import com.gg.gpos.res.manager.SyncStatusManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class SoCategoryController extends BaseController {
	@Autowired
    private SoCategoryManager soCategoryManager;
    @Autowired
    private CoManager coManager;
    @Autowired
    private OrderCategoryManager orderCategoryManager;
    @Autowired
    private AttachmentManager attachmentManager;
    @Autowired
    private CoCategoryManager coCategoryManager;
    @Autowired
    private FoodGroupManager foodGroupManager;
    @Autowired
    private RestaurantDataEditManager restaurantDataEditManager;
    @Autowired
    private SyncStatusManager syncStatusManager;
    @Autowired
    private CatalogDataEditManager catalogDataEditManager;
    @Autowired
    private SoManager soManager;
    @Autowired
    private SyncManager syncManager;
    
    /*
     * OFF SO_CATEGORY
     */
//    @PostMapping("/cag/so-menu/soCategory/off")
//    public String offSoCategoryMenu(@Valid final SoCategoryDto soCategoryDto, BindingResult bindingResult, HttpServletRequest request) {
//        log.info("ENTERING 'OFF SO_CATEGORY MENU' METHOD...");
//        String view = "";
//        try {
//        	Locale locale = request.getLocale();
//        	if(soCategoryDto.getRestaurantCode() != null) {
//             	view = "redirect:/res/so/menu/list?resCode="+ soCategoryDto.getRestaurantCode();
//             	restaurantDataEditManager.save(String.valueOf(soCategoryDto.getId()), TypeRestaurantDataEditEnum.SO_CATEGORY.val, soCategoryDto.getRestaurantCode());
//        	} else {
//             	view = "redirect:/cag/so/menu/list?soId=" + soCategoryDto.getSo().getId();
//             	soManager.saveAfterChangeCatalog(soCategoryDto.getSo().getId());
//             }
//             if (bindingResult.hasErrors()) {
//             	addError(request, bindingResult.getAllErrors().toString());
//                return view;
//             }
//             SoCategoryDto savedSoCategory = soCategoryManager.save(UserContext.getUsername(), soCategoryDto,appProperties.getAttachmentPath(),appProperties.getAttachmentContextPath());
//             // Off menu và gửi vào QUEUE để gửi thông tin xuống nhà hàng
//          	 List<SyncDto> syncDtos = soCategoryManager.offSoMenuAndCoMenu(savedSoCategory);
//         	 if(!CollectionUtils.isEmpty(syncDtos)) {
//         		 syncManager.savedSyncAfterOffSoCategory(syncDtos);
//         	 }
//          	 if (savedSoCategory != null) {
//                 addMessage(request, getText("soCategory.updated", locale));        	
//             } else {
//             	addError(request, getText("soCategory.error", locale));
//             }
//		} catch (Exception e) {
//			addError(request, e.getMessage());
//			log.error("ERROR OFF SO_CATEGORY MENU EXCEPTION: {}", e);
//		}
//        return view;
//    }
    
 
  //============ CoCategory Catalog ============//
    @GetMapping("/co/soCategory/list")
    public ModelAndView list(@RequestParam(value="cId", required = true)Long cId,HttpServletRequest request) throws Exception {
    	log.debug("entering 'list' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-co-menu-list");
		if(cId != null) {
			CoCategoryDto criteria = new CoCategoryDto();
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			criteria.setCoId(cId);
			Page<CoCategoryDto> pages = coCategoryManager.getsByCoId(criteria);
			pages.getContent().forEach(coCategory ->{
				AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR.val);
				if(avatar != null) {
					coCategory.setAvatarUrl(avatar.getUrl());
					coCategory.setAvatarName(avatar.getFileName());
				}
			});
			modelAndView.addObject("page", pages);
			modelAndView.addObject("criteria",criteria);
		}else {
    		modelAndView.setViewName("redirect:/co/catalog-form");
    		addError(request, getText("co.not.created", request.getLocale()));
		}
        return modelAndView;
    }
    
    @PostMapping("/co/soCategory/list")
    public ModelAndView search(@Valid CoCategoryDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-co-menu-list");
		if(criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<CoCategoryDto> pages = coCategoryManager.getsByCoId(criteria);
		pages.getContent().forEach(coCategory ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coCategory.setAvatarUrl(avatar.getUrl());
				coCategory.setAvatarName(avatar.getFileName());
			}
		});
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping("/co/soCategory/form")
    public ModelAndView show(@RequestParam(value="id",required = false)Long id,@RequestParam(value="cId",required = true)Long cId) throws Exception {
    	log.debug("entering 'show' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("catalog-co-menu-form");
    	CoCategoryDto coCategoryDto = new CoCategoryDto();
    	CoDto co = coManager.get(cId);
    	List<SoCategoryDto> soCategories = soCategoryManager.gets(co.getSoId(),cId);
    	if(id != null) {
    		coCategoryDto = coCategoryManager.get(id);
    		soCategories.add(coCategoryDto.getSoCategory());
    		AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategoryDto.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR.val);
    		 String avatarUrl = avatar.getUrl();
    		 coCategoryDto.setAvatarUrl(avatarUrl);
    		// videoIntroMenuUrl
    		AttachmentDto videoIntroMenu = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_MENU.val);
    		String videoIntroMenuUrl = videoIntroMenu.getUrl();
   		 	coCategoryDto.setVideoIntroMenuUrl(videoIntroMenuUrl);
    		//videoIntroResUrl
    		AttachmentDto videoIntroRes = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_RES.val);
    		String videoIntroResUrl = videoIntroRes.getUrl();
   		 	coCategoryDto.setVideoIntroResUrl(videoIntroResUrl);
   		 	
   		 	AttachmentDto singleCategoryPhoto = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.SINGLE_CATEGORY.val);
   		 	String singleCategoryPhotoUrl = singleCategoryPhoto.getUrl();
		 	coCategoryDto.setSingleCategoryPhotoUrl(singleCategoryPhotoUrl);
   		 	
		 	AttachmentDto multiCategoryPhoto = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.MULTI_CATEGORY.val);
   		 	String multiCategoryPhotoUrl = multiCategoryPhoto.getUrl();
		 	coCategoryDto.setMultiCategoryPhotoUrl(multiCategoryPhotoUrl);
    	}else {
    		coCategoryDto.setCoId(cId);
    		coCategoryDto.setStatus(true);
    	}
    	modelAndView.addObject("coCategory",coCategoryDto);
    	modelAndView.addObject("soCategories",soCategories);
		modelAndView.addObject("orderCategories", orderCategoryManager.gets());
		
        return modelAndView;
    }

    @PostMapping("/co/soCategory/save")
    public String save(@Valid CoCategoryDto coCategory, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
        log.debug("entering 'save' method...");

        Locale locale = request.getLocale();
        String view = "catalog-co-menu-form";
        try {
        	 if (bindingResult.hasErrors()) {
             	addError(request, bindingResult.getAllErrors().toString());
                 return view;
             }
        	
        	if(coCategory.getPhotos().size() > SizeImageEnum.FILE_SIZE.sizeImage) {
            	addError(request, getText("soCategory.update.image.fail", request.getLocale()));
        		if(coCategory.getId() != null) {
        			view = "redirect:/co/soCategory/form?id="+ coCategory.getId() + "&cId=" + coCategory.getCoId();
        		}else {
        			view = "redirect:/co/soCategory/form?cId="+ coCategory.getCoId();
        		}
            }else {
        		CoCategoryDto coCategoryNew = coCategoryManager.save(coCategory);
        		Integer restaurantCode = coCategoryNew.getRestaurantCode();
        		String code = coCategory.getOrderCategoryCode();
        		catalogDataEditManager.save(TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategoryNew.getCoId(), coCategoryNew.getId().toString());
            	if(coCategory.getAvatar() != null) {
                	attachmentManager.saveAttachment(coCategory.getAvatar(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR.val, restaurantCode, code);
                }
            	if(coCategory.getPhotos() != null) {
                	attachmentManager.saveAttachments(coCategory.getPhotos(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.IMAGES.val, restaurantCode, code);
                }
            	// video and image intro
            	if(coCategory.getPhotoIntroMenus() != null) {
                	attachmentManager.saveAttachments(coCategory.getPhotoIntroMenus(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_MENU.val, restaurantCode, code);
                }
            	if(coCategory.getPhotoIntroRes() != null) {
                	attachmentManager.saveAttachments(coCategory.getPhotoIntroRes(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_RES.val, restaurantCode, code);
                }
            	if(coCategory.getVideoIntroMenu() != null) {
                	attachmentManager.saveVideoAttachment(coCategory.getVideoIntroMenu(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_MENU.val, restaurantCode, code);
                }
            	if(coCategory.getVideoIntroRes() != null) {
                	attachmentManager.saveVideoAttachment(coCategory.getVideoIntroRes(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_RES.val, restaurantCode, code);
                }
            	if(coCategory.getSingleCategoryPhoto() != null) {
                	attachmentManager.saveAttachment(coCategory.getSingleCategoryPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.SINGLE_CATEGORY.val, restaurantCode, code);
                }
            	if(coCategory.getMultiCategoryPhoto() != null) {
                	attachmentManager.saveAttachment(coCategory.getMultiCategoryPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.MULTI_CATEGORY.val, restaurantCode, code);
                }
            	if(coCategoryNew.getCoId() != null) {
            		coManager.saveAfterChangeCatalog(coCategoryNew.getCoId());
            	}
                addMessage(request, getText("soCategory.updated", locale));
                view = "redirect:/co/soCategory/list?cId=" + coCategory.getCoId();
            }
		} catch (Exception e) {
			addError(request, e.getMessage());
			log.error("EXCEPTION: {}", e);
		}
        
        return view;
    }
    
    
    // =========== CoCategory Restaurant ==============// 
    
    @GetMapping("/res/co/soCategory/list")
    public ModelAndView listSoCategpry(@RequestParam(name="rCode", required = true) Integer rCode,@RequestParam(name="cId",required = false)Long coId,HttpServletRequest request) throws Exception {
    	log.debug("entering 'listSoCategpry' method...");
		ModelAndView modelAndView = new ModelAndView("res-co-menu-list");
		if(rCode != null ) {
			CoCategoryDto criteria = new CoCategoryDto();
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			Long cId = null;
			/*criteria.setCoId(cId);*/
			criteria.setRestaurantCode(rCode);
			Page<CoCategoryDto> pages = coCategoryManager.gets(criteria);
			pages.getContent().forEach(coCategory ->{
				AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.AVATAR.val);
				if(avatar != null) {
					coCategory.setAvatarUrl(avatar.getUrl());
					coCategory.setAvatarName(avatar.getFileName());
				}
				// avatar intro restaurant
				/*AttachmentDto avatarRes = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_RES.val);
				if(avatarRes != null) {
					coCategory.setPhotoIntroResUrl(avatarRes.getUrl());
				}*/
			});
			if(coId != null) {
				cId = coId;
			}
			modelAndView.addObject("coId", cId);
			modelAndView.addObject("page", pages);
			modelAndView.addObject("criteria", criteria);
		}
        return modelAndView;
    }
    
    @PostMapping("/res/co/soCategory/list")
    public ModelAndView searchCategory(@Valid CoCategoryDto criteria, BindingResult bindingResult) throws Exception {
    	log.debug("entering 'listSoCategpry' method...");
		ModelAndView modelAndView = new ModelAndView("res-co-menu-list");
		if(criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<CoCategoryDto> pages = coCategoryManager.gets(criteria);
		pages.getContent().forEach(coCategory ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coCategory.setAvatarUrl(avatar.getUrl());
				coCategory.setAvatarName(avatar.getFileName());
			}
		});
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria", criteria);
        return modelAndView;
    }
    
    @GetMapping("/res/co/soCategory/form")
    public ModelAndView showForm(@RequestParam(value="id",required = false)Long id,@RequestParam(value="cId",required = false)Long coId,@RequestParam(value="rCode",required = true)Integer rCode) throws Exception {
    	log.debug("entering 'showForm' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("res-co-menu-form");
    	CoCategoryDto coCategoryDto = new CoCategoryDto();
    	List<SoCategoryDto> soCategories = soCategoryManager.getByRCode(rCode);
    	if(id != null) {
    		coCategoryDto = coCategoryManager.get(id);
    		soCategories.add(coCategoryDto.getSoCategory());
    		AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategoryDto.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR.val);
	   		 String avatarUrl = avatar.getUrl();
	   		 coCategoryDto.setAvatarUrl(avatarUrl);
	   		/*// photoIntroResUrl
	   		AttachmentDto photoIntroRes = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_RES.val);
	   		String photoIntroResUrl = photoIntroRes.getUrl();
	  		 	coCategoryDto.setPhotoIntroResUrl(photoIntroResUrl);
	   		// photoIntroMenuUrl
	   		AttachmentDto photoIntroMenu = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_MENU.val);
	   		String photoIntroMenuUrl = photoIntroMenu.getUrl();
	  		 	coCategoryDto.setPhotoIntroMenuUrl(photoIntroMenuUrl);*/
	   		// videoIntroMenuUrl
	   		AttachmentDto videoIntroMenu = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_MENU.val);
	   		String videoIntroMenuUrl = videoIntroMenu.getUrl();
	  		 coCategoryDto.setVideoIntroMenuUrl(videoIntroMenuUrl);
	   		//videoIntroResUrl
	   		AttachmentDto videoIntroRes = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_RES.val);
	   		String videoIntroResUrl = videoIntroRes.getUrl();
  		 	coCategoryDto.setVideoIntroResUrl(videoIntroResUrl);
  		 	
  		 	AttachmentDto singleCategoryPhoto = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.SINGLE_CATEGORY.val);
   		 	String singleCategoryPhotoUrl = singleCategoryPhoto.getUrl();
		 	coCategoryDto.setSingleCategoryPhotoUrl(singleCategoryPhotoUrl);
   		 	
		 	AttachmentDto multiCategoryPhoto = attachmentManager.getAttachmentDto(coCategoryDto.getId(),ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.MULTI_CATEGORY.val);
   		 	String multiCategoryPhotoUrl = multiCategoryPhoto.getUrl();
		 	coCategoryDto.setMultiCategoryPhotoUrl(multiCategoryPhotoUrl);
	    }else {
	    	coCategoryDto.setRestaurantCode(rCode);
	    	coCategoryDto.setStatus(true);
    	}
    	modelAndView.addObject("coId",coId);
    	modelAndView.addObject("coCategory",coCategoryDto);
    	modelAndView.addObject("soCategories",soCategories);
		modelAndView.addObject("orderCategories", orderCategoryManager.gets());

        return modelAndView;
    }

    @PostMapping("/res/co/soCategory/save")
    public String saveSoCategory(@Valid CoCategoryDto coCategory,@RequestParam(value="cId",required = false)Long coId,BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
        log.debug("entering 'saveSoCategory' method...");

        Locale locale = request.getLocale();
        String view = "res-co-menu-form";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        try {
        	if(coCategory.getPhotos().size() > SizeImageEnum.FILE_SIZE.sizeImage) {
            	addError(request, getText("soCategory.update.image.fail", request.getLocale()));
        		if(coCategory.getId() != null) {
        			view = "redirect:/res/co/soCategory/form?id="+ coCategory.getId() +"&rCode=" + coCategory.getRestaurantCode();
        		}else {
        			view = "redirect:/res/co/soCategory/form?rCode=" + coCategory.getRestaurantCode();
        		}
            }else {
        		CoCategoryDto coCategoryNew = coCategoryManager.save(coCategory);
        		Integer restaurantCode = coCategoryNew.getRestaurantCode();
        		String code = coCategory.getOrderCategoryCode();
        		restaurantDataEditManager.save(coCategoryNew.getId().toString(),TypeRestaurantDataEditEnum.CO_CATEGORY.val, coCategoryNew.getRestaurantCode());
        		syncStatusManager.saveSttAfterEditDataBusiness(coCategoryNew.getRestaurantCode());
        		if(coCategory.getAvatar() != null) {
                	attachmentManager.saveAttachment(coCategory.getAvatar(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR.val, restaurantCode, code);
                }
            	if(coCategory.getPhotos() != null) {
                	attachmentManager.saveAttachments(coCategory.getPhotos(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.IMAGES.val, restaurantCode, code);
                }
            	
            	if(coCategory.getPhotoIntroMenus() != null) {
                	attachmentManager.saveAttachments(coCategory.getPhotoIntroMenus(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_MENU.val, restaurantCode, code);
                }
            	if(coCategory.getPhotoIntroRes() != null) {
                	attachmentManager.saveAttachments(coCategory.getPhotoIntroRes(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.AVATAR_ABOUTUS_RES.val, restaurantCode, code);
                }
            	if(coCategory.getVideoIntroMenu() != null) {
                	attachmentManager.saveVideoAttachment(coCategory.getVideoIntroMenu(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_MENU.val, restaurantCode, code);
                }
            	if(coCategory.getVideoIntroRes() != null) {
                	attachmentManager.saveVideoAttachment(coCategory.getVideoIntroRes(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.VIDEO_ABOUTUS_RES.val, restaurantCode, code);
                }
            	if(coCategory.getSingleCategoryPhoto() != null) {
                	attachmentManager.saveAttachment(coCategory.getSingleCategoryPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.SINGLE_CATEGORY.val, restaurantCode, code);
                }
            	if(coCategory.getMultiCategoryPhoto() != null) {
                	attachmentManager.saveAttachment(coCategory.getMultiCategoryPhoto(), appProperties.getAttachmentPath(), appProperties.getAttachmentContextPath(), coCategoryNew.getId(), ModuleTypeEnum.CO_CATEGORY.val, FunctionTypeEnum.MULTI_CATEGORY.val, restaurantCode, code);
                }
                addMessage(request, getText("soCategory.updated", locale));
                if(coId != null) {
                	view = "redirect:/res/co/soCategory/list?cId="+ coId +"&rCode=" + coCategory.getRestaurantCode();
                }else {
                	view = "redirect:/res/co/soCategory/list?cId=&rCode=" + coCategory.getRestaurantCode();
                }
            }
		} catch (Exception e) {
			addError(request, e.getMessage());
		}

        return view;
    }
    
    @GetMapping("/coCategory/delete")
    public String delCoCategory(@RequestParam(value="id")Long id,@RequestParam(value="resCode",required = false) Integer resCode,@RequestParam(value="cId",required = false) Long cId,HttpServletRequest request) {
    	log.debug("entering 'del CoCategory' method...");
    	String view = "";
    	Locale locale = request.getLocale();
    	try {
    		coCategoryManager.delCoCategoryById(id);
    		if(cId != null) {
    			coManager.saveAfterChangeCatalog(cId);
    		}
        	addMessage(request, getText("item.deleted", locale));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	if(resCode != null) {
    		view = "redirect:/res/co/soCategory/list?rCode=" + resCode;
    	} else {
    		view = "redirect:/co/soCategory/list?cId=" + cId;
    	}
    	
    	return view;
    }
    
    
    @GetMapping("/res/coCategory/changed")
    public ModelAndView listSoCateChanged(@RequestParam(name="rCode", required = true) Integer rCode,@RequestParam(name="cId",required = false)Long coId,HttpServletRequest request) throws Exception {
    	log.debug("entering 'listSoCateChanged' method...");
		ModelAndView modelAndView = new ModelAndView("res-co-menu-changed");
		if(rCode != null ) {
			CoCategoryDto criteria = new CoCategoryDto();
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			Long cId = null;
			/*criteria.setCoId(cId);*/
			criteria.setRestaurantCode(rCode);
			Page<CoCategoryDto> pages = coCategoryManager.getCoCateChanged(criteria);
			pages.getContent().forEach(coCategory ->{
				AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.AVATAR.val);
				if(avatar != null) {
					coCategory.setAvatarUrl(avatar.getUrl());
					coCategory.setAvatarName(avatar.getFileName());
				}
			});
			if(coId != null) {
				cId = coId;
			}
			modelAndView.addObject("coId", cId);
			modelAndView.addObject("page", pages);
			modelAndView.addObject("criteria", criteria);
		}
        return modelAndView;
    }
    
    @PostMapping("/res/coCategory/changed")
    public ModelAndView listSoCateChanged(@Valid CoCategoryDto criteria, BindingResult bindingResult) throws Exception {
    	log.debug("entering 'listSoCateChanged' method...");
		ModelAndView modelAndView = new ModelAndView("res-co-menu-changed");
		if(criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<CoCategoryDto> pages = coCategoryManager.getCoCateChanged(criteria);
		pages.getContent().forEach(coCategory ->{
			AttachmentDto avatar = attachmentManager.getAttachmentDto(coCategory.getId(),ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.AVATAR.val);
			if(avatar != null) {
				coCategory.setAvatarUrl(avatar.getUrl());
				coCategory.setAvatarName(avatar.getFileName());
			}
		});
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria", criteria);
        return modelAndView;
    }
    
    @PostMapping("/res/coCategory/reset")
    public String resetCFI(@Valid CoCategoryDto criteria, BindingResult bindingResult,HttpServletRequest request){
    	log.debug("entering 'search' method...");
		String view = "res-co-menu-changed";
		Integer resCode = criteria.getRestaurantCode();
		if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
		try {
			coManager.resetCoCateCategories(resCode);
			addMessage(request, getText("reset.data.success", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
		view = "redirect:/res/coCategory/changed?rCode=" + resCode;
        return view;
    }
    //=========== API ============//
    @GetMapping("/soCategory/loadPhotoRes")
    public ResponseEntity<List<AttachmentDto>> loadPhotoRes(@RequestParam(value ="id" ,required = true)Long id,HttpServletRequest request)throws Exception{
    	log.debug("entering 'loadPhotoRes' method....");
    	List<AttachmentDto> attachments = attachmentManager.getAttachmentDtos(id,ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.AVATAR_ABOUTUS_RES.val);
    	List<AttachmentDto> attachmentDtos = new ArrayList<>();
    	if(attachments != null && !attachments.isEmpty()) {
    		attachmentDtos = attachments.stream().map(attachment ->{
    			AttachmentDto attachmentDto = new AttachmentDto();
    			BeanUtils.copyProperties(attachment, attachmentDto);
    			return attachmentDto;
    		}).collect(Collectors.toList());
    	}
    	return ResponseEntity.ok(attachmentDtos);
    }
    
    @GetMapping("/soCategory/loadPhotoMenus")
    public ResponseEntity<List<AttachmentDto>> loadPhotoMenus(@RequestParam(value ="id" ,required = true)Long id,HttpServletRequest request)throws Exception{
    	log.debug("entering 'loadPhotoMenus' method....");
    	List<AttachmentDto> attachments = attachmentManager.getAttachmentDtos(id,ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.AVATAR_ABOUTUS_MENU.val);
    	List<AttachmentDto> attachmentDtos = new ArrayList<>();
    	if(attachments != null && !attachments.isEmpty()) {
    		attachmentDtos = attachments.stream().map(attachment ->{
    			AttachmentDto attachmentDto = new AttachmentDto();
    			BeanUtils.copyProperties(attachment, attachmentDto);
    			return attachmentDto;
    		}).collect(Collectors.toList());
    	}
    	return ResponseEntity.ok(attachmentDtos);
    }
    
    
    @GetMapping("/soCategory/loadPhotos")
    public ResponseEntity<List<AttachmentDto>> loadPhotos(@RequestParam(value ="id" ,required = true)Long id,HttpServletRequest request)throws Exception{
    	log.debug("entering 'loadPhotos' method....");
    	List<AttachmentDto> attachments = attachmentManager.getAttachmentDtos(id,ModuleTypeEnum.CO_CATEGORY.val,FunctionTypeEnum.IMAGES.val);
    	List<AttachmentDto> attachmentDtos = new ArrayList<>();
    	if(attachments != null && !attachments.isEmpty()) {
    		attachmentDtos = attachments.stream().map(attachment ->{
    			AttachmentDto attachmentDto = new AttachmentDto();
    			BeanUtils.copyProperties(attachment, attachmentDto);
    			return attachmentDto;
    		}).collect(Collectors.toList());
    	}
    	return ResponseEntity.ok(attachmentDtos);
    }
    
    @PostMapping("/soCategory/del/photo")
    public ResponseEntity<String> delPhoto(@RequestParam(value="aId",required = true)Long attachmentId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delPhoto' method...");
    	attachmentManager.deleteById(attachmentId);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/soCategory/del/photoIntroRes")
    public ResponseEntity<String> delPhotoIntroRes(@RequestParam(value="aId",required = true)Long attachmentId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delPhotoIntroRes' method...");
    	attachmentManager.deleteById(attachmentId);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/soCategory/del/photoIntroMenu")
    public ResponseEntity<String> delPhotoIntroMenu(@RequestParam(value="aId",required = true)Long attachmentId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delPhotoIntroMenu' method...");
    	attachmentManager.deleteById(attachmentId);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @GetMapping("/co/get-info-soCategory")
    @ResponseBody
    public SoCategoryDto getInfoSoCategory(@RequestParam(value ="id" ,required = true)Long id) {
    	log.debug("entering 'getInfoSoCategory' method...");
    	return soCategoryManager.getById(id);
    }
    
    @PostMapping("/del/soCategory/avatar")
    public ResponseEntity<String> delAvatar(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delAvatar' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.AVATAR.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/soCategory/singleCategory")
    public ResponseEntity<String> delSingleCategory(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delSingleCategory' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.SINGLE_CATEGORY.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/soCategory/mutilCategory")
    public ResponseEntity<String> delMutilCategory(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delMutilCategory' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.MULTI_CATEGORY.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    /*@PostMapping("/del/soCategory/photoIntroRes")
    public ResponseEntity<String> delPhotoIntroRes(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delPhotoIntroRes' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.AVATAR_ABOUTUS_RES.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/soCategory/photoIntroMenu")
    public ResponseEntity<String> delPhotoIntroMenu(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delPhotoIntroMenu' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.AVATAR_ABOUTUS_MENU.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }*/
    
    @GetMapping("/cag/co/get-foodGroup-display")
    @ResponseBody
    public List<FoodGroupDto> getFoodGroups(@RequestParam(value="coCategoryId", required = false)Long coCategoryId,@RequestParam(value="soCategoryId", required = false)Long soCategoryId,@RequestParam(value="resCode", required=false) Integer restaurantCode) {
    	log.debug("entering 'getFoodGroups' method...");
    	return foodGroupManager.getFoodGroups(coCategoryId,soCategoryId,restaurantCode);
    }
    
    @PostMapping("/del/soCategory/videoIntroRes")
    public ResponseEntity<String> delVideoIntroRes(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delVideoIntroRes' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.VIDEO_ABOUTUS_RES.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    @PostMapping("/del/soCategory/videoIntroMenu")
    public ResponseEntity<String> delVideoIntroMenu(@RequestParam(value="coCategoryId",required = true)Long coCategoryId,HttpServletRequest request)throws Exception{
    	log.debug("entering 'delVideoIntroMenu' method...");
    	attachmentManager.deleteAttachment(coCategoryId, ModuleTypeEnum.CO_CATEGORY.val , FunctionTypeEnum.VIDEO_ABOUTUS_MENU.val);
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
}