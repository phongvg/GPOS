	package com.gg.gpos.menu.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.FunctionTypeEnum;
import com.gg.gpos.common.constant.MenuTypeEnum;
import com.gg.gpos.common.constant.ModuleTypeEnum;
import com.gg.gpos.common.constant.SymbolEnum;
import com.gg.gpos.common.constant.TypeRestaurantDataEditEnum;
import com.gg.gpos.common.constant.UploadImageEnum;
import com.gg.gpos.common.json.MenuFoodGroup;
import com.gg.gpos.common.json.ResponseData;
import com.gg.gpos.common.util.FancyTree;
import com.gg.gpos.common.util.KeyValue;
import com.gg.gpos.common.util.UserContext;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.integration.exception.IntegrationException;
import com.gg.gpos.menu.dto.CatalogApplyToRestaurantDto;
import com.gg.gpos.menu.dto.FoodGroupDto;
import com.gg.gpos.menu.dto.FoodItemDto;
import com.gg.gpos.menu.dto.MenuTypeDto;
import com.gg.gpos.menu.dto.SoCategoryDto;
import com.gg.gpos.menu.dto.SoDto;
import com.gg.gpos.menu.manager.CatalogApplyToRestaurantManager;
import com.gg.gpos.menu.manager.CoCategoryManager;
import com.gg.gpos.menu.manager.FoodGroupManager;
import com.gg.gpos.menu.manager.FoodItemManager;
import com.gg.gpos.menu.manager.MenuTypeManager;
import com.gg.gpos.menu.manager.OrderCategoryManager;
import com.gg.gpos.menu.manager.RestaurantDataEditManager;
import com.gg.gpos.menu.manager.SoCategoryManager;
import com.gg.gpos.menu.manager.SoManager;
import com.gg.gpos.reference.manager.AttachmentManager;
import com.gg.gpos.res.manager.SyncStatusManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class SoController extends BaseController {
	@Autowired
    private SoManager soManager;
	@Autowired
    private SoCategoryManager soCategoryManager;
	@Autowired
    private FoodItemManager foodItemManager;
	@Autowired
	private OrderCategoryManager orderCategoryManager;
	@Autowired
	private MenuTypeManager menuTypeManager;
	@Autowired
	private FoodGroupManager foodGroupManager;
	@Autowired
	private AttachmentManager attachmentManager;
	@Autowired
    private SyncStatusManager syncStatusManager;
	@Autowired
    private RestaurantDataEditManager restaurantDataEditManager;
    @Autowired
    private CatalogApplyToRestaurantManager catalogApplyToRestaurantManager;
    @Autowired
    private CoCategoryManager coCategoryManager;
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
	    binder.setAutoGrowCollectionLimit(5000);
	}
	
	/*
	 * Hiển thị danh sách danh mục SO
	 */
    @GetMapping("/cag/so/list")
    public ModelAndView listCatalogSo(HttpServletRequest request) {
    	log.debug("ENTERING 'LIST CATALOG SO' METHOD...");
    	SoDto criteria = new SoDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		ModelAndView modelAndView = new ModelAndView("catalog-so-list");
		modelAndView.addObject("page", soManager.gets(criteria));
		modelAndView.addObject("sos", soManager.getByStatusTrue());
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    /*
     * Tìm kiếm danh sách danh mục SO
     */
    @PostMapping("/cag/so/list")
    public ModelAndView searchSO(Model model, @Valid SoDto criteria, BindingResult bindingResult, HttpServletRequest request) {
    	log.debug("ENTERING 'SEARCH CATALOG SO' METHOD...");
    	ModelAndView modelAndView = new ModelAndView("catalog-so-list");
		
		if (criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		} else {
	    	if (request.getParameter("btnSearch") != null) {
	    		criteria.setPage(0);
	    	}
		}
		modelAndView.addObject("page", soManager.gets(criteria));
		modelAndView.addObject("sos", soManager.getByStatusTrue());
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    /*
     * Form tạo mới và chỉnh sửa thông tin danh mục SO
     */
	@GetMapping("/cag/so/form")
    public ModelAndView show(@RequestParam (value="id", required=false) Long id) {
    	log.debug("ENTERING 'SHOW CATALOG SO FORM' METHOD...");
    	ModelAndView modelAndView = new ModelAndView("catalog-so-form");
    	if (id != null) {
            modelAndView.addObject("so", soManager.get(id));
    	} else {
    		modelAndView.addObject("so", new SoDto());
    	}
        return modelAndView;
    }

	/*
	 * LƯU THÔNG TIN CATALOG SO
	 */
	@PostMapping("/cag/so/save")
    public String save(@Valid SoDto soDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("ENTERING 'SAVE CATALOG SO' METHOD...");
        Locale locale = request.getLocale();
        String view = "catalog-so-form";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        	log.error("SAVE CATALOG SO ERROR - BINDING_RESULT: {}", bindingResult);
            return view;
        }
        String username = UserContext.getUsername();
        if (soDto.getId() != null) {
        	soDto.setModifiedBy(username);
        } else {
        	soDto.setCreatedBy(username);
        	soDto.setModifiedBy(username);
        }
        try {
        	SoDto so = soManager.save(soDto);
            addMessage(request, getText("so.updated", locale));
            view = "redirect:/cag/so/form?id=" + so.getId(); 
		} catch (Exception e) {
			addError(request, e.getMessage());
			log.error("SAVE CATALOG SO ERROR - EXCEPTION: {}", e);
		}
        return view;
    }

	/*
	 * 
	 */
	@GetMapping("/cag/so/del/{id}")
    public ModelAndView del(@PathVariable (value="id", required=true) Long id, HttpServletRequest request) {
    	log.info("entering 'del' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("redirect:/cag/so/list");
    	if (id != null) {
    		// check so is using or not
    		// if it is applied to restaurant -> can not delete
    		if (soManager.isApplied(id)) {
    			addError(request, getText("so.delete.fail", request.getLocale()));
    		} else {
    			soManager.delete(id);
    			addMessage(request, getText("so.delete.success", request.getLocale()));
    		}
    	} else {
    		addError(request, getText("so.not.found", request.getLocale()));
    	}

        return modelAndView;
    }
    
    @GetMapping("/cag/so/apply")
    public ModelAndView showApply(@RequestParam Long soId, HttpServletRequest request) {
    	log.info("entering 'showApply' method...");

		ModelAndView modelAndView = new ModelAndView("catalog-so-apply");
		if (soId != null) {
	    	SoDto so = new SoDto();
	    	so.setId(soId);
			modelAndView.addObject("so", so);
    	} else {
    		modelAndView.setViewName("redirect:/cag/so/form");
    		addError(request, getText("so.not.created", request.getLocale()));
    	}
        return modelAndView;
    }
    
    @GetMapping("/cag/so/add-food-item/form")
    public ModelAndView showFormAddItem() {
    	log.info("entering 'showFormAddItem' method...");
    	ModelAndView modelAndView = new ModelAndView("catalog-so-form-add-item");
    	SoCategoryDto soCategory = new SoCategoryDto();
		modelAndView.addObject("soCategory", soCategory);
        return modelAndView;
    }
    
    @GetMapping("/cag/so/menu/list")
    public ModelAndView menuList(@RequestParam Long soId, HttpServletRequest request) {
    	log.info("entering 'menuList' method...");

		ModelAndView modelAndView = new ModelAndView("catalog-so-menu-list");
		if (soId != null) {
	    	SoCategoryDto criteria = new SoCategoryDto();
	    	criteria.setSoId(soId);
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			modelAndView.addObject("page", soCategoryManager.gets(criteria));
			modelAndView.addObject("criteria", criteria);
    	} else {
    		modelAndView.setViewName("redirect:/cag/so/form");
    		addError(request, getText("so.not.created", request.getLocale()));
    	}

        return modelAndView;
    }
    
    @PostMapping("/cag/so/menu/list")
    public ModelAndView searchConfigMenu(Model model, @Valid SoCategoryDto criteria, BindingResult bindingResult) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("catalog-so-menu-list");
    	if (criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
    	modelAndView.addObject("page", soCategoryManager.gets(criteria));
		modelAndView.addObject("criteria", criteria);
    	return modelAndView;
    }

    @GetMapping("/cag/so/menu/form")
    public ModelAndView showSoMenuForm(@RequestParam (value="soId", required=true) Long soId, @RequestParam(value="id", required=false) Long soCategoryId) {
    	log.info("entering 'showSoMenuForm("+soId+", "+soCategoryId+")' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("catalog-so-menu-form");
    	if (soCategoryId != null) {
            modelAndView.addObject("soCategory", soCategoryManager.get(soCategoryId));
    	} else {
    		SoCategoryDto soCategory = new SoCategoryDto();
    		SoDto so = new SoDto();
    		so.setId(soId);
    		soCategory.setSo(so);
    		modelAndView.addObject("soCategory", soCategory);
    	}
    	
    	List<KeyValue> keyValues = new ArrayList<>();
    	for (MenuTypeEnum e : MenuTypeEnum.values()) {
    		KeyValue keyValue = new KeyValue();
    		keyValue.setKey(e.key);
    		keyValue.setVal(e.val);
    		keyValues.add(keyValue);
    	}
    	
    	modelAndView.addObject("orderCategories", orderCategoryManager.gets(soId));
    	modelAndView.addObject("parents", foodGroupManager.gets(soId));
    	modelAndView.addObject("types", keyValues);
    	// add attachmentpath
    	modelAndView.addObject("attachmentPath", appProperties.getAttachmentPath());
    	modelAndView.addObject("attachmentContextPath", appProperties.getAttachmentContextPath());

        return modelAndView;
    }
 
	@PostMapping("/cag/so/menu/save")
    public String saveMenu(@Valid final SoCategoryDto soCategory, final BindingResult bindingResult, final HttpServletRequest request, final HttpServletResponse response) {
        log.info("entering 'saveMenu' method...");

        Locale locale = request.getLocale();
        String view = "redirect:/cag/so/menu/list?soId=" + soCategory.getSo().getId();
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        try {
        	SoCategoryDto savedSoCategory = soCategoryManager.save(UserContext.getUsername(), soCategory,appProperties.getAttachmentPath(),appProperties.getAttachmentContextPath());
            if (savedSoCategory != null) {
            	soManager.saveAfterChangeCatalog(savedSoCategory.getSo().getId());
                addMessage(request, getText("soCategory.updated", locale));        	
            } else {
            	addError(request, getText("soCategory.error", locale));
            }
		} catch (Exception e) {
			addError(request, e.getMessage());
			log.error("ERROR: ", e);
		}
        

        return view;
    }
    
    @GetMapping("/cag/so/menu/del/{soId}/{scId}")
    public String delSoMenu(@PathVariable Long soId, @PathVariable Long scId, final HttpServletRequest request) {
    	log.info("entering 'delSoMenu' method...");
    	
    	String view = "redirect:/cag/so/menu/list?soId=" + soId;
    	try {
    		List<Long> removedCoFoodItemIds = soCategoryManager.deleleBySO(soId, scId);
            // delete attachments of removed-co-food-items
        	if (removedCoFoodItemIds != null && !removedCoFoodItemIds.isEmpty()) {
            	removedCoFoodItemIds.stream().forEach(id -> attachmentManager.deleteByModuleIdAndModuleType(id, ModuleTypeEnum.CO_FOOD_ITEM.val));
            }
        	
        	addMessage(request, getText("soCategory.deleted", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	return view;
    }
    
    @GetMapping("/cag/so/foodGroup/list")
    public ModelAndView listFoodGroup(@RequestParam Long soId, HttpServletRequest request) {
    	log.info("entering 'listFoodGroup' method...");

		ModelAndView modelAndView = new ModelAndView("catalog-so-foodGroup-list");
		if (soId != null) {
	    	FoodGroupDto criteria = new FoodGroupDto();
	    	criteria.setSoId(soId);
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			modelAndView.addObject("page", foodGroupManager.gets(criteria));
			modelAndView.addObject("criteria", criteria);
    	}

        return modelAndView;
    }

    @GetMapping("/cag/so/foodItem/list")
    public ModelAndView listFoodItem(@RequestParam Long soId, HttpServletRequest request) {
    	log.info("entering 'listFoodItem' method...");

		ModelAndView modelAndView = new ModelAndView("catalog-so-foodItem-list");
		if (soId != null) {
	    	FoodItemDto criteria = new FoodItemDto();
	    	criteria.setSoId(soId);
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			modelAndView.addObject("page", foodItemManager.gets(criteria));
			modelAndView.addObject("criteria", criteria);
    	}

        return modelAndView;
    }
    
    //---------- /For Catalog ----------//
    
    
    //------------------------------------//
    //---------- For Restaurant ----------//
    //------------------------------------//
    @GetMapping("/res/so/menu/list")
    public ModelAndView listResSo(@RequestParam Integer resCode, HttpServletRequest request) {
    	log.info("entering 'listResSo' method...");
    	ModelAndView modelAndView = new ModelAndView("res-so-menu-list");
    	if (resCode != null) {
    		SoCategoryDto criteria = new SoCategoryDto();
    		CatalogApplyToRestaurantDto applyToRestaurantDto = catalogApplyToRestaurantManager.getByResCode(resCode);
        	if(applyToRestaurantDto != null && applyToRestaurantDto.getSoId() != null) {
        		criteria.setId(applyToRestaurantDto.getSoId());
        	} 
        	criteria.setRestaurantCode(resCode);
    		criteria.setPage(appProperties.getDefaultPage());
    		criteria.setSize(appProperties.getDefaultPageSize());
    		modelAndView.addObject("page", soCategoryManager.gets(criteria));
    		modelAndView.addObject("criteria",criteria);
    		
    		/*modelAndView.addObject("so", soManager.getByRestaurantCode(resCode));*/
    		modelAndView.addObject("sos", soManager.getByStatusTrue());
    		modelAndView.addObject("restaurants", restaurantManager.getRelatedRestaurants(resCode));
    	} else {
    		addError(request, getText("restaurant.not.found", request.getLocale()));
    	}

        return modelAndView;
    }
    
    @PostMapping("/res/so/menu/list")
    public ModelAndView searchResSo(@Valid SoCategoryDto criteria,  HttpServletRequest request) {
    	log.info("entering 'listResSo' method...");
    	ModelAndView modelAndView = new ModelAndView("res-so-menu-list");
    	if (criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
    	modelAndView.addObject("page", soCategoryManager.gets(criteria));
		modelAndView.addObject("criteria",criteria);
		modelAndView.addObject("sos", soManager.getByStatusTrue());
		modelAndView.addObject("restaurants", restaurantManager.getRelatedRestaurants(criteria.getRestaurantCode()));
        return modelAndView;
    }
    
    
    @GetMapping("/res/so/menu/changed")
    public ModelAndView listMenuChanged(@RequestParam Integer resCode, HttpServletRequest request) {
    	log.info("entering 'listMenuChanged' method...");
    	ModelAndView modelAndView = new ModelAndView("res-so-menu-changed");
    	if (resCode != null) {
    		SoCategoryDto criteria = new SoCategoryDto();
        	criteria.setRestaurantCode(resCode);
    		criteria.setPage(appProperties.getDefaultPage());
    		criteria.setSize(appProperties.getDefaultPageSize());
    		modelAndView.addObject("page", soCategoryManager.getMenuChanged(criteria));
    		modelAndView.addObject("criteria",criteria);
    	} else {
    		addError(request, getText("restaurant.not.found", request.getLocale()));
    	}
        return modelAndView;
    }
    
    @PostMapping("/res/so/menu/changed")
    public ModelAndView searchMenuChanged(@Valid SoCategoryDto criteria, HttpServletRequest request) {
    	log.info("entering 'listMenuChanged' method...");
    	ModelAndView modelAndView = new ModelAndView("res-so-menu-changed");
    	if (criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
    	modelAndView.addObject("page", soCategoryManager.gets(criteria));
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/res/so/menu/reset")
    public String resetMenu(@Valid SoCategoryDto criteria, BindingResult bindingResult,HttpServletRequest request){
    	log.debug("entering 'resetMenu' method...");
		String view = "res-co-food-item-changed";
		Integer resCode = criteria.getRestaurantCode();
		if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
		try {
			soManager.resetSoCategory(resCode,UserContext.getUsername());
			addMessage(request, getText("reset.data.success", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
		view = "redirect:/res/so/menu/changed?resCode=" + resCode;
        return view;
    }
    
   
    @GetMapping("/res/so/menu/form")
    public ModelAndView showResSo(@RequestParam (value="resCode", required=true) Integer resCode, @RequestParam(value="scId", required=false) Long scId, HttpServletRequest request) {
    	log.info("entering 'showResSo' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("res-so-menu-form");
    	if (resCode != null) {
    		if (scId != null) {
    			modelAndView.addObject("soCategory", soCategoryManager.get(scId));
    		} else {
        		SoCategoryDto soCategory = new SoCategoryDto();
        		soCategory.setRestaurantCode(resCode);
        		modelAndView.addObject("soCategory", soCategory);
    		}
        	modelAndView.addObject("orderCategories", orderCategoryManager.gets(resCode));

        	List<KeyValue> keyValues = new ArrayList<>();
        	for (MenuTypeEnum e : MenuTypeEnum.values()) {
        		KeyValue keyValue = new KeyValue();
        		keyValue.setKey(e.key);
        		keyValue.setVal(e.val);
        		keyValues.add(keyValue);
        	}
        	modelAndView.addObject("types", keyValues);

    	} else {
    		addError(request, getText("restaurant.not.found", request.getLocale()));
    		modelAndView.setViewName("res-so-menu-list");
    	}
    	modelAndView.addObject("attachmentPath", appProperties.getAttachmentPath());
    	modelAndView.addObject("attachmentContextPath", appProperties.getAttachmentContextPath());
        return modelAndView;
    }
    
	@PostMapping("/res/so/menu/save")
    public String saveResMenu(@Valid SoCategoryDto soCategory, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.info("entering 'saveResMenu' method...");

        Locale locale = request.getLocale();
        String view = "redirect:/res/so/menu/list?resCode=" + soCategory.getRestaurantCode();
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        try {
        	SoCategoryDto savedSoCategory = soCategoryManager.save(UserContext.getUsername(), soCategory,appProperties.getAttachmentPath(),appProperties.getAttachmentContextPath());
            if (savedSoCategory != null) {
                addMessage(request, getText("soCategory.updated", locale));    
                syncStatusManager.saveSttAfterEditDataBusiness(savedSoCategory.getRestaurantCode());
                restaurantDataEditManager.save(savedSoCategory.getId().toString(),TypeRestaurantDataEditEnum.SO_CATEGORY.val, savedSoCategory.getRestaurantCode());
            } else {
            	addError(request, getText("soCategory.error", locale));
            }
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
        

        return view;
    }
    
    @GetMapping("/res/so/menu/del/{resCode}/{scId}")
    public String delResMenu(@PathVariable Integer resCode, @PathVariable Long scId, final HttpServletRequest request) {
    	log.info("entering 'delResMenu' method...");
    	
    	String view = "redirect:/res/so/menu/list?resCode=" + resCode;
    	try {
    		List<Long> removedCoFoodItemIds = soCategoryManager.deleleByRestaurant(resCode, scId);
            // delete attachments of removed-co-food-items
        	if (removedCoFoodItemIds != null && !removedCoFoodItemIds.isEmpty()) {
            	removedCoFoodItemIds.stream().forEach(id -> attachmentManager.deleteByModuleIdAndModuleType(id, ModuleTypeEnum.CO_FOOD_ITEM.val));
            }
        	
        	addMessage(request, getText("soCategory.deleted", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	return view;
    }
    
	@GetMapping("/so/menu/delete")
    public String deleteSoMenu(@RequestParam Long scId, final HttpServletRequest request) {
    	log.info("entering 'delResMenu' method...");
    	
    	String view = "";
    	SoCategoryDto soCategoryDto = soCategoryManager.get(scId);
    	if(soCategoryDto.getRestaurantCode() != null) {
    		view = "redirect:/res/so/menu/list?resCode=" + soCategoryDto.getRestaurantCode();
    	} else {
    		view = "redirect:/cag/so/menu/list?soId=" + soCategoryDto.getSo().getId();
    		soManager.saveAfterChangeCatalog(soCategoryDto.getSo().getId());
    	}
    	try {
    		soCategoryManager.deleleSoCategory(soCategoryDto);
        	addMessage(request, getText("soCategory.deleted", request.getLocale()));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	return view;
    }
    
    @GetMapping("/res/so/foodGroup/list")
    public ModelAndView listResFoodGroup(@RequestParam Integer resCode, HttpServletRequest request) {
    	log.info("entering 'listResFoodGroup' method...");

		ModelAndView modelAndView = new ModelAndView("res-so-foodGroup-list");
		if (resCode != null) {
	    	FoodGroupDto criteria = new FoodGroupDto();
	    	criteria.setRestaurantCode(resCode);
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			modelAndView.addObject("page", foodGroupManager.gets(criteria));
			modelAndView.addObject("criteria", criteria);
		} else {
			addError(request, getText("restaurant.not.found", request.getLocale()));
		}

        return modelAndView;
    }

    @GetMapping("/res/so/foodItem/list")
    public ModelAndView listResFoodItem(@RequestParam Integer resCode, HttpServletRequest request) {
    	log.info("entering 'listResFoodItem' method...");

		ModelAndView modelAndView = new ModelAndView("res-so-foodItem-list");
		if (resCode != null) {
	    	FoodItemDto criteria = new FoodItemDto();
	    	criteria.setRestaurantCode(resCode);
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
			modelAndView.addObject("page", foodItemManager.gets(criteria));
			modelAndView.addObject("criteria", criteria);
		} else {
			addError(request, getText("restaurant.not.found", request.getLocale()));
		}

        return modelAndView;
    }
    
    //---------- /For Restaurant ----------//
    
    
    //------------------------------------//
    //---------- For Ajax Call ----------//
    //------------------------------------//
	
	//add foodItem
	@PostMapping("/so/save-food-item")
    public String saveFoodItem(@Valid SoCategoryDto criteria, HttpServletRequest request) throws IntegrationException {
    	log.info("entering 'saveFoodItem' method...");
    	try {
    		Set<Long> soIds = soCategoryManager.saveFgItems(criteria);
        	if(!soIds.isEmpty()) {
        		soManager.saveAfterChangeCatalogs(soIds);
        	}
        	addMessage(request, getText("soCategory.updated", request.getLocale()));   
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
        return "redirect:/cag/so/add-food-item/form";
    }
	
	//delete foodItem
	@PostMapping("/so/delete-food-item")
    public String soDelFoodItem(@Valid SoCategoryDto criteria, HttpServletRequest request) throws IntegrationException {
    	log.info("entering 'soDelFoodItem' method...");
    	try {
    		Set<Long> soIds = soCategoryManager.delFgItems(criteria);
        	if(!soIds.isEmpty()) {
        		soManager.saveAfterChangeCatalogs(soIds);
        	}
        	addMessage(request, getText("soCategory.delete.foodItem", request.getLocale()));   
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
        return "redirect:/cag/so/add-food-item/form";
    }

	
	// get tree
		@SuppressWarnings({ "unchecked", "rawtypes" })
		@GetMapping("/cag/so/get-tree")
	    @ResponseBody
	    public FancyTree getTree(@RequestParam (value = "keyword", required = false) String keyword,@RequestParam (value = "keywordFoodItem", required = false) String keywordFoodItem,@RequestParam (value = "selectedCodes", required = false) String selectedCodes,HttpServletRequest request) {
	    	log.debug("entering 'getTree catalog' method...");
	    	
	    	FancyTree root = new FancyTree();
	    	List comNodes = new ArrayList();
	    	FancyTree comNode = new FancyTree();
	    	comNode.setTitle(getText("tree.cag.name", request.getLocale()));
	    	
	    	List<String> foodGroupCodes = new ArrayList<>();
	    	List<Long> soCategoryIds = new ArrayList<>();
	    	List<Long> soIds = new ArrayList<>();
	    	List<String> foodItemCodes = new ArrayList<>();
	    	
			if(selectedCodes != null && !selectedCodes.isEmpty()) {
				Set<String> keys = StringUtils.commaDelimitedListToSet(selectedCodes);
				List<String> filterKey = keys.stream().filter(key -> !key.contains("_")).collect(Collectors.toList());
				filterKey.stream().forEach(keyCode ->{
					// form KeyCode : foodGroupCode-SoCategoryId-SoId
					String[] keyValue = keyCode.split(SymbolEnum.HYPHEN.val);
					foodGroupCodes.add(keyValue[0]);
					soCategoryIds.add(Long.parseLong(keyValue[1]));
					soIds.add(Long.parseLong(keyValue[2]));
					if(keywordFoodItem != null && !keywordFoodItem.isEmpty()) {
						foodItemCodes.add(keyValue[3]);
					}
				});
			}
			if(keywordFoodItem != null && !keywordFoodItem.isEmpty() || !foodItemCodes.isEmpty()) {
				comNodes.add(soManager.getTree(keyword,keywordFoodItem, comNode,foodItemCodes,foodGroupCodes));
			}else if(keyword != null && !keyword.isEmpty() || !foodGroupCodes.isEmpty() ) {
	    		comNodes.add(soManager.getTree(keyword, comNode,foodGroupCodes));
	    	} else {
	    		comNodes.add(soManager.getTree(comNode));
	    	}
			
	    	
	    	
	    	root.setChildren(comNodes);
	    	
	    	return root;
	    }
	
	
	
    @PostMapping("/del/foodGroup/avatar")
    public ResponseEntity<String> delAvatarFoodGroup(@RequestParam("avatarAbsolutePath") String avatarAbsolutePath,@RequestParam("foodGroupId") Long foodGroupId) {
    	log.debug("entering 'delAvatarFoodGroup' method...");
    	if(foodGroupId != null) {
    		attachmentManager.delAttachment(foodGroupId, ModuleTypeEnum.FOOD_GROUP.val, avatarAbsolutePath, FunctionTypeEnum.AVATAR.val);
    	} else {
    		attachmentManager.delAttachment(null, ModuleTypeEnum.FOOD_GROUP.val, avatarAbsolutePath, FunctionTypeEnum.AVATAR.val);
    	}
    	return ResponseEntity.ok(HttpStatus.OK.toString());
    }
    
    
    @PostMapping("/foodGroup/upload")
    @ResponseBody
    public Boolean uploadImages (@RequestPart("avatar") MultipartFile multipartFile) {
    	log.debug("entering 'uploadImages' method...");
        Boolean uploadImage = false;
		try {
			if(multipartFile != null) {
				uploadImage = attachmentManager.uploadAttachment(multipartFile,appProperties.getAttachmentPath(), UploadImageEnum.IMG_MENU_FOLDER.val);
			}
		} catch (Exception e) {
			return uploadImage;
		}
        return uploadImage;
    }
    
    @GetMapping("/cag/so/get-food-items")
    @ResponseBody
    public List<FoodItemDto> getFoodItems(@RequestParam(value="fgId", required=false) Long foodGroupId, @RequestParam(value="resCode", required=false) Integer restaurantCode) {
    	log.info("entering 'getFoodItems("+foodGroupId+", "+restaurantCode+")' method...");
    	return foodItemManager.gets(foodGroupId, restaurantCode);
    }

    @GetMapping("/cag/so/load-food-items")
    @ResponseBody
    public List<FoodItemDto> loadFoodItems(@RequestParam(value="q", required=false) String query) {
    	log.info("entering 'loadFoodItems("+query+")' method...");
    	return foodItemManager.gets(query);
    }
    
    @GetMapping("/api/so/get-food-groups")
    @ResponseBody
    public List<MenuFoodGroup> getFoodGroups(@RequestParam (value="soId", required=true) Long soId, @RequestParam(value="scId", required=false) Long soCategoryId, @RequestParam(value="resCode", required=false) Integer restaurantCode) {
    	log.info("entering 'getFoodGroups' method...");
    	return soCategoryManager.getMenuFoodGroups(soCategoryId, restaurantCode);
    }
    
    @GetMapping("/api/so/get-food-group-parents")
    @ResponseBody
    public List<FoodGroupDto> getFoodGroupParents(@RequestParam (value="soId", required=false) Long soId, @RequestParam(value="resCode", required=false) Integer restaurantCode, @RequestParam(value="fgCode", required=false) String foodGroup,@RequestParam(value="scId", required=false) Long scId) {
    	log.info("entering 'getFoodGroupParents("+soId+", "+restaurantCode+", "+foodGroup+")' method...");
    	return foodGroupManager.getParents(soId, restaurantCode, foodGroup,scId);
    }
    
    @GetMapping("/api/so/get-menu-group-items")
    @ResponseBody
    public FancyTree getMenuGroupItems(@RequestParam(value="scId", required=true) Long soCategoryId, @RequestParam(value="resCode", required=false) Integer restaurantCode) {
    	log.info("entering 'getMenuGroupItems' method...");
    	return soCategoryManager.getJsonFoodGroupItems(soCategoryId, restaurantCode);
    }
    
    @GetMapping("/api/so/get-food-group")
    @ResponseBody
    public List<MenuFoodGroup> getFoodGroup(@RequestParam("query") String query) {
    	log.info("entering 'getFoodGroup' method...");
    	
    	return soCategoryManager.gets(query);
    }

    @GetMapping("/api/so/get-so-category-food-group")
    @ResponseBody
    public MenuFoodGroup getSoCategoryFoodGroup(@RequestParam("scId") Long soCategoryId, @RequestParam("fgCode") String foodGroupCode, @RequestParam(value="resCode", required=false) Integer restaurantCode) {
    	log.info("entering 'getSoCategoryFoodGroup' method...");
    	
    	//return soCategoryManager.get(soCategoryId, foodGroupId);
    	return soCategoryManager.getMenuFoodGroup(soCategoryId, foodGroupCode, restaurantCode);
    }

    @GetMapping("/api/so/get-menu-types")
    @ResponseBody
    public List<MenuTypeDto> getMenuTypes() {
    	log.info("entering 'getMenuTypes' method...");
    	return menuTypeManager.gets();
    }
    
    @GetMapping("/api/so/check-to-off")
    @ResponseBody
    public ResponseData checkToOff(@RequestParam("soId") Long soId) {
    	log.info("entering 'checkToOff' method...");
    	
    	return soManager.checkToOff(soId);
    }

    @GetMapping("/api/so/get-existing-food-items")
    @ResponseBody
    public List<FoodItemDto> getExistingFoodItem(@RequestParam("fgId") Long foodGroupId) {
    	log.info("entering 'getExistingFoodItem' method...");
    	
    	return foodItemManager.getExistingFoodItems(foodGroupId);
    }
    
    @GetMapping("/api/so/get-from-localStorage")
    @ResponseBody
    public List<FoodItemDto> getFromLocalStorage(@RequestParam("selectedFoodItems") String selectedFoodItems) {
    	log.info("entering 'getExistingFoodItem' method...");
    	
    	return foodItemManager.getFromLocalStorage(selectedFoodItems);
    }
    
    @PostMapping(value = "/foodGroup/checkCode", produces = "application/json;charset=UTF-8")
	public @ResponseBody boolean checkGroupCode(@RequestParam("soId") Long soId, @RequestParam(value="resCode", required=false) Integer restaurantCode, @RequestParam("code") String code, HttpServletRequest request) {
		log.debug("...Entering checkGroupCode()... ");
		
		return foodGroupManager.checkCode(soId, restaurantCode, code);
	}
    
    @GetMapping("/api/so/load-ticketBuffet")
    @ResponseBody
    public SoCategoryDto getTicketBuffet(@RequestParam("soCategoryId") Long soCategoryId) {
    	log.info("entering 'getTicketBuffet' method...");
    	return soCategoryManager.getById(soCategoryId);
    }
    
    @GetMapping("/api/so/check-so-category-before-del")
    @ResponseBody
    public boolean checkSoCategoryBeforeDel(@RequestParam("scId") Long soCategoryId) {
    	log.info("entering 'checkSoCategoryBeforeDel' method...");
    	return coCategoryManager.getByScId(soCategoryId);
    }
}