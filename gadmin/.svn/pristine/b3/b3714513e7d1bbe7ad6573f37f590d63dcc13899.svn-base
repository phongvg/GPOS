package com.gg.gpos.menu.controller;

import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.controller.BaseController;
import com.gg.gpos.menu.dto.KdsDto;
import com.gg.gpos.menu.dto.PrintGroupDto;
import com.gg.gpos.menu.manager.KdsManager;
import com.gg.gpos.menu.manager.PrintGroupManager;
import com.gg.gpos.res.manager.SyncStatusManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class KdsController extends BaseController {
	@Autowired
    private KdsManager kdsManager;
	@Autowired
	private PrintGroupManager printGroupManager;
	@Autowired
    private SyncStatusManager syncStatusManager;
	
    @GetMapping("/kds/catalog-list")
    public ModelAndView list() {
    	log.debug("entering 'list' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-kds-list");
		KdsDto criteria = new KdsDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		Page<KdsDto> pages = kdsManager.gets(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/kds/catalog-list")
    public ModelAndView search(@Valid KdsDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-kds-list");
		if(criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<KdsDto> pages = kdsManager.gets(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping("/kds/catalog-form")
    public ModelAndView showCatalogForm(@RequestParam(value="id", required=false) Long id) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("catalog-kds-form");
    	KdsDto kds = new KdsDto();
    	if(id != null) {
    		kds = kdsManager.get(id);
    	}
    	List<Integer> appliedRestaurantCodes = printGroupManager.getAppliedRestaurantCodes(kds.getId());
    	boolean check = false;
    	if(appliedRestaurantCodes != null && !appliedRestaurantCodes.isEmpty()) {
    		check = true;
    	}
    	
    	modelAndView.addObject("kds", kds);
    	modelAndView.addObject("check", check);
		
        return modelAndView;
    }
    
    /*@GetMapping("/kds/form")
    public ModelAndView show(@RequestParam(value="rCode", required=true) Integer rCode) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("kds-form");
    	PrintGroupDto printGroupDto = printGroupManager.getOneByRestaurantCode(rCode);
    	
    	KdsDto kds = new KdsDto();
    	if(printGroupDto != null) {
    		kds = printGroupDto.getKds();
    	}
    	kds.setRestaurantCode(rCode);
    	
    	modelAndView.addObject("kds", kds);
    	modelAndView.addObject("kdss", kdsManager.gets());
		modelAndView.addObject("restaurants", restaurantManager.getRelatedRestaurants(rCode));
        return modelAndView;
    }

    @PostMapping("/kds/save")
    public String save(@Valid KdsDto kdsDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'save' method...");
        Locale locale = request.getLocale();
        String view = "kds-form";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        } else {
        	if(!kdsDto.isStatus()) {
        		kdsManager.off(kdsDto);
        	}
        	kdsDto = kdsManager.save(kdsDto);
            addMessage(request, getText("kds.updated", locale));
            view = "redirect:/kds/catalog-form?id="+kdsDto.getId();
        } 
        return view;
    }*/
    
    @PostMapping("/kds/apply")
    public String applyKDS(@Valid KdsDto kdsDto, HttpServletRequest request) {
    	String view;
    	log.debug("entering 'apply' method...");
    	Locale locale = request.getLocale();
    	PrintGroupDto printGroup = null;
    	if(kdsDto.getRestaurantCode() != null) {
    		view = "redirect:/kds/form?rCode=" + kdsDto.getRestaurantCode();
    	}else {
            view = "redirect:/kds/apply?kId=" + kdsDto.getId();
    	}
    	try {
    		if(kdsDto.getSelectedRestaurantCodes() != null) {
        		if(kdsManager.checkDataCatalog(kdsDto)) {
    	    		kdsManager.apply(kdsDto);
    	    		syncStatusManager.saveSttAfterApplyMenu(kdsDto.getSelectedRestaurantCodes(),null, null);
    	    		addMessage(request, getText("kds.apply", locale));
        		}else {
        			addError(request, getText("kds.apply.emptyPrintGroup", locale));
        		}
        	}else {
        		kdsManager.applyFromRestaurant(kdsDto);
        		syncStatusManager.saveSttAfterApplyMenu(null, null, kdsDto.getRestaurantCode());
        		printGroup = printGroupManager.getOneByRestaurantCode(kdsDto.getRestaurantCode());
        		if(printGroup != null) {
            		addMessage(request, getText("kds.apply", locale));
            	}else {
            		addError(request, getText("kds.apply.emptyPrintGroup", locale));
            	}
        	}
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	return view;
    }
    
    @GetMapping("/kds/apply")
    public ModelAndView applyForm(@RequestParam(name = "kId", required = true) Long kId) {
    	ModelAndView modelAndView = new ModelAndView("catalog-kds-apply");
    	
    	modelAndView.addObject("kds", kdsManager.get(kId));
    	return modelAndView;
    }
    
    @PostMapping("/kds/copy")
    public String copyKds(@Valid KdsDto kdsDto, HttpServletRequest request) {
    	String view = "kds-form";
    	log.debug("entering 'copy' method...");
    	Locale locale = request.getLocale();
    	PrintGroupDto printGroup = null;
    	try {
    		if(kdsDto.getRestaurantCode() != null) {
        		printGroup = printGroupManager.getOneByRestaurantCode(kdsDto.getRestaurantCode());
        		if(printGroup != null) {
        			kdsManager.copy(kdsDto);
        			syncStatusManager.saveSttAfterApplyMenu(null, kdsDto.getResCodes(), null);
        			addMessage(request, getText("kds.copied", locale));
        		}else {
        			addError(request, getText("kds.apply.emptyPrintGroup", locale));
        		}
        	}
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	view = "redirect:/kds/form?rCode=" + kdsDto.getRestaurantCode();
    	
    	return view;
    }
    
    
    @GetMapping("/kds/form")
    public ModelAndView show(@RequestParam(value="rCode", required = true) Integer rCode) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("kds-form");
    	
    	KdsDto kds = kdsManager.getByCode(rCode);
    	if(kds == null) {
    		kds = new KdsDto();
    	}
    	kds.setRestaurantCode(rCode);
    	modelAndView.addObject("kds", kds);
		modelAndView.addObject("restaurants", restaurantManager.getRelatedRestaurants(rCode));
        return modelAndView;
    }

    @PostMapping("/kds/save")
    public String save(@Valid KdsDto kdsDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'save' method...");
        Locale locale = request.getLocale();
        String view = "kds-form";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        } 
        try {
        	kdsDto = kdsManager.save(kdsDto);
            addMessage(request, getText("kds.updated", locale));
           
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
        view = "redirect:/kds/form?rCode="+kdsDto.getRestaurantCode();
        return view;
    }
}