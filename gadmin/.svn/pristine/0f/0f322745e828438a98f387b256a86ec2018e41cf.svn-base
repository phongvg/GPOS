package com.gg.gpos.menu.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.SizeImageEnum;
import com.gg.gpos.common.json.ResponseData;
import com.gg.gpos.common.util.UserContext;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.menu.dto.CatalogApplyToRestaurantDto;
import com.gg.gpos.menu.dto.CoDto;
import com.gg.gpos.menu.dto.SoDto;
import com.gg.gpos.menu.manager.CatalogApplyToRestaurantManager;
import com.gg.gpos.menu.manager.CoFoodItemManager;
import com.gg.gpos.menu.manager.CoManager;
import com.gg.gpos.menu.manager.SoManager;
import com.gg.gpos.reference.manager.AttachmentManager;
import com.gg.gpos.res.manager.ZoneManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class CoController extends BaseController {

    private CoManager coManager;
    @Autowired
    public void setCoManager(CoManager coManager) {
        this.coManager = coManager;
    }
    @Autowired
    public ZoneManager zoneManager;
    @Autowired
    private SoManager soManager;
    @Autowired
    private CoFoodItemManager coFoodItemManager;
    @Autowired
    private AttachmentManager attachmentManager;
    @Autowired
    private CatalogApplyToRestaurantManager catalogApplyToRestaurantManager;
    
    //========== Catalog  ==============//
    @GetMapping("/co/catalog-list")
    public ModelAndView listCatalogCo(){
    	log.debug("entering 'list' method...");
    	
		ModelAndView modelAndView = new ModelAndView("catalog-co-list");
		CoDto criteria = new CoDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		Page<CoDto> pages = coManager.gets(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("cos", pages.getContent());
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/co/catalog-list")
    public ModelAndView search (@Valid CoDto criteria, BindingResult bindingResult) {
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("catalog-co-list");
		
		if (criteria != null && criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<CoDto> pages = coManager.gets(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("cos", coManager.gets());
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/co/upload")
    @ResponseBody
    public boolean uploadPhotos (@Valid CoDto coDto, BindingResult bindingResult, HttpServletRequest request) {
    	log.debug("entering 'uploadPhotos' method...");
    	Boolean uploadImage = false;
		try {
			if(coDto.getPhotos() != null && coDto.getModuleType() != null && coDto.getPhotos().size() <= SizeImageEnum.FILE_SIZE.sizeImage) {
				attachmentManager.saveAts(coDto.getPhotos(),appProperties.getAttachmentPath(), coDto.getModuleType());
				uploadImage = true;
			}else {
				return uploadImage;
			}
		} catch (Exception e) {
			return uploadImage;
		}
    	
    	
        return uploadImage;
    }
    
    @GetMapping("/co/sync-to-restaurant")
    public ModelAndView syncToRes(@RequestParam(value="cId")Long cId,HttpServletRequest request) {
    	log.debug("entering 'SynctoRes' method..");
    	ModelAndView modelAndView = new ModelAndView("catalog-co-apply");
    	if(cId != null) {
    		CoDto co = coManager.get(cId);
    		modelAndView.addObject("co", co);
    	}else {
    		modelAndView.setViewName("redirect:/co/catalog-form");
    		addError(request, getText("co.not.created", request.getLocale()));
    	}
    	return modelAndView;
    }
    
    @GetMapping("/co/catalog-form")
    public ModelAndView showForm(@RequestParam(value="id", required = false)Long id) {
    	log.debug("entering 'coCatalogForm' method...");
    	ModelAndView modelAndView = new ModelAndView("catalog-co-form");
    	CoDto co = new CoDto();
    	List<SoDto> sos = soManager.getByStatusAndSoCategories();
    	if(id != null) {
    		co = coManager.get(id);
    		SoDto so = soManager.get(co.getSoId());
    		sos.add(so);
    		List<Integer> appliedRestaurantCodes = coFoodItemManager.getAppliedRestaurantCodes(co.getId());
        	boolean check = false;
        	if(appliedRestaurantCodes != null && !appliedRestaurantCodes.isEmpty()) {
        		check = true;
        	}
        	modelAndView.addObject("check",check);
    	}
    	modelAndView.addObject("co",co);
    	modelAndView.addObject("sos",sos);
    	return modelAndView;
    }
    
	@PostMapping("/co/save-catalog")
    public String saveCatalogCo(@Valid CoDto coDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
        log.debug("entering 'saveCatalogCo' method...");

        Locale locale = request.getLocale();
        String loginedUsername = UserContext.getUsername();
        String view = "catalog-co-form";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }  
        try {
        	if(coDto.getId() != null) {
	        	coDto.setModifiedBy(loginedUsername);
	        } else {
	        	coDto.setCreatedBy(loginedUsername);
	        	coDto.setModifiedBy(loginedUsername);
	        }
	        CoDto co = coManager.save(coDto);
	        addMessage(request, getText("catalog.co.updated", locale));
	        view = "redirect:/co/catalog-form?id=" + co.getId();
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
        return view;
    }
    
    //================== for restaurant ================//
    @GetMapping("/co/form")
    public ModelAndView show(@RequestParam(value="rCode",required = false)Integer rCode) throws Exception {
    	log.debug("entering 'show' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("co-form");
    	CoDto co = new CoDto();	
    	List<CoDto> coDtos = new ArrayList<>();
    	CatalogApplyToRestaurantDto applyToRestaurantDto = catalogApplyToRestaurantManager.getByResCode(rCode);
    	if(applyToRestaurantDto != null) {
			co.setId(applyToRestaurantDto.getCoId());
    		if(applyToRestaurantDto.getSoId() != null) {
    			coDtos = coManager.getsByStatusAndCoFoodItemNotNull(rCode, applyToRestaurantDto.getSoId());
    		}
    	}
    	co.setRestaurantCode(rCode);
		modelAndView.addObject("co", co);
		modelAndView.addObject("cos",coDtos);
		modelAndView.addObject("restaurants", restaurantManager.getRelatedRestaurants(rCode));
        return modelAndView;
    }
    
    //================== call api =============== //
    @GetMapping("/api/co/check-so")
    @ResponseBody
    public ResponseData checkApply(@RequestParam("refId") Long refId, @RequestParam("selectedRestaurantCodes")String selectedRestaurantCodes) {
    	log.debug("entering 'check So before apply to Restaurant' method...");
    	return coManager.checkSoBeforApply(selectedRestaurantCodes,refId);
    }
    
    @GetMapping("/api/res/co/check-so")
    @ResponseBody
    public ResponseData checkSoToRes(@RequestParam("coId") Long coId, @RequestParam("selectedResCode")String selectedRestaurantCodes) {
    	log.debug("entering 'check So before copy to Restaurant' method...");
    	return coManager.checkSoBeforCopy(selectedRestaurantCodes,coId);
    }
    //================== //call api =============== //
}