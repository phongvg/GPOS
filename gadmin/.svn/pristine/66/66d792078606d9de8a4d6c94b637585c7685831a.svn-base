package com.gg.gpos.menu.controller;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.gg.gpos.common.constant.SystemParamEnum;
import com.gg.gpos.controller.BaseController;
import com.gg.gpos.menu.dto.AreaDto;
import com.gg.gpos.menu.manager.AreaManager;
import com.gg.gpos.menu.manager.HallplanManager;
import com.gg.gpos.menu.manager.KdsManager;
import com.gg.gpos.reference.dto.SystemParameterDto;
import com.gg.gpos.res.manager.SyncStatusManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class AreaController extends BaseController {
	@Autowired
    private AreaManager areaManager;
	@Autowired
	private KdsManager kdsManager;
	@Autowired
	private HallplanManager hallplanManager;
	@Autowired
    private SyncStatusManager syncStatusManager;
	
    @GetMapping("/area/list")
    public ModelAndView list(@RequestParam(name="kId", required = false) Long kId, @RequestParam(name="rCode", required = true) Integer rCode) {
    	log.debug("entering 'list' method...");
		ModelAndView modelAndView = new ModelAndView("area-list");
		AreaDto criteria = new AreaDto();
		criteria.setPage(appProperties.getDefaultPage());
		criteria.setSize(appProperties.getDefaultPageSize());
		if(kId != null) {
			criteria.setKds(kdsManager.get(kId));
		} else {
			criteria.setKds(null);
		}
		criteria.setRestaurantCode(rCode);
		
		Page<AreaDto> pages = areaManager.gets(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @PostMapping("/area/list")
    public ModelAndView search(Model model, @Valid AreaDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("area-list");
		if(criteria.getSize() == null) {
			criteria.setPage(appProperties.getDefaultPage());
			criteria.setSize(appProperties.getDefaultPageSize());
		}
		Page<AreaDto> pages = areaManager.gets(criteria);
		modelAndView.addObject("page", pages);
		modelAndView.addObject("criteria",criteria);
        return modelAndView;
    }
    
    @GetMapping("/area/form")
    public ModelAndView showForm(@RequestParam(value="kId", required=false) Long kId, @RequestParam(name="id", required = false) Long id, @RequestParam(name="rCode", required = true) Integer rCode) {
    	log.debug("entering 'show' method...");
    	
    	ModelAndView modelAndView = new ModelAndView("area-form");
    	AreaDto area = new AreaDto();
    	if(id != null) {
    		area = areaManager.get(id);
    	}
		if(kId != null) {
			area.setKds(kdsManager.get(kId));
		}else {
			area.setKds(null);
		}
		area.setRestaurantCode(rCode);
    	modelAndView.addObject("area", area);
    	modelAndView.addObject("hallplans", hallplanManager.gets(restaurantManager.get(rCode)));
		
    	// Get list of printers from restaurant server
    	SystemParameterDto gatewayUrl = systemParameterManager.get(SystemParamEnum.API_GATEWAY_URL.param);
    	SystemParameterDto getPrintersUrl = systemParameterManager.get(SystemParamEnum.API_GET_PRINTERS_PATTERN.param);
		String apiUrl = gatewayUrl.getParamValue() + getPrintersUrl.getParamValue();

		modelAndView.addObject("printers", restaurantSyncManager.getPrinters(apiUrl, rCode));
		
        return modelAndView;
    }

    @PostMapping("/area/save")
    public String save(@Valid AreaDto areaDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'save' method...");
        Locale locale = request.getLocale();
        String view;
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
        }
        areaDto.setKds(null);
		view = "redirect:/area/list?rCode="+areaDto.getRestaurantCode();
        if(areaDto.getHallplan().getId() == null) {
        	areaDto.setHallplan(null);
        }
        try {
	    	 AreaDto areaNew = areaManager.save(areaDto);
	         syncStatusManager.saveSttAfterEditDataBusiness(areaNew.getRestaurantCode());
	         addMessage(request, getText("area.updated", locale));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
       

        return view;
    }
    
    @GetMapping("/area/delete")
    public String delete(@RequestParam(name="id", required = true) Long id, HttpServletRequest request) {
    	log.debug("entering 'delete' method...");
    	Locale locale = request.getLocale();
    	String view;
    	AreaDto areaDto = areaManager.get(id);
    	view = "redirect:/area/list?rCode="+areaDto.getRestaurantCode();
    	try {
    		areaManager.delete(areaDto);
        	addMessage(request, getText("area.deleted", locale));
		} catch (Exception e) {
			addError(request, e.getMessage());
		}
    	
    	return view;
    }
    
}